<?php

// Start of pcre v.
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Pure;

/**
 * <div id="function.preg-match" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_match</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_match</span> — <span class="dc-title">执行匹配正则表达式</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-match-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_match</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$matches</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$offset</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">  搜索<span class="parameter" style="color:#3A95FF">subject</span>与<span class="parameter" style="color:#3A95FF">pattern</span>给定的正则表达式的一个匹配.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-match-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">pattern</span></dt>     <dd>      <p class="para">       要搜索的模式，字符串类型。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">subject</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">matches</span></dt>     <dd>      <p class="para">      如果提供了参数<span class="parameter" style="color:#3A95FF">matches</span>，它将被填充为搜索结果。      <var class="varname">\$matches[0]</var>将包含完整模式匹配到的文本， <var class="varname">\$matches[1]</var>      将包含第一个捕获子组匹配到的文本，以此类推。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">flags</span> 可以被设置为以下标记值的组合：       </p><dl>                 <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-offset-capture">PREG_OFFSET_CAPTURE</a></span></strong></dt>         <dd>          <p class="para">          如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的字节数)。          注意：这会改变填充到<span class="parameter" style="color:#3A95FF">matches</span>参数的数组，使其每个元素成为一个由          第<span class="literal">0</span>个元素是匹配到的字符串，第<span class="literal">1</span>个元素是该匹配字符串          在目标字符串<span class="parameter" style="color:#3A95FF">subject</span>中的偏移量。           </p><div class="informalexample">            <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(foo)(bar)(baz)/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foobarbaz'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>            </div>            <p class="para">以上示例会输出：</p>            <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive parameterscode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;foobarbaz<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;foo<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;bar<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[3]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;baz<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;6<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>)</blockquote></div>            </div>           </div>                   </dd>                         <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-unmatched-as-null">PREG_UNMATCHED_AS_NULL</a></span></strong></dt>         <dd>          <p class="para">           使用该标记，未匹配的子组会报告为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>；未使用时，报告为空的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>。           </p><div class="informalexample">            <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(a)(b)*(c)/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ac'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(a)(b)*(c)/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ac'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_UNMATCHED_AS_NULL</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>            </div>            <p class="para">以上示例会输出：</p>            <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive parameterscode"><blockquote style="border:1px gray solid;">array(4)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;string(2)&nbsp;"ac"<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;string(1)&nbsp;"a"<br>&nbsp;&nbsp;[2]=&gt;<br>&nbsp;&nbsp;string(0)&nbsp;""<br>&nbsp;&nbsp;[3]=&gt;<br>&nbsp;&nbsp;string(1)&nbsp;"c"<br>}<br>array(4)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;string(2)&nbsp;"ac"<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;string(1)&nbsp;"a"<br>&nbsp;&nbsp;[2]=&gt;<br>&nbsp;&nbsp;NULL<br>&nbsp;&nbsp;[3]=&gt;<br>&nbsp;&nbsp;string(1)&nbsp;"c"<br>}</blockquote></div>            </div>           </div>                   </dd>               </dl>           </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">      通常，搜索从目标字符串的开始位置开始。可选参数 <span class="parameter" style="color:#3A95FF">offset</span> 用于      指定从目标字符串的某个位置开始搜索(单位是字节)。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        </p><p class="para">       使用<span class="parameter" style="color:#3A95FF">offset</span>参数不同于向<span class="function"><strong>preg_match()</strong></span>       传递按照位置通过<span class="literal">substr(\$subject, \$offset)</span>截取目标字符串结果，       因为<span class="parameter" style="color:#3A95FF">pattern</span>可以包含断言比如<em>^</em>， <em>\$</em>       或者<em>(?&lt;=x)</em>。 比较：        </p><div class="informalexample">         <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$subject </span><span style="color: #007700">= </span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$pattern </span><span style="color: #007700">= </span><span style="color: #DD0000">'/^def/'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pattern</span><span style="color: #007700">, </span><span style="color: #9876AA">\$subject</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>         </div>         <p class="para">以上示例会输出：</p>         <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive cdata"><blockquote style="border:1px gray solid;"><br>Array<br>(<br>)<br></blockquote></div>         </div>         <p class="para">          当这个示例使用截取后传递时         </p>         <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$subject </span><span style="color: #007700">= </span><span style="color: #DD0000">"abcdef"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$pattern </span><span style="color: #007700">= </span><span style="color: #DD0000">'/^def/'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pattern</span><span style="color: #007700">, </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">\$subject</span><span style="color: #007700">,</span><span style="color: #9876AA">3</span><span style="color: #007700">), </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>         </div>         <p class="para">          将会产生匹配         </p>         <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive cdata"><blockquote style="border:1px gray solid;"><br>Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;def<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>)<br></blockquote></div>         </div>         <p class="para">          要避免使用 <span class="function">{@link substr()}</span>，可以用 <span class="literal">\G</span> 断言而不是 <span class="literal">^</span> 锚，或者 <span class="literal">A</span> 修改器，它们都能和 <span class="parameter" style="color:#3A95FF">offset</span> 参数一起运行。         </p>        </div>             </blockquote>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-match-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">pattern</span> 匹配到指定 <span class="parameter" style="color:#3A95FF">subject</span>，则   <span class="function"><strong>preg_match()</strong></span> 返回 1，如果没有匹配到则返回 0， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">此函数可能返回布尔值<strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>，但也可能返回等同于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 的非布尔值。请阅读 <a href="https://php.net/manual/zh/language.types.boolean.php" class="link">布尔类型</a>章节以获取更多信息。应使用<a href="https://php.net/manual/zh/language.operators.comparison.php" class="link">===运算符</a>来测试此函数的返回值。</p></div> </div> <div class="refsect1 errors" id="refsect1-function.preg-match-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果传递的正则表达式无法正常解析，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。 </p> </div> <div class="refsect1 changelog" id="refsect1-function.preg-match-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        现在 <span class="parameter" style="color:#3A95FF">\$flags</span> 参数支持 <strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-unmatched-as-null">PREG_UNMATCHED_AS_NULL</a></span></strong>。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.preg-match-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5002">    <p><strong>示例 #1 查找文本字符串"php"</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">//模式分隔符后的"i"标记这是一个大小写不敏感的搜索<br></span><span style="color: #007700">if (</span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">"/php/i"</span><span style="color: #007700">, </span><span style="color: #DD0000">"PHP is the web scripting language of choice."</span><span style="color: #007700">)) {<br>    echo </span><span style="color: #DD0000">"A match was found."</span><span style="color: #007700">;<br>} else {<br>    echo </span><span style="color: #DD0000">"A match was not found."</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5003">    <p><strong>示例 #2 查找单词"word"</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 模式中的\b标记一个单词边界，所以只有独立的单词"web"会被匹配，而不会匹配<br> * 单词的部分内容比如"webbing" 或 "cobweb" <br></span><span style="color: #007700">if (</span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">"/\bweb\b/i"</span><span style="color: #007700">, </span><span style="color: #DD0000">"PHP is the web scripting language of choice."</span><span style="color: #007700">)) {<br>    echo </span><span style="color: #DD0000">"A match was found."</span><span style="color: #007700">;<br>} else {<br>    echo </span><span style="color: #DD0000">"A match was not found."</span><span style="color: #007700">;<br>}<br><br>echo </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br><br>if (</span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">"/\bweb\b/i"</span><span style="color: #007700">, </span><span style="color: #DD0000">"PHP is the website scripting language of choice."</span><span style="color: #007700">)) {<br>    echo </span><span style="color: #DD0000">"A match was found."</span><span style="color: #007700">;<br>} else {<br>    echo </span><span style="color: #DD0000">"A match was not found."</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5004">    <p><strong>示例 #3 获取URL中的域名</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">//从URL中获取主机名称<br></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'@^(?:http://)?([^/]+)@i'</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"http://www.php.net/index.html"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$host </span><span style="color: #007700">= </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">];<br><br></span><span style="color: #FF8000">//获取主机名称的后面两部分<br></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/[^.]+\.[^.]+\$/'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$host</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br>echo </span><span style="color: #DD0000">"domain name is: </span><span style="color: #007700">{</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]}</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">domain&nbsp;name&nbsp;is:&nbsp;php.net</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5005">    <p><strong>示例 #4 使用命名子组</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>\$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'foobar: 2008'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(?P&lt;name&gt;\w+): (?P&lt;digit&gt;\d+)/'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$str</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// 可选的方式 <br>// preg_match('/(?&lt;name&gt;\w+): (?&lt;digit&gt;\d+)/', \$str, \$matches);<br><br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;foobar:&nbsp;2008<br>&nbsp;&nbsp;&nbsp;&nbsp;[name]&nbsp;=&gt;&nbsp;foobar<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;foobar<br>&nbsp;&nbsp;&nbsp;&nbsp;[digit]&nbsp;=&gt;&nbsp;2008<br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;2008<br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.preg-match-notes">  <h3 class="title">注释</h3>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">   如果你仅仅想要检查某个字符串是否包含另外一个字符串，不要使用<span class="function"><strong>preg_match()</strong></span>。   使用 <span class="function">{@link strpos()}</span> 会更快。   </p>  </div> </div> <div class="refsect1 seealso" id="refsect1-function.preg-match-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>    <li><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    <li><span class="function">{@link preg_match_all()} - 执行一个全局正则表达式匹配</span></li>    <li><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    <li><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    <li><span class="function">{@link preg_last_error_msg()} - Returns the error message of the last PCRE regex execution</span></li>   </ul>   </div></div>
 * 
 * Perform a regular expression match
 * @link https://php.net/manual/zh/function.preg-match.php
 * @param string $pattern <p>
 * The pattern to search for, as a string.
 * </p>
 * @param string $subject <p>
 * The input string.
 * </p>
 * @param string[] &$matches [optional] <p>
 * If <i>matches</i> is provided, then it is filled with
 * the results of search. $matches[0] will contain the
 * text that matched the full pattern, $matches[1]
 * will have the text that matched the first captured parenthesized
 * subpattern, and so on.
 * </p>
 * @param int $flags [optional] <p>
 * <i>flags</i> can be the following flag:
 * <b>PREG_OFFSET_CAPTURE</b>
 * <blockquote>
 * If this flag is passed, for every occurring match the appendant string
 * offset will also be returned. Note that this changes the value of
 * <i>matches</i> into an array where every element is an
 * array consisting of the matched string at offset 0
 * and its string offset into <i>subject</i> at offset 1.
 * <pre>
 * <?php
 * preg_match('/(foo)(bar)(baz)/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);
 * print_r($matches);
 * ?>
 * </pre>
 * The above example will output:
 * <pre>
 * Array
 * (
 *     [0] => Array
 *         (
 *             [0] => foobarbaz
 *             [1] => 0
 *         )
 *
 *     [1] => Array
 *         (
 *             [0] => foo
 *             [1] => 0
 *         )
 *
 *     [2] => Array
 *         (
 *             [0] => bar
 *             [1] => 3
 *         )
 *
 *     [3] => Array
 *         (
 *             [0] => baz
 *             [1] => 6
 *         )
 *
 * )
 * </pre>
 * </blockquote>
 * <b>PREG_UNMATCHED_AS_NULL</b>
 * <blockquote>
 * If this flag is passed, unmatched subpatterns are reported as NULL;
 * otherwise they are reported as an empty string.
 * <pre>
 * <?php
 * preg_match('/(a)(b)*(c)/', 'ac', $matches);
 * var_dump($matches);
 * preg_match('/(a)(b)*(c)/', 'ac', $matches, PREG_UNMATCHED_AS_NULL);
 * var_dump($matches);
 * ?>
 * </pre>
 * The above example will output:
 * <pre>
 * array(4) {
 *   [0]=>
 *   string(2) "ac"
 *   [1]=>
 *   string(1) "a"
 *   [2]=>
 *   string(0) ""
 *   [3]=>
 *   string(1) "c"
 * }
 * array(4) {
 *   [0]=>
 *   string(2) "ac"
 *   [1]=>
 *   string(1) "a"
 *   [2]=>
 *   NULL
 *   [3]=>
 *   string(1) "c"
 * }
 * </pre>
 * </blockquote>
 * @param int $offset [optional] <p>
 * Normally, the search starts from the beginning of the subject string.
 * The optional parameter <i>offset</i> can be used to
 * specify the alternate place from which to start the search (in bytes).
 * </p>
 * <p>
 * Using <i>offset</i> is not equivalent to passing
 * substr($subject, $offset) to
 * <b>preg_match</b> in place of the subject string,
 * because <i>pattern</i> can contain assertions such as
 * ^, $ or
 * (?&lt;=x). Compare:
 * <pre>
 * $subject = "abcdef";
 * $pattern = '/^def/';
 * preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
 * print_r($matches);
 * </pre>
 * The above example will output:</p>
 * <pre>
 * Array
 * (
 * )
 * </pre>
 * <p>
 * while this example
 * </p>
 * <code>
 * $subject = "abcdef";
 * $pattern = '/^def/';
 * preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);
 * print_r($matches);
 * </code>
 * <p>
 * will produce
 * </p>
 * <pre>
 * Array
 * (
 *     [0] => Array
 *         (
 *             [0] => def
 *             [1] => 0
 *         )
 * )
 * </pre>
 * Alternatively, to avoid using substr(), use the \G assertion rather
 * than the ^ anchor, or the A modifier instead, both of which work with
 * the offset parameter.
 * </p>
 * @return int|false <b>preg_match</b> returns 1 if the <i>pattern</i>
 * matches given <i>subject</i>, 0 if it does not, or <b>FALSE</b>
 * if an error occurred.
 */
function preg_match(string $pattern, string $subject, &$matches, int $flags = 0, int $offset = 0): int|false {}

/**
 * <div id="function.preg-match-all" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_match_all</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_match_all</span> — <span class="dc-title">执行一个全局正则表达式匹配</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-match-all-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_match_all</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$matches</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$offset</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">  搜索<span class="parameter" style="color:#3A95FF">subject</span>中所有匹配<span class="parameter" style="color:#3A95FF">pattern</span>给定正则表达式  的匹配结果并且将它们以<span class="parameter" style="color:#3A95FF">flag</span>指定顺序输出到<span class="parameter" style="color:#3A95FF">matches</span>中.  </p>  <p class="para">  在第一个匹配找到后, 子序列继续从最后一次匹配位置搜索.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-match-all-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">pattern</span></dt>     <dd>      <p class="para">       要搜索的模式，字符串形式。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">subject</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">matches</span></dt>     <dd>      <p class="para">      多维数组，作为输出参数输出所有匹配结果, 数组排序通过<span class="parameter" style="color:#3A95FF">flags</span>指定。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">      可以结合下面标记使用(注意不能同时使用<strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-pattern-order">PREG_PATTERN_ORDER</a></span></strong>和      <strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-set-order">PREG_SET_ORDER</a></span></strong>)：       </p><dl>                 <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-pattern-order">PREG_PATTERN_ORDER</a></span></strong></dt>         <dd>          <p class="para">          结果排序为<var class="varname">\$matches[0]</var>保存完整模式的所有匹配, <var class="varname">\$matches[1]</var>          保存第一个子组的所有匹配，以此类推。          </p>          <p class="para">           </p><div class="informalexample">            <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">"|&lt;[^&gt;]+&gt;(.*)&lt;/[^&gt;]+&gt;|U"</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"&lt;b&gt;example: &lt;/b&gt;&lt;div align=left&gt;this is a test&lt;/div&gt;"</span><span style="color: #007700">,<br>    </span><span style="color: #9876AA">\$out</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_PATTERN_ORDER</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$out</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">", " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$out</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">\$out</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">", " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$out</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>            </div>            <p class="para">以上示例会输出：</p>            <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive parameterscode"><blockquote style="border:1px gray solid;"><b>example:&nbsp;</b>,&nbsp;<div>this&nbsp;is&nbsp;a&nbsp;test</div><br>example:&nbsp;,&nbsp;this&nbsp;is&nbsp;a&nbsp;test</blockquote></div>            </div>            <p class="para">             因此, <var class="varname">\$out[0]</var> 是包含匹配完整模式的字符串的数组，             <var class="varname">\$out[1]</var> 是包含闭合标签内的字符串的数组。            </p>           </div>                    <p class="para">           如果正则表达式包含了带名称的子组，<var class="varname">\$matches</var> 额外包含了带名称子组的键。          </p>          <p class="para">           如果正则表达式里，子组名称重名了，则仅最右侧的子组储存在 <var class="varname">\$matches[NAME]</var> 中。           </p><div class="informalexample">            <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>preg_match_all</span><span style="color: #007700">(<br>    </span><span style="color: #DD0000">'/(?J)(?&lt;match&gt;foo)|(?&lt;match&gt;bar)/'</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">'foo bar'</span><span style="color: #007700">,<br>    </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">,<br>    </span><span style="color: #9876AA">PREG_PATTERN_ORDER<br></span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">[</span><span style="color: #DD0000">'match'</span><span style="color: #007700">]);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>            </div>            <p class="para">以上示例会输出：</p>            <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive parameterscode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;bar<br>)</blockquote></div>            </div>           </div>                   </dd>                         <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-set-order">PREG_SET_ORDER</a></span></strong></dt>         <dd>          <p class="para">          结果排序为<var class="varname">\$matches[0]</var>包含第一次匹配得到的所有匹配(包含子组)，          <var class="varname">\$matches[1]</var>是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。           </p><div class="informalexample">            <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">"|&lt;[^&gt;]+&gt;(.*)&lt;/[^&gt;]+&gt;|U"</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"&lt;b&gt;example: &lt;/b&gt;&lt;div align=\"left\"&gt;this is a test&lt;/div&gt;"</span><span style="color: #007700">,<br>    </span><span style="color: #9876AA">\$out</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_SET_ORDER</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$out</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">", " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$out</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">\$out</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">", " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$out</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>            </div>            <p class="para">以上示例会输出：</p>            <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive parameterscode"><blockquote style="border:1px gray solid;"><b>example:&nbsp;</b>,&nbsp;example:<br><div>this&nbsp;is&nbsp;a&nbsp;test</div>,&nbsp;this&nbsp;is&nbsp;a&nbsp;test</blockquote></div>            </div>           </div>                   </dd>                         <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-offset-capture">PREG_OFFSET_CAPTURE</a></span></strong></dt>         <dd>          <p class="para">          如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的字节偏移量。          注意这会改变<span class="parameter" style="color:#3A95FF">matches</span>中的每一个匹配结果字符串元素，使其          成为一个第<span class="literal">0</span>个元素为匹配结果字符串，第<span class="literal">1</span>个元素为          匹配结果字符串在<span class="parameter" style="color:#3A95FF">subject</span>中的偏移量。                      </p><div class="informalexample">            <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(foo)(bar)(baz)/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foobarbaz'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_OFFSET_CAPTURE</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>            </div>            <p class="para">以上示例会输出：</p>            <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive parameterscode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;foobarbaz<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;foo<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;bar<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[3]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;baz<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;6<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>)</blockquote></div>            </div>           </div>                   </dd>                         <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-unmatched-as-null">PREG_UNMATCHED_AS_NULL</a></span></strong></dt>         <dd>          <p class="para">           传入此标记，未匹配的子组报告为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>；否则会是空 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>。          </p>         </dd>                 </dl>            <p class="para">      如果没有给定排序标记，假定设置为<strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-pattern-order">PREG_PATTERN_ORDER</a></span></strong>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">offset</span></dt>     <dd>      <p class="para">      通常， 查找时从目标字符串的开始位置开始。可选参数<span class="parameter" style="color:#3A95FF">offset</span>用于      从目标字符串中指定位置开始搜索(单位是字节)。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        </p><p class="para">       使用 <span class="parameter" style="color:#3A95FF">offset</span> 参数不同于传递 <span class="code">substr(\$subject, \$offset)</span> 的       结果到 <span class="function"><strong>preg_match_all()</strong></span> 作为目标字符串，因为 <span class="parameter" style="color:#3A95FF">pattern</span>        可以包含断言比如<em>^</em>， <em>\$</em> 或者 <em>(?&lt;=x) </em>。       示例查看 <span class="function">{@link preg_match()}</span>。       </p>      </blockquote>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-match-all-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  返回完整匹配次数（可能是 0）， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-function.preg-match-all-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果传递的正则表达式无法正常解析，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。 </p> </div> <div class="refsect1 changelog" id="refsect1-function.preg-match-all-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        现在 <span class="parameter" style="color:#3A95FF">\$flags</span> 参数可以支持 <strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-unmatched-as-null">PREG_UNMATCHED_AS_NULL</a></span></strong>。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.preg-match-all-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5006">    <p><strong>示例 #1 查找所有文本中的电话号码。</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">"/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x"</span><span style="color: #007700">,<br>                </span><span style="color: #DD0000">"Call 555-1212 or 1-800-555-1212"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$phones</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5007">    <p><strong>示例 #2 查找匹配的HTML标签（贪婪）</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">//\\2是一个后向引用的示例. 这会告诉pcre它必须匹配正则表达式中第二个圆括号(这里是([\w]+))<br>//匹配到的结果. 这里使用两个反斜线是因为这里使用了双引号.<br></span><span style="color: #9876AA">\$html </span><span style="color: #007700">= </span><span style="color: #DD0000">"&lt;b&gt;bold text&lt;/b&gt;&lt;a href=howdy.html&gt;click me&lt;/a&gt;"</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">"/(&lt;([\w]+)[^&gt;]*&gt;)(.*?)(&lt;\/\\2&gt;)/"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$html</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_SET_ORDER</span><span style="color: #007700">);<br><br>foreach (</span><span style="color: #9876AA">\$matches </span><span style="color: #007700">as </span><span style="color: #9876AA">\$val</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"matched: " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$val</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>    echo </span><span style="color: #DD0000">"part 1: " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$val</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>    echo </span><span style="color: #DD0000">"part 2: " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$val</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>    echo </span><span style="color: #DD0000">"part 3: " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$val</span><span style="color: #007700">[</span><span style="color: #9876AA">3</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>    echo </span><span style="color: #DD0000">"part 4: " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$val</span><span style="color: #007700">[</span><span style="color: #9876AA">4</span><span style="color: #007700">] . </span><span style="color: #DD0000">"\n\n"</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">matched:&nbsp;<b>bold&nbsp;text</b><br>part&nbsp;1:&nbsp;<b><br>part&nbsp;2:&nbsp;b<br>part&nbsp;3:&nbsp;bold&nbsp;text<br>part&nbsp;4:&nbsp;</b><br><br>matched:&nbsp;<a>click&nbsp;me</a><br>part&nbsp;1:&nbsp;<a><br>part&nbsp;2:&nbsp;a<br>part&nbsp;3:&nbsp;click&nbsp;me<br>part&nbsp;4:&nbsp;</a></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5008">    <p><strong>示例 #3 使用子命名组</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>\$str </span><span style="color: #007700">= &lt;&lt;&lt;FOO<br></span><span style="color: #DD0000">a: 1<br>b: 2<br>c: 3<br></span><span style="color: #007700">FOO;<br><br></span><span style="color: #9876AA">preg_match_all</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(?P&lt;name&gt;\w+): (?P&lt;digit&gt;\d+)/'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$str</span><span style="color: #007700">, </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// 选择方式 <br>// preg_match_all('/(?&lt;name&gt;\w+): (?&lt;digit&gt;\d+)/', \$str, \$matches);<br><br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;a:&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;b:&nbsp;2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;c:&nbsp;3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[name]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;a<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;b<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;c<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;a<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;b<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;c<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[digit]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.preg-match-all-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 匹配</a></li>    <li><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    <li><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    <li><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>   </ul>   </div></div>
 * 
 * Perform a global regular expression match
 * @link https://php.net/manual/zh/function.preg-match-all.php
 * @param string $pattern <p>
 * The pattern to search for, as a string.
 * </p>
 * @param string $subject <p>
 * The input string.
 * </p>
 * @param string[][] &$matches [optional] <p>
 * Array of all matches in multi-dimensional array ordered according to flags.
 * </p>
 * @param int $flags <p>
 * Can be a combination of the following flags (note that it doesn't make
 * sense to use <b>PREG_PATTERN_ORDER</b> together with
 * <b>PREG_SET_ORDER</b>):
 * <b>PREG_PATTERN_ORDER</b>
 * <br>
 * Orders results so that $matches[0] is an array of full
 * pattern matches, $matches[1] is an array of strings matched by
 * the first parenthesized subpattern, and so on.
 * </p>
 * @param int $offset [optional] <p>
 * Normally, the search starts from the beginning of the subject string.
 * The optional parameter <i>offset</i> can be used to
 * specify the alternate place from which to start the search (in bytes).
 * </p>
 * <p>
 * Using <i>offset</i> is not equivalent to passing
 * substr($subject, $offset) to
 * <b>preg_match_all</b> in place of the subject string,
 * because <i>pattern</i> can contain assertions such as
 * ^, $ or
 * (?&lt;=x). See <b>preg_match</b>
 * for examples.
 * </p>
 * <p>
 * <code>
 * preg_match_all("|]+>(.*)]+>|U",
 * "example: this is a test",
 * $out, PREG_PATTERN_ORDER);
 * echo $out[0][0] . ", " . $out[0][1] . "\n";
 * echo $out[1][0] . ", " . $out[1][1] . "\n";
 * </code>
 * The above example will output:</p>
 * <pre>
 * example: , this is a test
 * example: , this is a test
 * </pre>
 * <p>
 * So, $out[0] contains array of strings that matched full pattern,
 * and $out[1] contains array of strings enclosed by tags.
 * </p>
 * @return int|false|null the number of full pattern matches (which might be zero),
 * or <b>FALSE</b> if an error occurred.
 */
#[LanguageLevelTypeAware(['8.0' => 'int|false'], default: 'int|false|null')]
function preg_match_all(string $pattern, string $subject, &$matches, int $flags = 0, int $offset = 0) {}

/**
 * <div id="function.preg-replace" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_replace</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_replace</span> — <span class="dc-title">执行一个正则表达式的搜索和替换</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-replace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_replace</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$replacement</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$limit</span><span class="initializer"> = -1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$count</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span></span></div>  <p class="para rdfs-comment">    搜索 <span class="parameter" style="color:#3A95FF">subject</span> 中匹配 <span class="parameter" style="color:#3A95FF">pattern</span> 的部分，以    <span class="parameter" style="color:#3A95FF">replacement</span> 进行替换。  </p>  <p class="para">   匹配一个精确的字符串，而不是一个模式，   可以使用 <span class="function">{@link str_replace()}</span> 或   <span class="function">{@link str_ireplace()}</span> 代替这个函数。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-replace-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">pattern</span></dt>     <dd>      <p class="para">      要搜索的模式。可以是一个字符串或字符串数组。      </p>      <p class="para">       可以使用一些 <a href="https://php.net/manual/zh/reference.pcre.pattern.modifiers.php" class="link">PCRE 修饰符</a>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replacement</span></dt>     <dd>      <p class="para">        用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且 <span class="parameter" style="color:#3A95FF">pattern</span>        是一个数组，那么所有的模式都使用这个字符串进行替换。如果 <span class="parameter" style="color:#3A95FF">pattern</span> 和 <span class="parameter" style="color:#3A95FF">replacement</span>        都是数组，每个 <span class="parameter" style="color:#3A95FF">pattern</span> 使用 <span class="parameter" style="color:#3A95FF">replacement</span> 中对应的元素进行替换。如果        <span class="parameter" style="color:#3A95FF">replacement</span> 中的元素比 <span class="parameter" style="color:#3A95FF">pattern</span> 中的少，多出来的        <span class="parameter" style="color:#3A95FF">pattern</span> 使用空字符串进行替换。      </p>      <p class="para">        <span class="parameter" style="color:#3A95FF">replacement</span> 中可以包含后向引用 <span class="literal">\\<span class="replaceable">n</span></span>        或 <span class="literal">\$<span class="replaceable">n</span></span>，语法上首选后者。 每个这样的引用将被匹配到的第        <span class="replaceable">n</span> 个捕获子组捕获到的文本替换。 <span class="replaceable">n</span> 可以是0-99，<span class="literal">\\0</span> 和 <span class="literal">\$0</span>        代表完整的模式匹配文本。捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在        <span class="parameter" style="color:#3A95FF">replacement</span> 中使用反斜线，必须使用 4 个(<span class="literal">"\\\\"</span>，译注：因为这首先是 PHP        的字符串，经过转义后，是两个，再经过正则表达式引擎后才被认为是一个原文反斜线)。      </p>      <p class="para">        当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字 (比如：在一个匹配模式后紧接着增加一个原文数字)，不能使用        <span class="literal">\\1</span> 这样的语法来描述后向引用。比如，<span class="literal">\\11</span>将会使<span class="function"><strong>preg_replace()</strong></span>        不能理解你希望的是一个 <span class="literal">\\1</span> 后向引用紧跟一个原文 <span class="literal">1</span>，还是一个        <span class="literal">\\11</span> 后向引用后面不跟任何东西。 这种情况下解决方案是使用 <span class="literal">\${1}1</span>。这创建了一个独立的        <span class="literal">\$1</span> 后向引用, 一个独立的原文 <span class="literal">1</span>。      </p>      <p class="para">        当使用被弃用的 <span class="literal">e</span> 修饰符时, 这个函数会转义一些字符 (即：<span class="literal">'</span>、<span class="literal">"</span>、        <span class="literal">\</span> 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或双引号引起的语法错误 (比如：        <span class="literal">'strlen(\'\$1\')+strlen("\$2")'</span>)。确保符合 PHP 的        <a href="https://php.net/manual/zh/language.types.string.php" class="link">字符串语法</a>，并且符合 eval 语法。因为在完成替换后，引擎会将结果字符串作为 PHP 代码使用        eval 方式进行评估并将返回值作为最终参与替换的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">subject</span></dt>     <dd>      <p class="para">        要进行搜索和替换的字符串或字符串数组。      </p>      <p class="para">        如果 <span class="parameter" style="color:#3A95FF">subject</span> 是一个数组，搜索和替换回在        <span class="parameter" style="color:#3A95FF">subject</span> 的每一个元素上进行, 并且返回值也会是一个数组。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">subject</span> 是关联数组，则键会保留在返回值中。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>     <dd>      <p class="para">        每个模式在每个 <span class="parameter" style="color:#3A95FF">subject</span> 上进行替换的最大次数。默认是        <span class="literal">-1</span>(无限)。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">count</span></dt>     <dd>      <p class="para">        如果指定，将会被填充为完成的替换次数。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-replace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    如果 <span class="parameter" style="color:#3A95FF">subject</span> 是一个数组，<span class="function"><strong>preg_replace()</strong></span>    返回一个数组，其他情况下返回一个字符串。  </p>  <p class="para">  如果匹配被查找到，替换后的 <span class="parameter" style="color:#3A95FF">subject</span> 被返回，其他情况下返回没有改变的  <span class="parameter" style="color:#3A95FF">subject</span>。如果发生错误，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> 。  </p> </div>  <div class="refsect1 errors" id="refsect1-function.preg-replace-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   "\e" 会并忽略，并产生   <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> 错误。  </p>  <p class="para">如果传递的正则表达式无法正常解析，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。 </p> </div> <div class="refsect1 examples" id="refsect1-function.preg-replace-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5011">    <p><strong>示例 #1 使用后向引用紧跟数值原文</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'April 15, 2003'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$pattern </span><span style="color: #007700">= </span><span style="color: #DD0000">'/(\w+) (\d+), (\d+)/i'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$replacement </span><span style="color: #007700">= </span><span style="color: #DD0000">'\${1}1,\$3'</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pattern</span><span style="color: #007700">, </span><span style="color: #9876AA">\$replacement</span><span style="color: #007700">, </span><span style="color: #9876AA">\$string</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">April1,2003</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5012">    <p><strong>示例 #2 <span class="function"><strong>preg_replace()</strong></span> 中使用基于索引的数组</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'The quick brown fox jumps over the lazy dog.'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$patterns </span><span style="color: #007700">= array();<br></span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] = </span><span style="color: #DD0000">'/quick/'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = </span><span style="color: #DD0000">'/brown/'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] = </span><span style="color: #DD0000">'/fox/'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$replacements </span><span style="color: #007700">= array();<br></span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] = </span><span style="color: #DD0000">'bear'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = </span><span style="color: #DD0000">'black'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] = </span><span style="color: #DD0000">'slow'</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">, </span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">, </span><span style="color: #9876AA">\$string</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">The&nbsp;bear&nbsp;black&nbsp;slow&nbsp;jumps&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.</blockquote></div>    </div>    <div class="example-contents"><p>    对模式和替换内容按 key 进行排序我们可以得到期望的结果。    </p></div>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'The quick brown fox jumps over the lazy dog.'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$patterns </span><span style="color: #007700">= array();<br></span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] = </span><span style="color: #DD0000">'/quick/'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = </span><span style="color: #DD0000">'/brown/'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] = </span><span style="color: #DD0000">'/fox/'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$replacements </span><span style="color: #007700">= array();<br></span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">] = </span><span style="color: #DD0000">'bear'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">] = </span><span style="color: #DD0000">'black'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">] = </span><span style="color: #DD0000">'slow'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">ksort</span><span style="color: #007700">(</span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">);<br></span><span style="color: #9876AA">ksort</span><span style="color: #007700">(</span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">, </span><span style="color: #9876AA">\$replacements</span><span style="color: #007700">, </span><span style="color: #9876AA">\$string</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">The&nbsp;slow&nbsp;black&nbsp;bear&nbsp;jumps&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog.</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5013">    <p><strong>示例 #3 替换一些值</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$patterns </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/'</span><span style="color: #007700">,<br>                   </span><span style="color: #DD0000">'/^\s*{(\w+)}\s*=/'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$replace </span><span style="color: #007700">= array (</span><span style="color: #DD0000">'\3/\4/\1\2'</span><span style="color: #007700">, </span><span style="color: #DD0000">'\$\1 ='</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">\$patterns</span><span style="color: #007700">, </span><span style="color: #9876AA">\$replace</span><span style="color: #007700">, </span><span style="color: #DD0000">'{startDate} = 1999-5-27'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">\$startDate&nbsp;=&nbsp;5/27/1999</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5014">    <p><strong>示例 #4 剥离空白字符</strong></p>    <div class="example-contents"><p>     这个例子剥离多余的空白字符    </p></div>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'foo   o'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$str </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'/\s\s+/'</span><span style="color: #007700">, </span><span style="color: #DD0000">' '</span><span style="color: #007700">, </span><span style="color: #9876AA">\$str</span><span style="color: #007700">);<br></span><span style="color: #FF8000">// 将会改变为'foo o'<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">\$str</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5015">    <p><strong>示例 #5 使用参数 <span class="parameter" style="color:#3A95FF">count</span></strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$count </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br><br>echo </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'/\d/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/\s/'</span><span style="color: #007700">), </span><span style="color: #DD0000">'*'</span><span style="color: #007700">, </span><span style="color: #DD0000">'xp 4 to'</span><span style="color: #007700">, -</span><span style="color: #9876AA">1 </span><span style="color: #007700">, </span><span style="color: #9876AA">\$count</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$count</span><span style="color: #007700">; </span><span style="color: #FF8000">//3<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">xp***to<br>3</blockquote></div>         </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.preg-replace-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">   当使用数组形式的<span class="parameter" style="color:#3A95FF">pattern</span>和<span class="parameter" style="color:#3A95FF">replacement</span>时,    将会按照key在数组中出现的顺序进行处理. 这<em>不一定</em>和数组的索引顺序一致.   如果你期望使用索引对等方式用<span class="parameter" style="color:#3A95FF">replacement</span>对<span class="parameter" style="color:#3A95FF">pattern</span>   进行替换, 你可以在调用<span class="function"><strong>preg_replace()</strong></span>之前对两个数组各进行一次<span class="function">{@link ksort()}</span>排序.   </p>  </blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    当 <span class="parameter" style="color:#3A95FF">pattern</span> 和 <span class="parameter" style="color:#3A95FF">replacement</span>    都是数组时，匹配规则将按顺序执行。也就是说第二个 <span class="parameter" style="color:#3A95FF">pattern</span>/<span class="parameter" style="color:#3A95FF">replacement</span>    将作用于第一个 <span class="parameter" style="color:#3A95FF">pattern</span>/<span class="parameter" style="color:#3A95FF">replacement</span>    生成的字符串，而不是原始字符串。    If you want to simulate replacements operating in parallel,    such as swapping two values, replace one pattern by an intermediary placeholder, then in a    later pair replace that intermediary placeholder with the desired replacement.   </p>   <div class="informalexample">    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$p </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'/a/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/b/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/c/'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$r </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'c'</span><span style="color: #007700">, </span><span style="color: #DD0000">'d'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">\$p</span><span style="color: #007700">, </span><span style="color: #9876AA">\$r</span><span style="color: #007700">, </span><span style="color: #DD0000">'a'</span><span style="color: #007700">));<br></span><span style="color: #FF8000">// 打印 d<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.preg-replace-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>    <li><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    <li><span class="function">{@link preg_filter()} - 执行一个正则表达式搜索和替换</span></li>    <li><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li><span class="function">{@link preg_replace_callback()} - 执行一个正则表达式搜索并且使用一个回调进行替换</span></li>    <li><span class="function">{@link preg_split()} - 通过一个正则表达式分隔字符串</span></li>    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    <li><span class="function">{@link str_replace()} - 子字符串替换</span></li>   </ul>   </div></div>
 * 
 * Perform a regular expression search and replace
 * @link https://php.net/manual/zh/function.preg-replace.php
 * @param string|string[] $pattern <p>
 * The pattern to search for. It can be either a string or an array with
 * strings.
 * </p>
 * <p>
 * Several PCRE modifiers
 * are also available, including the deprecated 'e'
 * (PREG_REPLACE_EVAL), which is specific to this function.
 * </p>
 * @param string|string[] $replacement <p>
 * The string or an array with strings to replace. If this parameter is a
 * string and the <i>pattern</i> parameter is an array,
 * all patterns will be replaced by that string. If both
 * <i>pattern</i> and <i>replacement</i>
 * parameters are arrays, each <i>pattern</i> will be
 * replaced by the <i>replacement</i> counterpart. If
 * there are fewer elements in the <i>replacement</i>
 * array than in the <i>pattern</i> array, any extra
 * <i>pattern</i>s will be replaced by an empty string.
 * </p>
 * <p>
 * <i>replacement</i> may contain references of the form
 * \\n or (since PHP 4.0.4)
 * $n, with the latter form
 * being the preferred one. Every such reference will be replaced by the text
 * captured by the n'th parenthesized pattern.
 * n can be from 0 to 99, and
 * \\0 or $0 refers to the text matched
 * by the whole pattern. Opening parentheses are counted from left to right
 * (starting from 1) to obtain the number of the capturing subpattern.
 * To use backslash in replacement, it must be doubled
 * ("\\\\" PHP string).
 * </p>
 * <p>
 * When working with a replacement pattern where a backreference is
 * immediately followed by another number (i.e.: placing a literal number
 * immediately after a matched pattern), you cannot use the familiar
 * \\1 notation for your backreference.
 * \\11, for example, would confuse
 * <b>preg_replace</b> since it does not know whether you
 * want the \\1 backreference followed by a literal
 * 1, or the \\11 backreference
 * followed by nothing. In this case the solution is to use
 * \${1}1. This creates an isolated
 * $1 backreference, leaving the 1
 * as a literal.
 * </p>
 * <p>
 * When using the deprecated e modifier, this function escapes
 * some characters (namely ', ",
 * \ and NULL) in the strings that replace the
 * backreferences. This is done to ensure that no syntax errors arise
 * from backreference usage with either single or double quotes (e.g.
 * 'strlen(\'$1\')+strlen("$2")'). Make sure you are
 * aware of PHP's string
 * syntax to know exactly how the interpreted string will look.
 * </p>
 * @param string|string[] $subject <p>
 * The string or an array with strings to search and replace.
 * </p>
 * <p>
 * If <i>subject</i> is an array, then the search and
 * replace is performed on every entry of <i>subject</i>,
 * and the return value is an array as well.
 * </p>
 * @param int $limit [optional] <p>
 * The maximum possible replacements for each pattern in each
 * <i>subject</i> string. Defaults to
 * -1 (no limit).
 * </p>
 * @param int &$count [optional] <p>
 * If specified, this variable will be filled with the number of
 * replacements done.
 * </p>
 * @return string|string[]|null <b>preg_replace</b> returns an array if the
 * <i>subject</i> parameter is an array, or a string
 * otherwise.
 * </p>
 * <p>
 * If matches are found, the new <i>subject</i> will
 * be returned, otherwise <i>subject</i> will be
 * returned unchanged or <b>NULL</b> if an error occurred.
 */
function preg_replace(array|string $pattern, array|string $replacement, array|string $subject, int $limit = -1, &$count): array|string|null {}

/**
 * <div id="function.preg-replace-callback" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_replace_callback</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_replace_callback</span> — <span class="dc-title">执行一个正则表达式搜索并且使用一个回调进行替换</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-replace-callback-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_replace_callback</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$callback</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$limit</span><span class="initializer"> = -1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$count</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span></span></div>  <p class="para rdfs-comment">  这个函数的行为除了可以指定一个  <span class="parameter" style="color:#3A95FF">callback</span> 替代  <span class="parameter" style="color:#3A95FF">replacement</span>  进行替换字符串的计算，其他方面等同于  <span class="function">{@link preg_replace()}</span>。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-replace-callback-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">pattern</span></dt>     <dd>      <p class="para">      要搜索的模式，可以是字符串或一个字符串数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">callback</span></dt>     <dd>      <p class="para">      一个回调函数，在每次需要替换时调用，调用时函数得到的参数是从 <span class="parameter" style="color:#3A95FF">subject</span>      中匹配到的结果。回调函数返回真正参与替换的字符串。这是该回调函数的签名：      </p>      <p class="para">       </p><div class="methodsynopsis dc-description">        <span class="methodname" style="color:#CC7832"><span class="replaceable">handler</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$matches</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>            <p class="para">        经常会需要 <span class="parameter" style="color:#3A95FF">callback</span> 函数而仅用于        <span class="function"><strong>preg_replace_callback()</strong></span> 一个地方的调用。在这种情况下，你可以使用        <a href="https://php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a> 来定义一个匿名函数作为        <span class="function"><strong>preg_replace_callback()</strong></span>        调用时的回调。 这样做你可以保留所有调用信息在同一个位置并且不会因为一个不在任何其他地方使用的回调函数名称而污染函数名称空间。      </p>      <p class="para">       </p><div class="example" id="example-5016">        <p><strong>示例 #1 <span class="function"><strong>preg_replace_callback()</strong></span> 和        匿名函数</strong></p>        <div class="example-contents"><div class="annotation-non-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 一个unix样式的命令行过滤器，用于将段落开始部分的大写字母转换为小写。 <br></span><span style="color: #9876AA">\$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"php://stdin"</span><span style="color: #007700">, </span><span style="color: #DD0000">"r"</span><span style="color: #007700">) or die(</span><span style="color: #DD0000">"can't read stdin"</span><span style="color: #007700">);<br>while (!</span><span style="color: #9876AA">feof</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fp</span><span style="color: #007700">)) {<br>    </span><span style="color: #9876AA">\$line </span><span style="color: #007700">= </span><span style="color: #9876AA">fgets</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fp</span><span style="color: #007700">);<br>    </span><span style="color: #9876AA">\$line </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_replace_callback</span><span style="color: #007700">(<br>        </span><span style="color: #DD0000">'|&lt;p&gt;\s*\w|'</span><span style="color: #007700">,<br>        function (</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">) {<br>            return </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]);<br>        },<br>        </span><span style="color: #9876AA">\$line<br>    </span><span style="color: #007700">);<br>    echo </span><span style="color: #9876AA">\$line</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fp</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>        </div>       </div>           </dd>             <dt><span class="parameter" style="color:#3A95FF">subject</span></dt>     <dd>      <p class="para">       要搜索替换的目标字符串或字符串数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>     <dd>      <p class="para">      对于每个模式用于每个 <span class="parameter" style="color:#3A95FF">subject</span> 字符串的最大可替换次数。      默认是 <span class="literal">-1</span>（无限制）。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">count</span></dt>     <dd>      <p class="para">       如果指定，这个变量将被填充为替换执行的次数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">flags</span> 可以是 <strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-offset-capture">PREG_OFFSET_CAPTURE</a></span></strong>       和 <strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-unmatched-as-null">PREG_UNMATCHED_AS_NULL</a></span></strong> 标志的组合， 这会影响匹配到的结果的格式。       相关详情请参阅 <span class="function">{@link preg_match()}</span> 中的描述。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-replace-callback-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    如果 <span class="parameter" style="color:#3A95FF">subject</span> 是一个数组，    <span class="function"><strong>preg_replace_callback()</strong></span> 返回一个数组，其他情况返回字符串。错误发生时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p>  <p class="para">  如果查找到了匹配，返回替换后的目标字符串（或字符串数组），其他情况  <span class="parameter" style="color:#3A95FF">subject</span> 将会无变化返回。  </p> </div> <div class="refsect1 errors" id="refsect1-function.preg-replace-callback-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果传递的正则表达式无法正常解析，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。 </p> </div> <div class="refsect1 changelog" id="refsect1-function.preg-replace-callback-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.4.0</td>       <td>        新增 <span class="parameter" style="color:#3A95FF">flags</span> 参数。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.preg-replace-callback-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5017">    <p><strong>示例 #2 <span class="function"><strong>preg_replace_callback()</strong></span>示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 将文本中的年份增加一年.<br></span><span style="color: #9876AA">\$text </span><span style="color: #007700">= </span><span style="color: #DD0000">"April fools day is 04/01/2002\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$text</span><span style="color: #007700">.= </span><span style="color: #DD0000">"Last christmas was 12/24/2001\n"</span><span style="color: #007700">;<br></span><span style="color: #FF8000">// 回调函数<br></span><span style="color: #007700">function </span><span style="color: #9876AA">next_year</span><span style="color: #007700">(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">)<br>{<br>  </span><span style="color: #FF8000">// 通常: \$matches[0]是完成的匹配<br>  // \$matches[1]是第一个捕获子组的匹配<br>  // 以此类推<br>  </span><span style="color: #007700">return </span><span style="color: #9876AA">\$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">].(</span><span style="color: #9876AA">\$matches</span><span style="color: #007700">[</span><span style="color: #9876AA">2</span><span style="color: #007700">]+</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br>}<br>echo </span><span style="color: #9876AA">preg_replace_callback</span><span style="color: #007700">(<br>            </span><span style="color: #DD0000">"|(\d{2}/\d{2}/)(\d{4})|"</span><span style="color: #007700">,<br>            </span><span style="color: #DD0000">"next_year"</span><span style="color: #007700">,<br>            </span><span style="color: #9876AA">\$text</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">April&nbsp;fools&nbsp;day&nbsp;is&nbsp;04/01/2003<br>Last&nbsp;christmas&nbsp;was&nbsp;12/24/2002</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5018">    <p><strong>示例 #3 <span class="function"><strong>preg_replace_callback()</strong></span> 使用递归构造处理 BB 码的封装</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$input </span><span style="color: #007700">= </span><span style="color: #DD0000">"plain [indent] deep [indent] deeper [/indent] deep [/indent] plain"</span><span style="color: #007700">;<br><br>function </span><span style="color: #9876AA">parseTagsRecursive</span><span style="color: #007700">(</span><span style="color: #9876AA">\$input</span><span style="color: #007700">)<br>{<br>     </span><span style="color: #FF8000">// 译注: 对此正则表达式分段分析<br>     * 首尾两个#是正则分隔符<br>     * \[indent] 匹配一个原文的[indent]<br>     * ((?:[^[]|\[(?!/?indent])|(?R))+)分析:<br>     *   (?:[^[]|\[(?!/?indent])分析:<br>     *  首先它是一个非捕获子组<br>     *   两个可选路径, 一个是非[字符, 另一个是[字符但后面紧跟着不是/indent或indent.<br>     *   (?R) 正则表达式递归<br>     *     \[/indent] 匹配结束的[/indent]<br>     * /<br><br>    \$regex = '#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';<br><br>    if (is_array(\$input)) {<br>        \$input = '&lt;div style="margin-left: 10px"&gt;'.\$input[1].'&lt;/div&gt;';<br>    }<br><br>    return preg_replace_callback(\$regex, 'parseTagsRecursive', \$input);<br>}<br><br>\$output = parseTagsRecursive(\$input);<br><br>echo \$output;<br>?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.preg-replace-callback-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>    <li><span class="function">{@link preg_replace_callback_array()} - Perform a regular expression search and replace using callbacks</span></li>    <li><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    <li><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    <li><a href="https://php.net/manual/zh/functions.anonymous.php" class="link">匿名函数</a></li>   </ul>   </div></div>
 * 
 * Perform a regular expression search and replace using a callback
 * @link https://php.net/manual/zh/function.preg-replace-callback.php
 * @param string|string[] $pattern <p>
 * The pattern to search for. It can be either a string or an array with
 * strings.
 * </p>
 * @param callable $callback <p>
 * A callback that will be called and passed an array of matched elements
 * in the <i>subject</i> string. The callback should
 * return the replacement string. This is the callback signature:
 * </p>
 * <p>
 * string<b>handler</b>
 * <b>array<i>matches</i></b>
 * </p>
 * <p>
 * You'll often need the <i>callback</i> function
 * for a <b>preg_replace_callback</b> in just one place.
 * In this case you can use an
 * anonymous function to
 * declare the callback within the call to
 * <b>preg_replace_callback</b>. By doing it this way
 * you have all information for the call in one place and do not
 * clutter the function namespace with a callback function's name
 * not used anywhere else.
 * </p>
 * <p>
 * <b>preg_replace_callback</b> and
 * anonymous function
 * <code>
 * /* a unix-style command line filter to convert uppercase
 * * letters at the beginning of paragraphs to lowercase * /
 * $fp = fopen("php://stdin", "r") or die("can't read stdin");
 * while (!feof($fp)) {
 * $line = fgets($fp);
 * $line = preg_replace_callback(
 * '|<p>\s*\w|',
 * function ($matches) {
 * return strtolower($matches[0]);
 * },
 * $line
 * );
 * echo $line;
 * }
 * fclose($fp);
 * </code>
 * </p>
 * @param string|string[] $subject <p>
 * The string or an array with strings to search and replace.
 * </p>
 * @param int $limit [optional] <p>
 * The maximum possible replacements for each pattern in each
 * <i>subject</i> string. Defaults to
 * -1 (no limit).
 * </p>
 * @param int &$count [optional] <p>
 * If specified, this variable will be filled with the number of
 * replacements done.
 * </p>
 * @param int $flags [optional]
 * @return string|string[]|null <b>preg_replace_callback</b> returns an array if the
 * <i>subject</i> parameter is an array, or a string
 * otherwise. On errors the return value is <b>NULL</b>
 * </p>
 * <p>
 * If matches are found, the new subject will be returned, otherwise
 * <i>subject</i> will be returned unchanged.
 */
function preg_replace_callback(
    array|string $pattern,
    callable $callback,
    array|string $subject,
    int $limit = -1,
    &$count,
    #[PhpStormStubsElementAvailable(from: '7.4')] int $flags = 0
): array|string|null {}

/**
 * <div id="function.preg-replace-callback-array" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_replace_callback_array</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_replace_callback_array</span> — <span class="dc-title">Perform a regular expression search and replace using callbacks</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-replace-callback-array-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_replace_callback_array</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$limit</span><span class="initializer"> = -1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$count</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span></span></div>  <p class="para rdfs-comment">   The behavior of this function is similar to   <span class="function">{@link preg_replace_callback()}</span>, except that callbacks are   executed on a per-pattern basis.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-replace-callback-array-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">pattern</span></dt>     <dd>      <p class="para">       An associative array mapping patterns (keys) to <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>s (values).      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">subject</span></dt>     <dd>      <p class="para">       The string or an array with strings to search and replace.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>     <dd>      <p class="para">       The maximum possible replacements for each pattern in each       <span class="parameter" style="color:#3A95FF">subject</span> string. Defaults to       <span class="literal">-1</span> (no limit).      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">count</span></dt>     <dd>      <p class="para">       If specified, this variable will be filled with the number of       replacements done.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">flags</span> can be a combination of the       <strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-offset-capture">PREG_OFFSET_CAPTURE</a></span></strong> and       <strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-unmatched-as-null">PREG_UNMATCHED_AS_NULL</a></span></strong> flags, which influence the       format of the matches array.       See the description in <span class="function">{@link preg_match()}</span> for more details.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-replace-callback-array-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong>preg_replace_callback_array()</strong></span> returns an array if the   <span class="parameter" style="color:#3A95FF">subject</span> parameter is an array, or a string   otherwise. On errors the return value is <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>  </p>  <p class="para">   If matches are found, the new subject will be returned, otherwise   <span class="parameter" style="color:#3A95FF">subject</span> will be returned unchanged.   </p> </div> <div class="refsect1 errors" id="refsect1-function.preg-replace-callback-array-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果传递的正则表达式无法正常解析，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。 </p> </div> <div class="refsect1 changelog" id="refsect1-function.preg-replace-callback-array-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.4.0</td>       <td>        The <span class="parameter" style="color:#3A95FF">flags</span> parameter was added.       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.preg-replace-callback-array-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5019">    <p><strong>示例 #1 <span class="function"><strong>preg_replace_callback_array()</strong></span> example</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$subject </span><span style="color: #007700">= </span><span style="color: #DD0000">'Aaaaaa Bbb'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">preg_replace_callback_array</span><span style="color: #007700">(<br>    [<br>        </span><span style="color: #DD0000">'~[a]+~i' </span><span style="color: #007700">=&gt; function (</span><span style="color: #9876AA">\$match</span><span style="color: #007700">) {<br>            echo </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">\$match</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]), </span><span style="color: #DD0000">' matches for "a" found'</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br>        },<br>        </span><span style="color: #DD0000">'~[b]+~i' </span><span style="color: #007700">=&gt; function (</span><span style="color: #9876AA">\$match</span><span style="color: #007700">) {<br>            echo </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">\$match</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]), </span><span style="color: #DD0000">' matches for "b" found'</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br>        }<br>    ],<br>    </span><span style="color: #9876AA">\$subject<br></span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">6&nbsp;matches&nbsp;for&nbsp;"a"&nbsp;found<br>3&nbsp;matches&nbsp;for&nbsp;"b"&nbsp;found</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.preg-replace-callback-array-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE Patterns</a></li>    <li><span class="function">{@link preg_replace_callback()} - 执行一个正则表达式搜索并且使用一个回调进行替换</span></li>    <li><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    <li><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>    <li><a href="https://php.net/manual/zh/functions.anonymous.php" class="link">Anonymous functions</a></li>   </ul>   </div></div>
 * 
 * Perform a regular expression search and replace using callbacks
 * @link https://php.net/manual/zh/function.preg-replace-callback-array.php
 * @param callable[] $pattern An associative array mapping patterns (keys) to callbacks (values)
 * @param string|string[] $subject
 * @param int $limit [optional]
 * @param int &$count [optional]
 * @param int $flags [optional]
 * @return string|string[]|null  <p>preg_replace_callback_array() returns an array if the subject parameter is an array, or a string otherwise. On errors the return value is NULL</p>
 * <p>If matches are found, the new subject will be returned, otherwise subject will be returned unchanged.</p>
 */
function preg_replace_callback_array(
    array $pattern,
    array|string $subject,
    int $limit = -1,
    &$count,
    #[PhpStormStubsElementAvailable(from: '7.4')] int $flags = 0
): array|string|null {}

/**
 * <div id="function.preg-filter" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_filter</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_filter</span> — <span class="dc-title">执行一个正则表达式搜索和替换</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-filter-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_filter</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$replacement</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$limit</span><span class="initializer"> = -1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$count</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>preg_filter()</strong></span>等价于<span class="function">{@link preg_replace()}</span>   除了它仅仅返回(可能经过转化)与目标匹配的结果. 这个函数怎样工作的更详细信息请阅读   <span class="function">{@link preg_replace()}</span>文档.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-filter-parameters">  <h3 class="title">参数</h3>  <p class="para">   <span class="function">{@link preg_replace()}</span> 文档中描述了参数。  </p> </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-filter-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  如果<span class="parameter" style="color:#3A95FF">subject</span>是一个<span class="type" style="color:#EAB766">数组</span>，返回一个<span class="type" style="color:#EAB766">数组</span>，  其他情况返回一个<span class="type" style="color:#EAB766">字符串</span>。  </p>  <p class="para">  如果没有找到匹配或者发生了错误，当<span class="parameter" style="color:#3A95FF">subject</span>是<span class="type" style="color:#EAB766">数组</span>  时返回一个空<span class="type" style="color:#EAB766">数组</span>，其他情况返回<strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-function.preg-filter-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果传递的正则表达式无法正常解析，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。 </p> </div> <div class="refsect1 examples" id="refsect1-function.preg-filter-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-4998">    <p><strong>示例 #1      比较<span class="function"><strong>preg_filter()</strong></span>      和<span class="function">{@link preg_replace()}</span>的示例    </strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$subject </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'1'</span><span style="color: #007700">, </span><span style="color: #DD0000">'a'</span><span style="color: #007700">, </span><span style="color: #DD0000">'2'</span><span style="color: #007700">, </span><span style="color: #DD0000">'b'</span><span style="color: #007700">, </span><span style="color: #DD0000">'3'</span><span style="color: #007700">, </span><span style="color: #DD0000">'A'</span><span style="color: #007700">, </span><span style="color: #DD0000">'B'</span><span style="color: #007700">, </span><span style="color: #DD0000">'4'</span><span style="color: #007700">); <br></span><span style="color: #9876AA">\$pattern </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'/\d/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/[a-z]/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'/[1a]/'</span><span style="color: #007700">); <br></span><span style="color: #9876AA">\$replace </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'A:\$0'</span><span style="color: #007700">, </span><span style="color: #DD0000">'B:\$0'</span><span style="color: #007700">, </span><span style="color: #DD0000">'C:\$0'</span><span style="color: #007700">); <br><br>echo </span><span style="color: #DD0000">"preg_filter returns\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">preg_filter</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pattern</span><span style="color: #007700">, </span><span style="color: #9876AA">\$replace</span><span style="color: #007700">, </span><span style="color: #9876AA">\$subject</span><span style="color: #007700">)); <br><br>echo </span><span style="color: #DD0000">"preg_replace returns\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pattern</span><span style="color: #007700">, </span><span style="color: #9876AA">\$replace</span><span style="color: #007700">, </span><span style="color: #9876AA">\$subject</span><span style="color: #007700">)); <br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">preg_filter&nbsp;returns<br>Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;A:C:1<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;B:C:a<br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;A:2<br>&nbsp;&nbsp;&nbsp;&nbsp;[3]&nbsp;=&gt;&nbsp;B:b<br>&nbsp;&nbsp;&nbsp;&nbsp;[4]&nbsp;=&gt;&nbsp;A:3<br>&nbsp;&nbsp;&nbsp;&nbsp;[7]&nbsp;=&gt;&nbsp;A:4<br>)<br>preg_replace&nbsp;returns<br>Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;A:C:1<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;B:C:a<br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;A:2<br>&nbsp;&nbsp;&nbsp;&nbsp;[3]&nbsp;=&gt;&nbsp;B:b<br>&nbsp;&nbsp;&nbsp;&nbsp;[4]&nbsp;=&gt;&nbsp;A:3<br>&nbsp;&nbsp;&nbsp;&nbsp;[5]&nbsp;=&gt;&nbsp;A<br>&nbsp;&nbsp;&nbsp;&nbsp;[6]&nbsp;=&gt;&nbsp;B<br>&nbsp;&nbsp;&nbsp;&nbsp;[7]&nbsp;=&gt;&nbsp;A:4<br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.preg-filter-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>    <li><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    <li><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    <li><span class="function">{@link preg_replace_callback()} - 执行一个正则表达式搜索并且使用一个回调进行替换</span></li>    <li><span class="function">{@link preg_grep()} - 返回匹配模式的数组条目</span></li>    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>   </ul>   </div></div>
 * 
 * Perform a regular expression search and replace
 * @link https://php.net/manual/zh/function.preg-filter.php
 * @param string|string[] $pattern
 * @param string|string[] $replacement
 * @param string|string[] $subject
 * @param int $limit [optional]
 * @param int &$count [optional]
 * @return string|string[]|null an array if the <i>subject</i>
 * parameter is an array, or a string otherwise.
 * </p>
 * <p>
 * If no matches are found or an error occurred, an empty array
 * is returned when <i>subject</i> is an array
 * or <b>NULL</b> otherwise.
 */
function preg_filter(array|string $pattern, array|string $replacement, array|string $subject, int $limit = -1, &$count): array|string|null {}

/**
 * <div id="function.preg-split" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_split</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_split</span> — <span class="dc-title">通过一个正则表达式分隔字符串</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-split-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_split</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$pattern</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$subject</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$limit</span><span class="initializer"> = -1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">  通过一个正则表达式分隔给定字符串.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-split-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">pattern</span></dt>     <dd>      <p class="para">       用于搜索的模式，字符串形式。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">subject</span></dt>     <dd>      <p class="para">       输入字符串      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>     <dd>      <p class="para">      如果指定，将限制分隔得到的子串最多只有<span class="parameter" style="color:#3A95FF">limit</span>个，返回的最后一个      子串将包含所有剩余部分。<span class="parameter" style="color:#3A95FF">limit</span>值为-1， 0或null时都代表"不限制"。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">flags </span>可以是任何下面标记的组合(以位或运算 <span class="literal">|</span> 组合)：       </p><dl>                 <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-split-no-empty">PREG_SPLIT_NO_EMPTY</a></span></strong></dt>         <dd>          <span class="simpara">          如果这个标记被设置， <span class="function"><strong>preg_split()</strong></span> 将仅返回分隔后的非空部分。          </span>         </dd>                         <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-split-delim-capture">PREG_SPLIT_DELIM_CAPTURE</a></span></strong></dt>         <dd>          <span class="simpara">          如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。          </span>         </dd>                         <dt><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-split-offset-capture">PREG_SPLIT_OFFSET_CAPTURE</a></span></strong></dt>         <dd>          <p class="para">          如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量.           注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第<span class="literal">0</span>          个元素为分隔后的子串，第<span class="literal">1</span>个元素为该子串在<span class="parameter" style="color:#3A95FF">subject</span>          中的偏移量组成的数组。          </p>         </dd>               </dl>           </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-split-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  返回一个使用 <span class="parameter" style="color:#3A95FF">pattern</span> 边界分隔 <span class="parameter" style="color:#3A95FF">subject</span> 后得到  的子串组成的数组， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-function.preg-split-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果传递的正则表达式无法正常解析，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。 </p> </div> <div class="refsect1 examples" id="refsect1-function.preg-split-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5020">    <p><strong>示例 #1 <span class="function"><strong>preg_split()</strong></span>示例：获取搜索字符串的部分</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">//使用逗号或空格(包含" ", \r, \t, \n, \f)分隔短语<br></span><span style="color: #9876AA">\$keywords </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_split</span><span style="color: #007700">(</span><span style="color: #DD0000">"/[\s,]+/"</span><span style="color: #007700">, </span><span style="color: #DD0000">"hypertext language, programming"</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$keywords</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>     <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;hypertext<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;language<br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;programming<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5021">    <p><strong>示例 #2 将一个字符串分隔为组成它的字符</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'string'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$chars </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_split</span><span style="color: #007700">(</span><span style="color: #DD0000">'//'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$str</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_SPLIT_NO_EMPTY</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$chars</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;s<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;t<br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;r<br>&nbsp;&nbsp;&nbsp;&nbsp;[3]&nbsp;=&gt;&nbsp;i<br>&nbsp;&nbsp;&nbsp;&nbsp;[4]&nbsp;=&gt;&nbsp;n<br>&nbsp;&nbsp;&nbsp;&nbsp;[5]&nbsp;=&gt;&nbsp;g<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5022">    <p><strong>示例 #3 分隔一个字符串并获取每部分的偏移量</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$str </span><span style="color: #007700">= </span><span style="color: #DD0000">'hypertext language programming'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$chars </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_split</span><span style="color: #007700">(</span><span style="color: #DD0000">'/ /'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$str</span><span style="color: #007700">, -</span><span style="color: #9876AA">1</span><span style="color: #007700">, </span><span style="color: #9876AA">PREG_SPLIT_OFFSET_CAPTURE</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$chars</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;hypertext<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;language<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;10<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[2]&nbsp;=&gt;&nbsp;Array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;programming<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;19<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.preg-split-notes">  <h3 class="title">注释</h3>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">   如果你不需要正则表达式功能，可以有更快(并且更简单)的选择比如 <span class="function">{@link explode()}</span>    或 <span class="function">{@link str_split()}</span>。   </p>  </div>  <div class="tip"><strong class="tip">小技巧</strong>   <p class="para">    如果没有成功匹配，将会返回一个数组，包含了单个元素，即输入的字符串。   </p>  </div> </div> <div class="refsect1 seealso" id="refsect1-function.preg-split-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>    <li><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    <li><span class="function">{@link explode()} - 使用一个字符串分割另一个字符串</span></li>    <li><span class="function">{@link preg_match()} - 执行匹配正则表达式</span></li>    <li><span class="function">{@link preg_match_all()} - 执行一个全局正则表达式匹配</span></li>    <li><span class="function">{@link preg_replace()} - 执行一个正则表达式的搜索和替换</span></li>    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>   </ul>   </div></div>
 * 
 * Split string by a regular expression
 * @link https://php.net/manual/zh/function.preg-split.php
 * @param string $pattern <p>
 * The pattern to search for, as a string.
 * </p>
 * @param string $subject <p>
 * The input string.
 * </p>
 * @param int $limit [optional] <p>
 * If specified, then only substrings up to <i>limit</i>
 * are returned with the rest of the string being placed in the last
 * substring. A <i>limit</i> of -1, 0 or <b>NULL</b> means "no limit"
 * and, as is standard across PHP, you can use <b>NULL</b> to skip to the
 * <i>flags</i> parameter.
 * </p>
 * @param int $flags [optional] <p>
 * <i>flags</i> can be any combination of the following
 * flags (combined with the | bitwise operator):
 * <b>PREG_SPLIT_NO_EMPTY</b>
 * If this flag is set, only non-empty pieces will be returned by
 * <b>preg_split</b>.
 * </p>
 * @return string[]|false an array containing substrings of <i>subject</i>
 * split along boundaries matched by <i>pattern</i>, or <b>FALSE</b>
 * if an error occurred.
 */
#[Pure]
function preg_split(string $pattern, string $subject, int $limit = -1, int $flags = 0): array|false {}

/**
 * <div id="function.preg-quote" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_quote</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_quote</span> — <span class="dc-title">转义正则表达式字符</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-quote-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_quote</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$str</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$delimiter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">  <span class="function"><strong>preg_quote()</strong></span>需要参数 <span class="parameter" style="color:#3A95FF">str</span> 并向其中  每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串  需要作为正则表达式进行匹配的时候。  </p>  <p class="para">   正则表达式特殊字符有：   <span class="literal">. \ + * ? [ ^ ] \$ ( ) { } = ! &lt; &gt; | : - #</span>  </p>  <p class="para">   注意 <span class="literal">/</span> 不是正则表达式特殊字符。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    注意：<span class="function"><strong>preg_quote()</strong></span> 的应用场景不是用于 <span class="function">{@link preg_replace()}</span> 的 \$replacement  字符串参数。   </p>  </blockquote> </div> <div class="refsect1 parameters" id="refsect1-function.preg-quote-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">str</span></dt>     <dd>      <p class="para">       输入字符串      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">delimiter</span></dt>     <dd>      <p class="para">      如果指定了可选参数 <span class="parameter" style="color:#3A95FF">delimiter</span>，它也会被转义。这通常用于      转义PCRE函数使用的分隔符。 <span class="literal">/</span> 是最常见的分隔符。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-quote-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回转义后的字符串。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.preg-quote-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.3.0</td>       <td>        字符 <span class="literal">#</span> 被增加为需要转义的。       </td>      </tr>      <tr>       <td>7.2.0</td>       <td>        <span class="parameter" style="color:#3A95FF">delimiter</span> 现在可为 null。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.preg-quote-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5009">    <p><strong>示例 #1 <span class="function"><strong>preg_quote()</strong></span>示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$keywords </span><span style="color: #007700">= </span><span style="color: #DD0000">'\$40 for a g3/400'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$keywords </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_quote</span><span style="color: #007700">(</span><span style="color: #9876AA">\$keywords</span><span style="color: #007700">, </span><span style="color: #DD0000">'/'</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$keywords</span><span style="color: #007700">; </span><span style="color: #FF8000">// 返回 \\$40 for a g3\/400<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5010">    <p><strong>示例 #2 将文本中的单词替换为斜体</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">//在这个例子中，preg_quote(\$word) 用于保持星号原文涵义，使其不使用正则表达式中的特殊语义。<br><br></span><span style="color: #9876AA">\$textbody </span><span style="color: #007700">= </span><span style="color: #DD0000">"This book is *very* difficult to find."</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$word </span><span style="color: #007700">= </span><span style="color: #DD0000">"*very*"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$textbody </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_replace </span><span style="color: #007700">(</span><span style="color: #DD0000">"/" </span><span style="color: #007700">. </span><span style="color: #9876AA">preg_quote</span><span style="color: #007700">(</span><span style="color: #9876AA">\$word</span><span style="color: #007700">, </span><span style="color: #DD0000">'/'</span><span style="color: #007700">) . </span><span style="color: #DD0000">"/"</span><span style="color: #007700">,<br>                          </span><span style="color: #DD0000">"&lt;i&gt;" </span><span style="color: #007700">. </span><span style="color: #9876AA">\$word </span><span style="color: #007700">. </span><span style="color: #DD0000">"&lt;/i&gt;"</span><span style="color: #007700">,<br>                          </span><span style="color: #9876AA">\$textbody</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.preg-quote-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数可安全用于二进制对象。</span></p></blockquote> </div>  <div class="refsect1 seealso" id="refsect1-function.preg-quote-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>    <li><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>   </ul>   </div> </div>
 * 
 * Quote regular expression characters
 * @link https://php.net/manual/zh/function.preg-quote.php
 * @param string $str <p>
 * The input string.
 * </p>
 * @param string|null $delimiter [optional] <p>
 * If the optional <i>delimiter</i> is specified, it
 * will also be escaped. This is useful for escaping the delimiter
 * that is required by the PCRE functions. The / is the most commonly
 * used delimiter.
 * </p>
 * @return string the quoted (escaped) string.
 */
#[Pure]
function preg_quote(string $str, ?string $delimiter = null): string {}

/**
 * <div id="function.preg-grep" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_grep</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_grep</span> — <span class="dc-title">返回匹配模式的数组条目</span></p> </div>  <div class="refsect1 description" id="refsect1-function.preg-grep-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_grep</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$pattern</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$array</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">  返回给定数组<span class="parameter" style="color:#3A95FF">array</span>中与模式<span class="parameter" style="color:#3A95FF">pattern</span>  匹配的元素组成的数组。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-grep-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">pattern</span></dt>     <dd>      <p class="para">       要搜索的模式，字符串形式。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">array</span></dt>     <dd>      <p class="para">       输入数组。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">flags</span></dt>     <dd>      <p class="para">      如果设置为<strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-grep-invert">PREG_GREP_INVERT</a></span></strong>，这个函数返回输入数组中与      给定模式<span class="parameter" style="color:#3A95FF">pattern</span><em>不</em>匹配的元素组成的数组。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-grep-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  返回使用<span class="parameter" style="color:#3A95FF">array</span>中key做索引的数组。   或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div>  <div class="refsect1 errors" id="refsect1-function.preg-grep-errors">  <h3 class="title">错误／异常</h3>  <p class="para">如果传递的正则表达式无法正常解析，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。 </p> </div> <div class="refsect1 examples" id="refsect1-function.preg-grep-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-4999">    <p><strong>示例 #1 <span class="function"><strong>preg_grep()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$array </span><span style="color: #007700">= [ </span><span style="color: #DD0000">"4"</span><span style="color: #007700">, </span><span style="color: #9876AA">M_PI</span><span style="color: #007700">, </span><span style="color: #DD0000">"2.74"</span><span style="color: #007700">, </span><span style="color: #9876AA">42 </span><span style="color: #007700">];<br><br></span><span style="color: #FF8000">// 返回所有包含浮点数的元素<br></span><span style="color: #9876AA">\$fl_array </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_grep</span><span style="color: #007700">(</span><span style="color: #DD0000">"/^(\d+)?\.\d+\$/"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$array</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fl_array</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.preg-grep-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/pcre.pattern.php" class="link">PCRE 模式</a></li>    <li><span class="function">{@link preg_quote()} - 转义正则表达式字符</span></li>    <li><span class="function">{@link preg_match_all()} - 执行一个全局正则表达式匹配</span></li>    <li><span class="function">{@link preg_filter()} - 执行一个正则表达式搜索和替换</span></li>    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>   </ul>   </div></div>
 * 
 * Return array entries that match the pattern
 * @link https://php.net/manual/zh/function.preg-grep.php
 * @param string $pattern <p>
 * The pattern to search for, as a string.
 * </p>
 * @param array $array <p>
 * The input array.
 * </p>
 * @param int $flags [optional] <p>
 * If set to <b>PREG_GREP_INVERT</b>, this function returns
 * the elements of the input array that do not match
 * the given <i>pattern</i>.
 * </p>
 * @return array|false an array indexed using the keys from the
 * <i>input</i> array or false when pattern cannot be compiled.
 */
#[Pure]
function preg_grep(string $pattern, array $array, int $flags = 0): array|false {}

/**
 * <div id="function.preg-last-error" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_last_error</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">preg_last_error</span> — <span class="dc-title">返回最后一个PCRE正则执行产生的错误代码</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-last-error-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_last_error</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   返回最后一次PCRE正则执行的错误代码。  </p>  <p class="para">   </p><div class="example" id="example-5000">    <p><strong>示例 #1 <span class="function"><strong>preg_last_error()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(?:\D+|&lt;\d+&gt;)*[!?]/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foobar foobar foobar'</span><span style="color: #007700">);<br><br>if (</span><span style="color: #9876AA">preg_last_error</span><span style="color: #007700">() == </span><span style="color: #9876AA">PREG_BACKTRACK_LIMIT_ERROR</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">'Backtrack limit was exhausted!'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive descriptioncode"><blockquote style="border:1px gray solid;">Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!</blockquote></div>    </div>   </div>   </div> <div class="refsect1 parameters" id="refsect1-function.preg-last-error-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div>   <div class="refsect1 returnvalues" id="refsect1-function.preg-last-error-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回下面常量中的一个(<a href="https://php.net/manual/zh/pcre.constants.php" class="link">查看它们自身的解释</a>):   </p><ul class="simplelist">    <li><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-no-error">PREG_NO_ERROR</a></span></strong></li>    <li><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-internal-error">PREG_INTERNAL_ERROR</a></span></strong></li>    <li><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-backtrack-limit-error">PREG_BACKTRACK_LIMIT_ERROR</a></span></strong> （参见 <a href="https://php.net/manual/zh/pcre.configuration.php#ini.pcre.backtrack-limit" class="link">pcre.backtrack_limit</a>）</li>    <li><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-recursion-limit-error">PREG_RECURSION_LIMIT_ERROR</a></span></strong> （参见 <a href="https://php.net/manual/zh/pcre.configuration.php#ini.pcre.recursion-limit" class="link">pcre.recursion_limit</a>）</li>    <li><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-bad-utf8-error">PREG_BAD_UTF8_ERROR</a></span></strong></li>    <li><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-bad-utf8-offset-error">PREG_BAD_UTF8_OFFSET_ERROR</a></span></strong></li>    <li><strong><span><a href="https://php.net/manual/zh/pcre.constants.php#constant.preg-jit-stacklimit-error">PREG_JIT_STACKLIMIT_ERROR</a></span></strong></li>   </ul>   </div> <div class="refsect1 seealso" id="refsect1-function.preg-last-error-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link preg_last_error_msg()} - Returns the error message of the last PCRE regex execution</span></li>   </ul>   </div></div>
 * 
 * Returns the error code of the last PCRE regex execution
 * @link https://php.net/manual/zh/function.preg-last-error.php
 * @return int one of the following constants (explained on their own page):
 * <b>PREG_NO_ERROR</b>
 * <b>PREG_INTERNAL_ERROR</b>
 * <b>PREG_BACKTRACK_LIMIT_ERROR</b> (see also pcre.backtrack_limit)
 * <b>PREG_RECURSION_LIMIT_ERROR</b> (see also pcre.recursion_limit)
 * <b>PREG_BAD_UTF8_ERROR</b>
 * <b>PREG_BAD_UTF8_OFFSET_ERROR</b> (since PHP 5.3.0)
 */
#[Pure(true)]
function preg_last_error(): int {}

/**
 * <div id="function.preg-last-error-msg" class="refentry"> <div class="refnamediv">  <h1 class="refname">preg_last_error_msg</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">preg_last_error_msg</span> — <span class="dc-title">Returns the error message of the last PCRE regex execution</span></p> </div> <div class="refsect1 description" id="refsect1-function.preg-last-error-msg-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>preg_last_error_msg</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   Returns the error message of the last PCRE regex execution.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.preg-last-error-msg-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-function.preg-last-error-msg-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the error message on success, or <span class="literal">"No error"</span> if no   error has occurred.  </p> </div> <div class="refsect1 examples" id="refsect1-function.preg-last-error-msg-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5001">    <p><strong>示例 #1 <span class="function"><strong>preg_last_error_msg()</strong></span> example</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>preg_match</span><span style="color: #007700">(</span><span style="color: #DD0000">'/(?:\D+|&lt;\d+&gt;)*[!?]/'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foobar foobar foobar'</span><span style="color: #007700">);<br><br>if (</span><span style="color: #9876AA">preg_last_error</span><span style="color: #007700">() !== </span><span style="color: #9876AA">PREG_NO_ERROR</span><span style="color: #007700">) {<br>    echo </span><span style="color: #9876AA">preg_last_error_msg</span><span style="color: #007700">();<br>}<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">Backtrack&nbsp;limit&nbsp;exhausted</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.preg-last-error-msg-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link preg_last_error()} - 返回最后一个PCRE正则执行产生的错误代码</span></li>   </ul>   </div></div>
 * 
 * Returns the error message of the last PCRE regex execution
 *
 * @return string one of the error messages or "No error" if there is no error.
 * @since 8.0
 */
#[Pure(true)]
function preg_last_error_msg(): string {}

/**
 * Orders results so that $matches[0] is an array of full pattern
 * matches, $matches[1] is an array of strings matched by the first
 * parenthesized subpattern, and so on. This flag is only used with
 * <b>preg_match_all</b>.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_PATTERN_ORDER', 1);

/**
 * Returned by {@see preg_last_error()} if the last PCRE function failed due to limited JIT stack space.
 * @since 7.0
 */
define('PREG_JIT_STACKLIMIT_ERROR', 6);
/**
 * Orders results so that $matches[0] is an array of first set of
 * matches, $matches[1] is an array of second set of matches, and so
 * on. This flag is only used with <b>preg_match_all</b>.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_SET_ORDER', 2);

/**
 * See the description of
 * <b>PREG_SPLIT_OFFSET_CAPTURE</b>.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_OFFSET_CAPTURE', 256);

/**
 * This flag tells <b>preg_split</b> to return only non-empty
 * pieces.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_SPLIT_NO_EMPTY', 1);

/**
 * This flag tells <b>preg_split</b> to capture
 * parenthesized expression in the delimiter pattern as well.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_SPLIT_DELIM_CAPTURE', 2);

/**
 * If this flag is set, for every occurring match the appendant string
 * offset will also be returned. Note that this changes the return
 * values in an array where every element is an array consisting of the
 * matched string at offset 0 and its string offset within subject at
 * offset 1. This flag is only used for <b>preg_split</b>.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_SPLIT_OFFSET_CAPTURE', 4);

define('PREG_GREP_INVERT', 1);

/**
 * Returned by <b>preg_last_error</b> if there were no
 * errors.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_NO_ERROR', 0);

/**
 * Returned by <b>preg_last_error</b> if there was an
 * internal PCRE error.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_INTERNAL_ERROR', 1);

/**
 * Returned by <b>preg_last_error</b> if backtrack limit was exhausted.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_BACKTRACK_LIMIT_ERROR', 2);

/**
 * Returned by <b>preg_last_error</b> if recursion limit was exhausted.
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_RECURSION_LIMIT_ERROR', 3);

/**
 * Returned by <b>preg_last_error</b> if the last error was
 * caused by malformed UTF-8 data (only when running a regex in UTF-8 mode).
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_BAD_UTF8_ERROR', 4);

/**
 * Returned by <b>preg_last_error</b> if the offset didn't
 * correspond to the begin of a valid UTF-8 code point (only when running
 * a regex in UTF-8
 * mode).
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PREG_BAD_UTF8_OFFSET_ERROR', 5);

/**
 * This flag tells {@see preg_match()} and {@see preg_match_all()}
 * to include unmatched subpatterns in <b>$matches</b> as NULL values.
 * Without this flag, unmatched subpatterns are reported as empty strings,
 * as if they were empty matches. Setting this flag allows to distinguish between these two cases.
 * @since 7.2
 */
define('PREG_UNMATCHED_AS_NULL', 512);
/**
 * PCRE version and release date (e.g. "7.0 18-Dec-2006").
 * @link https://php.net/manual/en/pcre.constants.php
 */
define('PCRE_VERSION', "8.31 2012-07-06");

/**
 * @since 7.3
 */
define('PCRE_VERSION_MAJOR', 10);

/**
 * @since 7.3
 */
define('PCRE_VERSION_MINOR', 42);

/**
 * @since 7.3
 */
define('PCRE_JIT_SUPPORT', 1);
// End of pcre v.
