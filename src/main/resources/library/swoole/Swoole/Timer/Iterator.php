<?php

declare(strict_types=1);

namespace Swoole\Timer;

/**
* <div id="class.iterator" class="reference"> <h1 class="title">Iterator（迭代器）接口</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="iterator.intro">   <h2 class="title">简介</h2>   <p class="para">    可在内部迭代自己的外部迭代器或类的接口。   </p>  </div>  <div class="section" id="iterator.synopsis">   <h2 class="title">接口摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">    <span class="modifier">interface</span> <strong class="interfacename"><strong class="interfacename">Iterator</strong></strong>    <span class="modifier">extends</span>      <a href="https://php.net/manual/zh/class.traversable.php" class="interfacename">Traversable</a> {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/iterator.current.php" class="methodname" style="color:#CC7832">current</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/iterator.key.php" class="methodname" style="color:#CC7832">key</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/iterator.next.php" class="methodname" style="color:#CC7832">next</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/iterator.rewind.php" class="methodname" style="color:#CC7832">rewind</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/iterator.valid.php" class="methodname" style="color:#CC7832">valid</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>   }</div>  </div>    <div class="section" id="iterator.iterators">   <h2 class="title">预定义迭代器</h2>   <p class="para">    PHP 已经提供了一些用于日常任务的迭代器。    详细列表参见 <a href="https://php.net/manual/zh/spl.iterators.php" class="link">SPL 迭代器</a>。   </p>  </div>    <div class="section" id="iterator.examples">  <h2 class="title">示例</h2>   <div class="example" id="iterator.example.basic">    <p><strong>示例 #1 基本用法</strong></p>    <div class="example-contents"><p>     这个例子展示了使用 <a href="https://php.net/manual/zh/control-structures.foreach.php" class="link"><span class="literal">foreach</span></a> 时，迭代器方法的调用顺序。    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">myIterator </span><span style="color: #007700">implements </span><span style="color: #9876AA">Iterator </span><span style="color: #007700">{<br>    private </span><span style="color: #9876AA">$position </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br>    private </span><span style="color: #9876AA">$array </span><span style="color: #007700">= array(<br>        </span><span style="color: #DD0000">"firstelement"</span><span style="color: #007700">,<br>        </span><span style="color: #DD0000">"secondelement"</span><span style="color: #007700">,<br>        </span><span style="color: #DD0000">"lastelement"</span><span style="color: #007700">,<br>    );  <br><br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">position </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br>    }<br><br>    public function </span><span style="color: #9876AA">rewind</span><span style="color: #007700">(): </span><span style="color: #9876AA">void </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">);<br>        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">position </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br>    }<br><br>    #[</span><span style="color: #9876AA">\ReturnTypeWillChange</span><span style="color: #007700">]<br>    public function </span><span style="color: #9876AA">current</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">);<br>        return </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">array</span><span style="color: #007700">[</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">position</span><span style="color: #007700">];<br>    }<br><br>    #[</span><span style="color: #9876AA">\ReturnTypeWillChange</span><span style="color: #007700">]<br>    public function </span><span style="color: #9876AA">key</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">);<br>        return </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">position</span><span style="color: #007700">;<br>    }<br><br>    public function </span><span style="color: #9876AA">next</span><span style="color: #007700">(): </span><span style="color: #9876AA">void </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">);<br>        ++</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">position</span><span style="color: #007700">;<br>    }<br><br>    public function </span><span style="color: #9876AA">valid</span><span style="color: #007700">(): </span><span style="color: #9876AA">bool </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">);<br>        return isset(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">array</span><span style="color: #007700">[</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">position</span><span style="color: #007700">]);<br>    }<br>}<br><br></span><span style="color: #9876AA">$it </span><span style="color: #007700">= new </span><span style="color: #9876AA">myIterator</span><span style="color: #007700">;<br><br>foreach(</span><span style="color: #9876AA">$it </span><span style="color: #007700">as </span><span style="color: #9876AA">$key </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">$value</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$key</span><span style="color: #007700">, </span><span style="color: #9876AA">$value</span><span style="color: #007700">);<br>    echo </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="cdata"><blockquote style="border:1px gray solid;"><br>string(18) "myIterator::rewind"<br>string(17) "myIterator::valid"<br>string(19) "myIterator::current"<br>string(15) "myIterator::key"<br>int(0)<br>string(12) "firstelement"<br><br>string(16) "myIterator::next"<br>string(17) "myIterator::valid"<br>string(19) "myIterator::current"<br>string(15) "myIterator::key"<br>int(1)<br>string(13) "secondelement"<br><br>string(16) "myIterator::next"<br>string(17) "myIterator::valid"<br>string(19) "myIterator::current"<br>string(15) "myIterator::key"<br>int(2)<br>string(11) "lastelement"<br><br>string(16) "myIterator::next"<br>string(17) "myIterator::valid"<br></blockquote></div>    </div>   </div>  </div>  <div class="section" id="iterator.seealso">  <h2 class="title">参见</h2>   <p class="para">参见 <a href="https://php.net/manual/zh/language.oop5.iterations.php" class="link">遍历对象</a>。</p>  </div> </div>     <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Iterator::current} — 返回当前元素</li><li>{@link Iterator::key} — 返回当前元素的键</li><li>{@link Iterator::next} — 向前移动到下一个元素</li><li>{@link Iterator::rewind} — 返回到迭代器的第一个元素</li><li>{@link Iterator::valid} — 检查当前位置是否有效</li></ul></div>
*
 * @see https://www.php.net/ArrayIterator
 
*/
class Iterator extends \ArrayIterator {}
