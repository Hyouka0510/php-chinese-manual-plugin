<?php

/**
 * <div id="function.simdjson-decode" class="refentry"> <div class="refnamediv">  <h1 class="refname">simdjson_decode</h1>  <p class="verinfo">(PECL simdjson &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">simdjson_decode</span> — <span class="dc-title">Decodes a JSON string</span></p> </div> <div class="refsect1 description" id="refsect1-function.simdjson-decode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>simdjson_decode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$json</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$associative</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$depth</span><span class="initializer"> = 512</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Takes a JSON encoded string and converts it into a PHP value.   This uses a faster Simultaneous Instruction, Multiple Data implementation   than <span class="function">{@link json_decode()}</span> when it is supported by the computer architecture.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.simdjson-decode-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">json</span></dt>    <dd>     <p class="para">      The <span class="parameter" style="color:#3A95FF">json</span> <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> being decoded.     </p>     <p class="para">      This function only works with UTF-8 encoded strings.     </p>     <p class="para">      This function parses valid inputs which      <span class="function">{@link json_decode()}</span> can decode,      provided that they are less than 4 GiB long.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">associative</span></dt>    <dd>     <p class="para">      When <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>, JSON objects will be returned as      associative <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>s; when <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>, JSON objects will be returned as <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span>s.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">depth</span></dt>    <dd>     <p class="para">      Maximum nesting depth of the structure being decoded.      The value must be greater than <span class="literal">0</span>,      and less than or equal to <span class="literal">2147483647</span>.      Callers should use reasonably small values,      because larger depths require more buffer space and will      increase the recursion depth, unlike the current <span class="function">{@link json_decode()}</span> implementation.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-function.simdjson-decode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the value encoded in <span class="parameter" style="color:#3A95FF">json</span> in appropriate   PHP type. Values <span class="literal">true</span>, <span class="literal">false</span> and   <span class="literal">null</span> are returned as <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> and <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>   respectively.  </p> </div> <div class="refsect1 errors" id="refsect1-function.simdjson-decode-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   If <span class="parameter" style="color:#3A95FF">json</span> is invalid, a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonexception.php" class="classname">SimdJsonException</a></span> is thrown as of PECL simdjson 2.1.0,   while previously, a <span class="classname"><a href="https://php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> was thrown.  </p>  <p class="para">   If <span class="parameter" style="color:#3A95FF">depth</span> is outside the allowed range,   a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonvalueerror.php" class="classname">SimdJsonValueError</a></span> is thrown as of PECL simdjson 3.0.0,   while previously, an error of level <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> was raised.  </p> </div> <div class="refsect1 examples" id="refsect1-function.simdjson-decode-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3691">    <p><strong>示例 #1 <span class="function"><strong>simdjson_decode()</strong></span> examples</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"a":1,"b":2,"c":3}'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">));<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(stdClass)#1&nbsp;(3)&nbsp;{<br>&nbsp;&nbsp;["a"]=&gt;<br>&nbsp;&nbsp;int(1)<br>&nbsp;&nbsp;["b"]=&gt;<br>&nbsp;&nbsp;int(2)<br>&nbsp;&nbsp;["c"]=&gt;<br>&nbsp;&nbsp;int(3)<br>}<br>array(3)&nbsp;{<br>&nbsp;&nbsp;["a"]=&gt;<br>&nbsp;&nbsp;int(1)<br>&nbsp;&nbsp;["b"]=&gt;<br>&nbsp;&nbsp;int(2)<br>&nbsp;&nbsp;["c"]=&gt;<br>&nbsp;&nbsp;int(3)<br>}</blockquote></div>    </div>   </div>   <div class="example" id="example-3692">    <p><strong>示例 #2 Accessing invalid object properties</strong></p>    <div class="example-contents"><p>     Accessing elements within an object that contain characters not     permitted under PHP's naming convention (e.g. the hyphen) can be     accomplished by encapsulating the element name within braces and the apostrophe.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>\$json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"foo-bar": 12345}'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$obj </span><span style="color: #007700">= </span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">);<br>print </span><span style="color: #9876AA">\$obj</span><span style="color: #007700">-&gt;{</span><span style="color: #DD0000">'foo-bar'</span><span style="color: #007700">}; </span><span style="color: #FF8000">// 12345<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   <div class="example" id="example-3693">    <p><strong>示例 #3 common mistakes using <span class="function"><strong>simdjson_decode()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// the following strings are valid JavaScript but not valid JSON<br><br>// the name and value must be enclosed in double quotes<br>// single quotes are not valid<br></span><span style="color: #9876AA">\$bad_json </span><span style="color: #007700">= </span><span style="color: #DD0000">"{ 'bar': 'baz' }"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$bad_json</span><span style="color: #007700">); </span><span style="color: #FF8000">// Throws SimdJsonException<br><br>// the name must be enclosed in double quotes<br></span><span style="color: #9876AA">\$bad_json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{ bar: "baz" }'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$bad_json</span><span style="color: #007700">); </span><span style="color: #FF8000">// Throws SimdJsonException<br><br>// trailing commas are not allowed<br></span><span style="color: #9876AA">\$bad_json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{ bar: "baz", }'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$bad_json</span><span style="color: #007700">); </span><span style="color: #FF8000">// Throws SimdJsonException<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   <div class="example" id="example-3694">    <p><strong>示例 #4 <span class="parameter" style="color:#3A95FF">depth</span> errors</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// Encode some data with a maximum depth of 4<br>// (array -&gt; array -&gt; array -&gt; string)<br></span><span style="color: #9876AA">\$json </span><span style="color: #007700">= </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(<br>    [<br>        </span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; [<br>            </span><span style="color: #DD0000">'English' </span><span style="color: #007700">=&gt; [<br>                </span><span style="color: #DD0000">'One'</span><span style="color: #007700">,<br>                </span><span style="color: #DD0000">'January'<br>            </span><span style="color: #007700">],<br>            </span><span style="color: #DD0000">'French' </span><span style="color: #007700">=&gt; [<br>                </span><span style="color: #DD0000">'Une'</span><span style="color: #007700">,<br>                </span><span style="color: #DD0000">'Janvier'<br>            </span><span style="color: #007700">]<br>        ]<br>    ]<br>);<br><br></span><span style="color: #FF8000">// Show the errors for different depths.<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">));<br>try {<br>    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">, </span><span style="color: #9876AA">true</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">));<br>} catch (</span><span style="color: #9876AA">SimdJsonException \$e</span><span style="color: #007700">) {<br>     echo </span><span style="color: #DD0000">"Caught: "</span><span style="color: #007700">, </span><span style="color: #9876AA">\$e</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">(), </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(1)&nbsp;{<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;array(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["English"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;array(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"One"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string(7)&nbsp;"January"<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;["French"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;array(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"Une"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string(7)&nbsp;"Janvier"<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br>Caught:&nbsp;The&nbsp;JSON&nbsp;document&nbsp;was&nbsp;too&nbsp;deep&nbsp;(too&nbsp;many&nbsp;nested&nbsp;objects&nbsp;and&nbsp;arrays)</blockquote></div>    </div>   </div>   <div class="example" id="example-3695">    <p><strong>示例 #5 <span class="function"><strong>simdjson_decode()</strong></span> of large integers</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"number": 12345678901234567890}'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_decode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">));<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(stdClass)#1&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;["number"]=&gt;<br>&nbsp;&nbsp;float(1.2345678901235E+19)<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.simdjson-decode-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    The JSON spec is not JavaScript, but a subset of JavaScript.   </p>  </blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    In the event of a failure to decode,    a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonexception.php" class="classname">SimdJsonException</a></span> is thrown    and <span class="methodname" style="color:#CC7832"><strong>SimdJsonException::getCode()</strong></span> and    <span class="methodname" style="color:#CC7832"><strong>SimdJsonException::getMessage()</strong></span> can be used    to determine the exact nature of the error.   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.simdjson-decode-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link json_encode()} - 对变量进行 JSON 编码</span></li>    <li><span class="function">{@link json_decode()} - 对 JSON 格式的字符串进行解码</span></li>   </ul>   </div></div>
 * 
 * Takes a JSON encoded string and converts it into a PHP variable.
 * Similar to json_decode()
 *
 * @param string $json The JSON string being decoded
 * @param bool $associative When true, JSON objects will be returned as associative arrays.
 *                          When false, JSON objects will be returned as objects.
 * @param int $depth the maximum nesting depth of the structure being decoded.
 * @return array|stdClass|string|float|int|bool|null
 * @throws SimdJsonException for invalid JSON
 *                           (or $json over 4GB long, or out of range integer/float)
 * @throws SimdJsonValueError for invalid $depth
 */
function simdjson_decode(string $json, bool $associative = false, int $depth = 512) {}

/**
 * <div id="function.simdjson-is-valid" class="refentry"> <div class="refnamediv">  <h1 class="refname">simdjson_is_valid</h1>  <p class="verinfo">(PECL simdjson &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">simdjson_is_valid</span> — <span class="dc-title">Check if a JSON string is valid</span></p> </div> <div class="refsect1 description" id="refsect1-function.simdjson-is-valid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>simdjson_is_valid</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$json</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$depth</span><span class="initializer"> = 512</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Takes a JSON encoded string and returns true if it is valid.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.simdjson-is-valid-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">json</span></dt>    <dd>      <p class="para">       The <span class="parameter" style="color:#3A95FF">json</span> <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> being validated.      </p>      <p class="para">       This function only works with UTF-8 encoded strings.      </p>      <p class="para">       This function validates inputs which       <span class="function">{@link json_decode()}</span> can decode,       provided that they are less than 4 GiB long.      </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">depth</span></dt>    <dd>     <p class="para">      Maximum nesting depth of the structure being validated.      The value must be greater than <span class="literal">0</span>,      and less than or equal to <span class="literal">2147483647</span>.      Callers should use reasonably small values,      because larger depths require more buffer space and will      increase the recursion depth, unlike the current <span class="function">{@link json_decode()}</span> implementation.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-function.simdjson-is-valid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if <span class="parameter" style="color:#3A95FF">json</span> is a valid JSON   string, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 errors" id="refsect1-function.simdjson-is-valid-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   If <span class="parameter" style="color:#3A95FF">json</span> is longer than 4 GiB, a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonexception.php" class="classname">SimdJsonException</a></span> is thrown as of PECL simdjson 2.1.0,   while previously, a <span class="classname"><a href="https://php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> was thrown.  </p>  <p class="para">   If <span class="parameter" style="color:#3A95FF">depth</span> is outside the allowed range,   a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonvalueerror.php" class="classname">SimdJsonValueError</a></span> is thrown as of PECL simdjson 3.0.0,   while previously, an error of level <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> was raised.  </p> </div> <div class="refsect1 examples" id="refsect1-function.simdjson-is-valid-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3696">    <p><strong>示例 #1 <span class="function">{@link simdjson_decode()}</span> examples</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$json </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"a":1,"b":2,"c":3}'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$invalidJson </span><span style="color: #007700">= </span><span style="color: #DD0000">'{"a":1,"b":2,"c":'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_is_valid</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_is_valid</span><span style="color: #007700">(</span><span style="color: #9876AA">\$invalidJson</span><span style="color: #007700">));<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)</blockquote></div>    </div>   </div>   <div class="example" id="example-3697">    <p><strong>示例 #2 <span class="parameter" style="color:#3A95FF">depth</span> errors</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// Encode some data with a maximum depth of 4<br>// (array -&gt; array -&gt; array -&gt; string)<br></span><span style="color: #9876AA">\$json </span><span style="color: #007700">= </span><span style="color: #9876AA">json_encode</span><span style="color: #007700">(<br>    [<br>        </span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; [<br>            </span><span style="color: #DD0000">'English' </span><span style="color: #007700">=&gt; [<br>                </span><span style="color: #DD0000">'One'</span><span style="color: #007700">,<br>                </span><span style="color: #DD0000">'January'<br>            </span><span style="color: #007700">],<br>            </span><span style="color: #DD0000">'French' </span><span style="color: #007700">=&gt; [<br>                </span><span style="color: #DD0000">'Une'</span><span style="color: #007700">,<br>                </span><span style="color: #DD0000">'Janvier'<br>            </span><span style="color: #007700">]<br>        ]<br>    ]<br>);<br><br></span><span style="color: #FF8000">// Show the errors for different depths.<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_is_valid</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">, </span><span style="color: #9876AA">4</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">simdjson_is_valid</span><span style="color: #007700">(</span><span style="color: #9876AA">\$json</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.simdjson-is-valid-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    The JSON spec is not JavaScript, but a subset of JavaScript.   </p>  </blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    In the event of a failure to decode,    a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonexception.php" class="classname">SimdJsonException</a></span> is thrown    and <span class="methodname" style="color:#CC7832"><strong>SimdJsonException::getCode()</strong></span> and    <span class="methodname" style="color:#CC7832"><strong>SimdJsonException::getMessage()</strong></span> can be used    to determine the exact nature of the error.   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.simdjson-is-valid-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link json_encode()} - 对变量进行 JSON 编码</span></li>    <li><span class="function">{@link json_decode()} - 对 JSON 格式的字符串进行解码</span></li>   </ul>   </div></div>
 * 
 * Returns true if json is valid.
 *
 * @param string $json The JSON string being decoded
 * @param int $depth the maximum nesting depth of the structure being decoded.
 * @return bool
 * @throws SimdJsonValueError for invalid $depth
 */
function simdjson_is_valid(string $json, int $depth = 512): bool {}

/**
 * Parses $json and returns the number of keys in $json matching the JSON pointer $key
 *
 * @param string $json The JSON string being decoded
 * @param string $key The JSON pointer being requested
 * @param int $depth The maximum nesting depth of the structure being decoded.
 * @param bool $throw_if_uncountable If true, then throw SimdJsonException instead of
returning 0 for JSON pointers
to values that are neither objects nor arrays.
/**
 * <div id="function.simdjson-key-count" class="refentry"> <div class="refnamediv">  <h1 class="refname">simdjson_key_count</h1>  <p class="verinfo">(PECL simdjson &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">simdjson_key_count</span> — <span class="dc-title">Returns the value at a JSON pointer.</span></p> </div> <div class="refsect1 description" id="refsect1-function.simdjson-key-count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>simdjson_key_count</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$json</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$depth</span><span class="initializer"> = 512</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$throw_if_uncountable</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong></span></span><br>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   Count the number of elements of the object/array found at the requested JSON pointer.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.simdjson-key-count-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">json</span></dt>    <dd>     <p class="para">      The <span class="parameter" style="color:#3A95FF">json</span> <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> being queried.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">key</span></dt>    <dd>     <p class="para">      The JSON pointer <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">depth</span></dt>    <dd>     <p class="para">      Maximum nesting depth of the structure being validated.      The value must be greater than <span class="literal">0</span>,      and less than or equal to <span class="literal">2147483647</span>.      Callers should use reasonably small values,      because larger depths require more buffer space and will      increase the recursion depth, unlike the current <span class="function">{@link json_decode()}</span> implementation.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">throw_if_uncountable</span></dt>    <dd>     <p class="para">      When true, a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonexception.php" class="classname">SimdJsonException</a></span> will be thrown      instead of returning 0 when the value the JSON pointer points to      is neither an object nor an array.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-function.simdjson-key-count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> with the number of elements of the value at the given JSON pointer.  </p> </div></div>
 */
function simdjson_key_count(string $json, string $key, int $depth = 512, bool $throw_if_uncountable = false): int {}

/**
 * <div id="function.simdjson-key-exists" class="refentry"> <div class="refnamediv">  <h1 class="refname">simdjson_key_exists</h1>  <p class="verinfo">(PECL simdjson &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">simdjson_key_exists</span> — <span class="dc-title">Check if the JSON contains the value referred to by a JSON pointer.</span></p> </div> <div class="refsect1 description" id="refsect1-function.simdjson-key-exists-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><strong>simdjson_key_exists</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$json</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$key</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$depth</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Count the number of elements of the object/array found at the requested JSON pointer.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.simdjson-key-exists-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">json</span></dt>    <dd>     <p class="para">      The <span class="parameter" style="color:#3A95FF">json</span> <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> being queried.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">key</span></dt>    <dd>     <p class="para">      The JSON pointer <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">depth</span></dt>    <dd>     <p class="para">      Maximum nesting depth of the structure being validated.      The value must be greater than <span class="literal">0</span>,      and less than or equal to <span class="literal">2147483647</span>.      Callers should use reasonably small values,      because larger depths require more buffer space and will      increase the recursion depth, unlike the current <span class="function">{@link json_decode()}</span> implementation.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">throw_if_uncountable</span></dt>    <dd>     <p class="para">      When true, a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonexception.php" class="classname">SimdJsonException</a></span> will be thrown      instead of returning 0 when the value the JSON pointer points to      is neither an object nor an array.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-function.simdjson-key-exists-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the JSON pointer is valid and refers to a value found within a valid JSON string.   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> if the JSON is valid but does not contain the JSON pointer.  </p> </div></div>
 * 
 * Returns true if the JSON pointer $key could be found.
 *
 * @param string $json The JSON string being decoded
 * @param string $key The JSON pointer being requested
 * @param int $depth the maximum nesting depth of the structure being decoded.
 * @return bool (false if key is not found)
 * @throws SimdJsonException for invalid JSON or invalid JSON pointer
 *                           (or document over 4GB, or out of range integer/float)
 * @throws SimdJsonValueError for invalid $depth
 * @see https://www.rfc-editor.org/rfc/rfc6901.html
 */
function simdjson_key_exists(string $json, string $key, int $depth = 512): bool {}

/**
 * <div id="function.simdjson-key-value" class="refentry"> <div class="refnamediv">  <h1 class="refname">simdjson_key_value</h1>  <p class="verinfo">(PECL simdjson &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">simdjson_key_value</span> — <span class="dc-title">Decodes the value of a JSON string located at the requested JSON pointer.</span></p> </div> <div class="refsect1 description" id="refsect1-function.simdjson-key-value-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>simdjson_key_value</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$json</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$key</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$associative</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$depth</span><span class="initializer"> = 512</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Decodes and returns the value found at the requested JSON pointer.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.simdjson-key-value-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">json</span></dt>    <dd>     <p class="para">      The <span class="parameter" style="color:#3A95FF">json</span> <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> being queried and decoded.     </p>      <p class="para">       This function only works with UTF-8 encoded strings.      </p>      <p class="para">       This function parses valid inputs which       <span class="function">{@link json_decode()}</span> can decode,       provided that they are less than 4 GiB long.      </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">key</span></dt>    <dd>     <p class="para">      The JSON pointer <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">associative</span></dt>    <dd>     <p class="para">      When <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>, JSON objects will be returned as      associative <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>s; when <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>, JSON objects will be returned as <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span>s.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">depth</span></dt>    <dd>     <p class="para">      Maximum nesting depth of the structure being decoded.      The value must be greater than <span class="literal">0</span>,      and less than or equal to <span class="literal">2147483647</span>.      Callers should use reasonably small values,      because larger depths require more buffer space and will      increase the recursion depth, unlike the current <span class="function">{@link json_decode()}</span> implementation.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-function.simdjson-key-value-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the part of the value encoded in <span class="parameter" style="color:#3A95FF">json</span>   that <span class="parameter" style="color:#3A95FF">key</span> refers to in appropriate   PHP type. Values <span class="literal">true</span>, <span class="literal">false</span> and   <span class="literal">null</span> are returned as <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> and <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>   respectively.  </p> </div> <div class="refsect1 errors" id="refsect1-function.simdjson-key-value-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   If <span class="parameter" style="color:#3A95FF">json</span> or <span class="parameter" style="color:#3A95FF">key</span> is invalid,   or <span class="parameter" style="color:#3A95FF">key</span> could not be found within <span class="parameter" style="color:#3A95FF">json</span>,   a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonexception.php" class="classname">SimdJsonException</a></span> is thrown as of PECL simdjson 2.1.0,   while previously, a <span class="classname"><a href="https://php.net/manual/zh/class.runtimeexception.php" class="classname">RuntimeException</a></span> was thrown.  </p>  <p class="para">   If <span class="parameter" style="color:#3A95FF">depth</span> is outside the allowed range,   a <span class="classname"><a href="https://php.net/manual/zh/class.simdjsonvalueerror.php" class="classname">SimdJsonValueError</a></span> is thrown as of PECL simdjson 3.0.0,   while previously, an error of level <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> was raised.  </p> </div> <div class="refsect1 seealso" id="refsect1-function.simdjson-key-value-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link json_encode()} - 对变量进行 JSON 编码</span></li>    <li><span class="function">{@link simdjson_decode()} - Decodes a JSON string</span></li>   </ul>   </div></div>
 * 
 * Returns the value at the json pointer $key
 *
 * @param string $json The JSON string being decoded
 * @param string $key The JSON pointer being requested
 * @param int $depth the maximum nesting depth of the structure being decoded.
 * @param bool $associative When true, JSON objects will be returned as associative arrays.
 *                          When false, JSON objects will be returned as objects.
 * @return array|stdClass|string|float|int|bool|null the value at $key
 * @throws SimdJsonException for invalid JSON or invalid JSON pointer
 *                           (or document over 4GB, or out of range integer/float)
 * @throws SimdJsonValueError for invalid $depth
 * @see https://www.rfc-editor.org/rfc/rfc6901.html
 */
function simdjson_key_value(string $json, string $key, bool $associative = false, int $depth = 512) {}

/**
 * An error thrown by simdjson when processing json.
 *
 * The error code is available as $e->getCode().
 * This can be compared against the `SIMDJSON_ERR_*` constants.
 *
 * Before simdjson 2.1.0, a regular RuntimeException with an error code of 0 was thrown.
 */
class SimdJsonException extends RuntimeException {}

/**
 * Thrown for error conditions on fields such as $depth that are not expected to be
 * from user-provided JSON, with similar behavior to php 8.0.
 *
 * NOTE: https://www.php.net/valueerror was added in php 8.0.
 * In older php versions, this extends Error instead.
 *
 * When support for php 8.0 is dropped completely,
 * a major release of simdjson will likely switch to a standard ValueError.
 */
class SimdJsonValueError extends ValueError {}
