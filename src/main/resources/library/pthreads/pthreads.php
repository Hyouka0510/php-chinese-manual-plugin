<?php

// Start of PECL pthreads 3.1.6

/**
 * <span class="simpara">      线程的默认选项。线程开始的时候，pthreads 扩展会将环境复制到线程上下文中。     </span>
 * 
 * The default options for all Threads, causes pthreads to copy the environment
 * when new Threads are started
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_INHERIT_ALL', 1118481);

/**
 * <span class="simpara">      新线程开始时，不继承任何内容。     </span>
 * 
 * Do not inherit anything when new Threads are started
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_INHERIT_NONE', 0);

/**
 * <span class="simpara">      新线程开始时，仅继承 INI 配置。     </span>
 * 
 * Inherit INI entries when new Threads are started
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_INHERIT_INI', 1);

/**
 * <span class="simpara">      新线程开始时，继承用户定义的常量。     </span>
 * 
 * Inherit user declared constants when new Threads are started
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_INHERIT_CONSTANTS', 16);

/**
 * <span class="simpara">      新线程开始时，继承用户定义的类。     </span>
 * 
 * Inherit user declared classes when new Threads are started
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_INHERIT_CLASSES', 4096);

/**
 * <span class="simpara">      新线程开始时，继承用户定义的函数。     </span>
 * 
 * Inherit user declared functions when new Threads are started
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_INHERIT_FUNCTIONS', 256);

/**
 * <span class="simpara">      新线程开始时，继承包含文件。     </span>
 * 
 * Inherit included file information when new Threads are started
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_INHERIT_INCLUDES', 65536);

/**
 * <span class="simpara">      新线程开始时，继承所有的注释。     </span>
 * 
 * Inherit all comments when new Threads are started
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_INHERIT_COMMENTS', 1048576);

/**
 * <span class="simpara">      允许新线程向标准输出发送头信息（通常情况下是被禁止的）。     </span>
 * 
 * Allow new Threads to send headers to standard output (normally prohibited)
 * @link https://php.net/manual/zh/pthreads.constants.php
 */
define('PTHREADS_ALLOW_HEADERS', 268435456);

/**
 * <div id="class.pool" class="reference"> <h1 class="title">Pool 类</h1>  <div class="partintro"><p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p>  <div class="section" id="pool.intro">   <h2 class="title">简介</h2>   <p class="para">    Pool 对象是多个 Worker 对象的容器，同时也是它们的控制器。   </p>   <p class="para">    线程池是对 Worker 功能的高层抽象，包括按照 pthreads 需要的方式来管理应用的功能。   </p>  </div>  <div class="section" id="pool.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Pool</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>      <var class="varname"><a href="https://php.net/manual/zh/class.pool.php#pool.props.size">\$<var class="varname">size</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>      <var class="varname"><a href="https://php.net/manual/zh/class.pool.php#pool.props.class">\$<var class="varname">class</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>      <var class="varname"><a href="https://php.net/manual/zh/class.pool.php#pool.props.workers">\$<var class="varname">workers</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>      <var class="varname"><a href="https://php.net/manual/zh/class.pool.php#pool.props.ctor">\$<var class="varname">ctor</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">protected</span>      <var class="varname"><a href="https://php.net/manual/zh/class.pool.php#pool.props.last">\$<var class="varname">last</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/pool.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$size</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$class</span><span class="initializer"> = ?</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$ctor</span><span class="initializer"> = ?</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/pool.collect.php" class="methodname" style="color:#CC7832">collect</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type Callable" style="color:#EAB766">Callable</a></span> <span class="parameter" style="color:#3A95FF">\$collector</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/pool.resize.php" class="methodname" style="color:#CC7832">resize</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$size</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/pool.shutdown.php" class="methodname" style="color:#CC7832">shutdown</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/pool.submit.php" class="methodname" style="color:#CC7832">submit</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.threaded.php" class="type Threaded" style="color:#EAB766">Threaded</a></span> <span class="parameter" style="color:#3A95FF">\$task</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/pool.submitTo.php" class="methodname" style="color:#CC7832">submitTo</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$worker</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.threaded.php" class="type Threaded" style="color:#EAB766">Threaded</a></span> <span class="parameter" style="color:#3A95FF">\$task</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>   }</div>  </div>  <div class="section" id="pool.props">   <h2 class="title">属性</h2>   <dl>         <dt id="pool.props.size"><var class="varname">size</var></dt>     <dd>      <p class="para">Pool 对象可容纳的 Worker 对象的最大数量</p>     </dd>             <dt id="pool.props.class"><var class="varname">class</var></dt>     <dd>      <p class="para">Worker 的类</p>     </dd>             <dt id="pool.props.workers"><var class="varname">workers</var></dt>     <dd>      <p class="para">指向 Worker 对象的引用</p>     </dd>             <dt id="pool.props.ctor"><var class="varname">ctor</var></dt>     <dd>      <p class="para">构造新的 Worker 对象时所需的参数</p>     </dd>             <dt id="pool.props.last"><var class="varname">last</var></dt>     <dd>      <p class="para">最后使用的 Worker 对象在池中的位置偏移量</p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Pool::collect} — 回收已完成任务的引用</li><li>{@link Pool::__construct} — 创建新的 Worker 对象池</li><li>{@link Pool::resize} — 改变 Pool 对象的可容纳 Worker 对象的数量</li><li>{@link Pool::shutdown} — 停止所有的 Worker 对象</li><li>{@link Pool::submit} — 提交对象以执行</li><li>{@link Pool::submitTo} — 提交一个任务到特定的 Worker 以执行</li></ul></div>
 * 
 * (PECL pthreads &gt;= 2.0.0)<br/>
 * A Pool is a container for, and controller of, an adjustable number of
 * Workers.<br/>
 * Pooling provides a higher level abstraction of the Worker functionality,
 * including the management of references in the way required by pthreads.
 * @link https://secure.php.net/manual/en/class.pool.php
 */
class Pool
{
    /**
     * Maximum number of Workers this Pool can use
     * @var int
     */
    protected $size;

    /**
     * The class of the Worker
     * @var string
     */
    protected $class;

    /**
     * The arguments for constructor of new Workers
     * @var array
     */
    protected $ctor;

    /**
     * References to Workers
     * @var array
     */
    protected $workers;

    /**
     * Offset in workers of the last Worker used
     * @var int
     */
    protected $last;

    /**
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Construct a new pool of workers. Pools lazily create their threads, which means
     * new threads will only be spawned when they are required to execute tasks.
     * @link https://secure.php.net/manual/en/pool.construct.php
     * @param int $size <p>The maximum number of workers for this pool to create</p>
     * @param string $class [optional] <p>The class for new Workers. If no class is
     * given, then it defaults to the {@link Worker} class.</p>
     * @param array $ctor [optional] <p>An array of arguments to be passed to new
     * Workers</p>
     */
    public function __construct(int $size, string $class = 'Worker', array $ctor = []) {}

    /**
 * <div id="pool.collect" class="refentry"> <div class="refnamediv">  <h1 class="refname">Pool::collect</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Pool::collect</span> — <span class="dc-title">回收已完成任务的引用</span></p> </div> <div class="refsect1 description" id="refsect1-pool.collect-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Pool::collect</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type Callable" style="color:#EAB766">Callable</a></span> <span class="parameter" style="color:#3A95FF">\$collector</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   对于视为垃圾的引用，使用给定的垃圾收集器进行收集  </p> </div> <div class="refsect1 parameters" id="refsect1-pool.collect-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">collector</span></dt>    <dd>     <p class="para">      垃圾收集器，它返回一个布尔值表示这个任务是否可以被进行垃圾收集。      仅在极少的情况下需要一个自定义的垃圾收集器。     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-pool.collect-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  池中剩余的待收集的任务数量。  </p> </div> <div class="refsect1 changelog" id="refsect1-pool.collect-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>PECL pthreads 3.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">collector</span> 参数变为可选参数，        并且返回值改为整数。       </td>      </tr>     </tbody>        </table>   </div>  <div class="refsect1 examples" id="refsect1-pool.collect-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3610">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>Pool::collect()</strong></span> 基本用法示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$pool </span><span style="color: #007700">= new </span><span style="color: #9876AA">Pool</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br><br>for (</span><span style="color: #9876AA">\$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">\$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">15</span><span style="color: #007700">; ++</span><span style="color: #9876AA">\$i</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">submit</span><span style="color: #007700">(new class extends </span><span style="color: #9876AA">Threaded </span><span style="color: #007700">{});<br>}<br><br>while (</span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">collect</span><span style="color: #007700">()); </span><span style="color: #FF8000">// 直到全部的任务都完成执行之后才会继续下面的代码<br><br></span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">shutdown</span><span style="color: #007700">();</span></span></blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Allows the pool to collect references determined to be garbage by the
     * optionally given collector
     * @link https://secure.php.net/manual/en/pool.collect.php
     * @param null|callable $collector [optional] <p>A Callable collector that returns a
     * boolean on whether the task can be collected or not. Only in rare cases should
     * a custom collector need to be used.</p>
     * @return int <p>The number of remaining tasks in the pool to be collected</p>
     */
    public function collect(?callable $collector = null) {}

    /**
 * <div id="pool.resize" class="refentry"> <div class="refnamediv">  <h1 class="refname">Pool::resize</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Pool::resize</span> — <span class="dc-title">改变 Pool 对象的可容纳 Worker 对象的数量</span></p> </div> <div class="refsect1 description" id="refsect1-pool.resize-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span><span class="methodname" style="color:#CC7832"><strong>Pool::resize</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$size</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   改变 Pool 对象的可容纳 Worker 对象的数量  </p> </div> <div class="refsect1 parameters" id="refsect1-pool.resize-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">size</span>    </dt>    <dd>     <p class="para">      此 Pool 对象可创建 Worker 对象的最大数量     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-pool.resize-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Resize the Pool
     * @link https://secure.php.net/manual/en/pool.resize.php
     * @param int $size <p>The maximum number of Workers this Pool can create</p>
     * @return void
     */
    public function resize(int $size) {}

    /**
 * <div id="pool.shutdown" class="refentry"> <div class="refnamediv">  <h1 class="refname">Pool::shutdown</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Pool::shutdown</span> — <span class="dc-title">停止所有的 Worker 对象</span></p> </div> <div class="refsect1 description" id="refsect1-pool.shutdown-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span><span class="methodname" style="color:#CC7832"><strong>Pool::shutdown</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   停止此 Pool 中所有的 Worker 对象。此方法调用会进入阻塞状态，   直到所有已经提交到这个 Pool 中的任务都执行完毕。  </p> </div> <div class="refsect1 parameters" id="refsect1-pool.shutdown-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-pool.shutdown-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 examples" id="refsect1-pool.shutdown-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3612">    <p><strong>示例 #1 完全停止一个 Pool</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Task </span><span style="color: #007700">extends </span><span style="color: #9876AA">Threaded<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">usleep</span><span style="color: #007700">(</span><span style="color: #9876AA">500000</span><span style="color: #007700">);<br>    }<br>}<br><br></span><span style="color: #9876AA">\$pool </span><span style="color: #007700">= new </span><span style="color: #9876AA">Pool</span><span style="color: #007700">(</span><span style="color: #9876AA">4</span><span style="color: #007700">);<br><br>for (</span><span style="color: #9876AA">\$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">\$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">10</span><span style="color: #007700">; ++</span><span style="color: #9876AA">\$i</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">submit</span><span style="color: #007700">(new </span><span style="color: #9876AA">Task</span><span style="color: #007700">());<br>}<br><br></span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">shutdown</span><span style="color: #007700">(); </span><span style="color: #FF8000">// 进入阻塞状态，直到所有已经提交到 Pool 中的任务都执行完毕</span></span></blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Shuts down all of the workers in the pool. This will block until all submitted
     * tasks have been executed.
     * @link https://secure.php.net/manual/en/pool.shutdown.php
     * @return void
     */
    public function shutdown() {}

    /**
 * <div id="pool.submit" class="refentry"> <div class="refnamediv">  <h1 class="refname">Pool::submit</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Pool::submit</span> — <span class="dc-title">提交对象以执行</span></p> </div> <div class="refsect1 description" id="refsect1-pool.submit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Pool::submit</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.threaded.php" class="type Threaded" style="color:#EAB766">Threaded</a></span> <span class="parameter" style="color:#3A95FF">\$task</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   将任务提交到 Pool 中的下一个 Worker 对象  </p> </div> <div class="refsect1 parameters" id="refsect1-pool.submit-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">task</span></dt>    <dd>     <p class="para">  要执行的任务     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-pool.submit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para"> 执行新加入对象的 Worker 对象 ID  </p> </div> <div class="refsect1 examples" id="refsect1-pool.submit-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3613">    <p><strong>示例 #1 提交任务</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">MyWork </span><span style="color: #007700">extends </span><span style="color: #9876AA">Threaded </span><span style="color: #007700">{<br>    <br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #FF8000">// ... <br>    </span><span style="color: #007700">}<br>}<br><br>class </span><span style="color: #9876AA">MyWorker </span><span style="color: #007700">extends </span><span style="color: #9876AA">Worker </span><span style="color: #007700">{<br>    <br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">Something \$something</span><span style="color: #007700">) {<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">something </span><span style="color: #007700">= </span><span style="color: #9876AA">\$something</span><span style="color: #007700">;<br>    }<br>    <br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #FF8000">//* ... *<br>    </span><span style="color: #007700">}<br>}<br><br></span><span style="color: #9876AA">\$pool </span><span style="color: #007700">= new </span><span style="color: #9876AA">Pool</span><span style="color: #007700">(</span><span style="color: #9876AA">8</span><span style="color: #007700">, </span><span style="color: #9876AA">\MyWorker</span><span style="color: #007700">::class, [new </span><span style="color: #9876AA">Something</span><span style="color: #007700">()]);<br></span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">submit</span><span style="color: #007700">(new </span><span style="color: #9876AA">MyWork</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pool</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(Pool)#1&nbsp;(6)&nbsp;{<br>&nbsp;&nbsp;["size":protected]=&gt;<br>&nbsp;&nbsp;int(8)<br>&nbsp;&nbsp;["class":protected]=&gt;<br>&nbsp;&nbsp;string(8)&nbsp;"MyWorker"<br>&nbsp;&nbsp;["workers":protected]=&gt;<br>&nbsp;&nbsp;array(1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;object(MyWorker)#4&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;["something"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object(Something)#5&nbsp;(0)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;["work":protected]=&gt;<br>&nbsp;&nbsp;array(1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;object(MyWork)#3&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;["worker"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object(MyWorker)#5&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;["something"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object(Something)#6&nbsp;(0)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;["ctor":protected]=&gt;<br>&nbsp;&nbsp;array(1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;object(Something)#2&nbsp;(0)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;["last":protected]=&gt;<br>&nbsp;&nbsp;int(1)<br>}</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Submit the task to the next Worker in the Pool
     * @link https://secure.php.net/manual/en/pool.submit.php
     * @param Threaded $task <p>The task for execution</p>
     * @return int <p>the identifier of the Worker executing the object</p>
     */
    public function submit(Threaded $task) {}

    /**
 * <div id="pool.submitTo" class="refentry"> <div class="refnamediv">  <h1 class="refname">Pool::submitTo</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Pool::submitTo</span> — <span class="dc-title">提交一个任务到特定的 Worker 以执行</span></p> </div> <div class="refsect1 description" id="refsect1-pool.submitTo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Pool::submitTo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$worker</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.threaded.php" class="type Threaded" style="color:#EAB766">Threaded</a></span> <span class="parameter" style="color:#3A95FF">\$task</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   将对象提交到 Pool 中某个特定的 Worker 对象来执行。Worker 的下标从 0 开始，   由于 Pool 中的线程是懒加载机制，   所以 Worker 对象仅在 Pool 需要执行任务的时候才会真正被创建。  </p> </div> <div class="refsect1 parameters" id="refsect1-pool.submitTo-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">worker</span></dt>    <dd>     <p class="para">      用来执行任务的 Worker 对象，下标从 <span class="literal">0</span> 开始。     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">task</span></dt>    <dd>     <p class="para">  要执行的任务     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-pool.submitTo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para"> 接受新加入对象的 Worker 对象ID  </p> </div> <div class="refsect1 examples" id="refsect1-pool.submitTo-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3614">    <p><strong>示例 #1 提交任务到特定的 Worker</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Task </span><span style="color: #007700">extends </span><span style="color: #9876AA">Threaded </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">Thread</span><span style="color: #007700">::</span><span style="color: #9876AA">getCurrentThreadID</span><span style="color: #007700">());<br>    }<br>}<br><br></span><span style="color: #9876AA">\$pool </span><span style="color: #007700">= new </span><span style="color: #9876AA">Pool</span><span style="color: #007700">(</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">submit</span><span style="color: #007700">(new </span><span style="color: #9876AA">Task</span><span style="color: #007700">());<br><br>for (</span><span style="color: #9876AA">\$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">\$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">5</span><span style="color: #007700">; ++</span><span style="color: #9876AA">\$i</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">submitTo</span><span style="color: #007700">(</span><span style="color: #9876AA">0</span><span style="color: #007700">, new </span><span style="color: #9876AA">Task</span><span style="color: #007700">()); </span><span style="color: #FF8000">// 将所有的任务都入栈到下标为 0 的 Worker<br></span><span style="color: #007700">}<br><br></span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">submitTo</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">, new </span><span style="color: #9876AA">Task</span><span style="color: #007700">()); </span><span style="color: #FF8000">// 由于第二个 Worker 尚未存在，所以不可以将任务入栈到第二个 Worker<br><br></span><span style="color: #9876AA">\$pool</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">shutdown</span><span style="color: #007700">();</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">int(4475011072)<br>int(4475011072)<br>int(4475011072)<br>int(4475011072)<br>int(4475011072)<br>int(4475011072)<br><br>Fatal&nbsp;error:&nbsp;Uncaught&nbsp;Exception:&nbsp;The&nbsp;selected&nbsp;worker&nbsp;(1)&nbsp;does&nbsp;not&nbsp;exist&nbsp;in&nbsp;%s:%d</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Submit a task to the specified worker in the pool. The workers are indexed
     * from 0, and will only exist if the pool has needed to create them (since
     * threads are lazily spawned).
     * @link https://secure.php.net/manual/en/pool.submitTo.php
     * @param int $worker <p>The worker to stack the task onto, indexed from 0</p>
     * @param Threaded $task <p>The task for execution</p>
     * @return int <p>The identifier of the worker that accepted the task</p>
     */
    public function submitTo(int $worker, Threaded $task) {}
}

/**
 * <div id="class.threaded" class="reference"> <h1 class="title">Threaded 类</h1>  <div class="partintro"><p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p>  <div class="section" id="threaded.intro">   <h2 class="title">简介</h2>   <p class="para">  Threaded 对象提供支持 pthreads 操作的基本功能，包括同步方法以及其他对程序员很有帮助的接口。   </p>   <p class="para">    重要的是，Threaded 提供了隐式的线程安全机制，这个对象中的所有操作都是线程安全的。   </p>  </div> <div class="section" id="threaded.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Threaded</strong>     </span>          <span class="oointerface"><span class="modifier">implements</span>        <a href="https://php.net/manual/zh/class.collectable.php" class="interfacename">Collectable</a></span><span class="oointerface">,  <a href="https://php.net/manual/zh/class.traversable.php" class="interfacename">Traversable</a></span><span class="oointerface">,  <a href="https://php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span><span class="oointerface">,  <a href="https://php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span> {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.chunk.php" class="methodname" style="color:#CC7832">chunk</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$size</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$preserve</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.count.php" class="methodname" style="color:#CC7832">count</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.extend.php" class="methodname" style="color:#CC7832">extend</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.isrunning.php" class="methodname" style="color:#CC7832">isRunning</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.isterminated.php" class="methodname" style="color:#CC7832">isTerminated</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.merge.php" class="methodname" style="color:#CC7832">merge</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$overwrite</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.notify.php" class="methodname" style="color:#CC7832">notify</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.notifyone.php" class="methodname" style="color:#CC7832">notifyOne</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.pop.php" class="methodname" style="color:#CC7832">pop</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.run.php" class="methodname" style="color:#CC7832">run</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.shift.php" class="methodname" style="color:#CC7832">shift</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.synchronized.php" class="methodname" style="color:#CC7832">synchronized</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span> <span class="parameter" style="color:#3A95FF">\$block</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/threaded.wait.php" class="methodname" style="color:#CC7832">wait</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$timeout</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Threaded::chunk} — 操作</li><li>{@link Threaded::count} — 操作</li><li>{@link Threaded::extend} — Runtime Manipulation</li><li>{@link Threaded::isRunning} — 状态检测</li><li>{@link Threaded::isTerminated} — 状态检测</li><li>{@link Threaded::merge} — 操作</li><li>{@link Threaded::notify} — 同步控制</li><li>{@link Threaded::notifyOne} — Synchronization</li><li>{@link Threaded::pop} — 操作</li><li>{@link Threaded::run} — 执行</li><li>{@link Threaded::shift} — Manipulation</li><li>{@link Threaded::synchronized} — 同步控制</li><li>{@link Threaded::wait} — Synchronization</li></ul></div>
 * 
 * Threaded objects form the basis of pthreads ability to execute user code
 * in parallel; they expose synchronization methods and various useful
 * interfaces.<br/>
 * Threaded objects, most importantly, provide implicit safety for the programmer;
 * all operations on the object scope are safe.
 *
 * @link https://secure.php.net/manual/en/class.threaded.php
 */
class Threaded implements Collectable, Traversable, Countable, ArrayAccess
{
    /**
     * Worker object in which this Threaded is being executed
     * @var Worker
     */
    protected $worker;

    /**
     * (PECL pthreads &gt;= 3.0.0)<br/>
     * Increments the internal number of references to a Threaded object
     * @return void
     */
    public function addRef() {}

    /**
 * <div id="threaded.chunk" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::chunk</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::chunk</span> — <span class="dc-title">操作</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.chunk-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::chunk</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$size</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$preserve</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取给定数量的对象属性表，可以选择是否保留键名称。  </p> </div>  <div class="refsect1 parameters" id="refsect1-threaded.chunk-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">size</span></dt>    <dd>     <p class="para">  要获取的条目数量     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">preserve</span></dt>    <dd>     <p class="para">  保留成员原有的键名称，默认为 false      </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.chunk-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   数组对象，包含从对象属性表中返回的给定数量的条目。  </p> </div> <div class="refsect1 examples" id="refsect1-threaded.chunk-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3584">    <p><strong>示例 #1 获取对象属性表中的部分条目</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$safe </span><span style="color: #007700">= new </span><span style="color: #9876AA">Threaded</span><span style="color: #007700">();<br><br>while (</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">) &lt; </span><span style="color: #9876AA">10</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$safe</span><span style="color: #007700">[] = </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">);<br>}<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">chunk</span><span style="color: #007700">(</span><span style="color: #9876AA">5</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(5)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;int(0)<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;int(1)<br>&nbsp;&nbsp;[2]=&gt;<br>&nbsp;&nbsp;int(2)<br>&nbsp;&nbsp;[3]=&gt;<br>&nbsp;&nbsp;int(3)<br>&nbsp;&nbsp;[4]=&gt;<br>&nbsp;&nbsp;int(4)<br>}</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Fetches a chunk of the objects property table of the given size,
     * optionally preserving keys
     * @link https://secure.php.net/manual/en/threaded.chunk.php
     * @param int $size <p>The number of items to fetch</p>
     * @param bool $preserve [optional] <p>Preserve the keys of members, by default false</p>
     * @return array <p>An array of items from the objects property table</p>
     */
    public function chunk($size, $preserve = false) {}

    /**
 * <div id="threaded.count" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::count</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::count</span> — <span class="dc-title">操作</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.count-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::count</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   返回对象的属性数量  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.count-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.count-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    </p> </div> <div class="refsect1 examples" id="refsect1-threaded.count-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3585">    <p><strong>示例 #1 计算对象中的属性数量</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$safe </span><span style="color: #007700">= new </span><span style="color: #9876AA">Threaded</span><span style="color: #007700">();<br><br>while (</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">) &lt; </span><span style="color: #9876AA">10</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$safe</span><span style="color: #007700">[] = </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">);<br>}<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">int(10)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Returns the number of properties for this object
     * @link https://secure.php.net/manual/en/threaded.count.php
     * @return int <p>The number of properties for this object</p>
     */
    public function count() {}

    /**
     * (PECL pthreads &gt;= 3.0.0)<br/>
     * Decrements the internal number of references to a Threaded object
     * @return void
     */
    public function delRef() {}

    /**
 * <div id="threaded.extend" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::extend</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.8)</p><p class="refpurpose"><span class="refname">Threaded::extend</span> — <span class="dc-title">Runtime Manipulation</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.extend-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::extend</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">  Makes thread safe standard class at runtime  </p> </div>  <div class="refsect1 parameters" id="refsect1-threaded.extend-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">class</span></dt>    <dd>     <p class="para">  The class to extend     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.extend-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-threaded.extend-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3586">    <p><strong>示例 #1 Runtime inheritance</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">{}<br><br></span><span style="color: #9876AA">Threaded</span><span style="color: #007700">::</span><span style="color: #9876AA">extend</span><span style="color: #007700">(</span><span style="color: #9876AA">My</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Threaded</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.8)<br/>
     * Makes thread safe standard class at runtime
     * @link https://secure.php.net/manual/en/threaded.extend.php
     * @param string $class <p>The class to extend</p>
     * @return bool <p>A boolean indication of success</p>
     */
    public static function extend($class) {}

    /**
     * (PECL pthreads &gt;= 3.0.0)<br/>
     * Retrieves the internal number of references to a Threaded object
     * @return int <p>The number of references to the Threaded object</p>
     */
    public function getRefCount() {}

    /**
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Tell if the referenced object is executing
     * @link https://secure.php.net/manual/en/thread.isrunning.php
     * @return bool <p>A boolean indication of state</p>
     */
    public function isRunning() {}

    /**
     * (PECL pthreads &gt;= 3.1.0)<br/>
     * @inheritdoc
     * @see Collectable::isGarbage()
     */
    public function isGarbage(): bool {}

    /**
 * <div id="threaded.isterminated" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::isTerminated</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::isTerminated</span> — <span class="dc-title">状态检测</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.isterminated-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::isTerminated</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检测是否因致命错误或未捕获的异常而导致执行过程异常终止  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.isterminated-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.isterminated-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  布尔值，表示是否异常终止  </p> </div> <div class="refsect1 examples" id="refsect1-threaded.isterminated-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3588">    <p><strong>示例 #1 检测对象状态</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">i_do_not_exist</span><span style="color: #007700">();<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">join</span><span style="color: #007700">();<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isTerminated</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Tell if the referenced object was terminated during execution; suffered
     * fatal errors, or threw uncaught exceptions
     * @link https://secure.php.net/manual/en/threaded.isterminated.php
     * @return bool <p>A boolean indication of state</p>
     */
    public function isTerminated() {}

    /**
 * <div id="threaded.merge" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::merge</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::merge</span> — <span class="dc-title">操作</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.merge-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span><span class="methodname" style="color:#CC7832"><strong>Threaded::merge</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$overwrite</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   将数据合并到当前对象  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.merge-parameters">  <h3 class="title">参数</h3>  <dl>       <dt>     <span class="parameter" style="color:#3A95FF">from</span>    </dt>    <dd>     <p class="para">      要合并的数据     </p>    </dd>          <dt>     <span class="parameter" style="color:#3A95FF">overwrite</span>    </dt>    <dd>     <p class="para">      如果现有对象已经存在同键的数据，是否覆盖。默认为 true     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.merge-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-threaded.merge-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3589">    <p><strong>示例 #1 合并数据到对象的属性表</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$array </span><span style="color: #007700">= [];<br><br>while (</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$array</span><span style="color: #007700">) &lt; </span><span style="color: #9876AA">10</span><span style="color: #007700">)<br>    </span><span style="color: #9876AA">\$array</span><span style="color: #007700">[] = </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$array</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">\$stdClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$stdClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo </span><span style="color: #007700">= </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$stdClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bar </span><span style="color: #007700">= </span><span style="color: #DD0000">"bar"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$stdClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">baz </span><span style="color: #007700">= </span><span style="color: #DD0000">"baz"</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$safe </span><span style="color: #007700">= new </span><span style="color: #9876AA">Threaded</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$safe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">merge</span><span style="color: #007700">(</span><span style="color: #9876AA">\$array</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$safe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">merge</span><span style="color: #007700">(</span><span style="color: #9876AA">\$stdClass</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(Threaded)#2&nbsp;(13)&nbsp;{<br>&nbsp;&nbsp;["0"]=&gt;<br>&nbsp;&nbsp;int(0)<br>&nbsp;&nbsp;["1"]=&gt;<br>&nbsp;&nbsp;int(1)<br>&nbsp;&nbsp;["2"]=&gt;<br>&nbsp;&nbsp;int(2)<br>&nbsp;&nbsp;["3"]=&gt;<br>&nbsp;&nbsp;int(3)<br>&nbsp;&nbsp;["4"]=&gt;<br>&nbsp;&nbsp;int(4)<br>&nbsp;&nbsp;["5"]=&gt;<br>&nbsp;&nbsp;int(5)<br>&nbsp;&nbsp;["6"]=&gt;<br>&nbsp;&nbsp;int(6)<br>&nbsp;&nbsp;["7"]=&gt;<br>&nbsp;&nbsp;int(7)<br>&nbsp;&nbsp;["8"]=&gt;<br>&nbsp;&nbsp;int(8)<br>&nbsp;&nbsp;["9"]=&gt;<br>&nbsp;&nbsp;int(9)<br>&nbsp;&nbsp;["foo"]=&gt;<br>&nbsp;&nbsp;string(3)&nbsp;"foo"<br>&nbsp;&nbsp;["bar"]=&gt;<br>&nbsp;&nbsp;string(3)&nbsp;"bar"<br>&nbsp;&nbsp;["baz"]=&gt;<br>&nbsp;&nbsp;string(3)&nbsp;"baz"<br>}</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Merges data into the current object
     * @link https://secure.php.net/manual/en/threaded.merge.php
     * @var mixed <p>The data to merge</p>
     * @var bool [optional] <p>Overwrite existing keys, by default true</p>
     * @return bool <p>A boolean indication of success</p>
     */
    public function merge($from, $overwrite = true) {}

    /**
 * <div id="threaded.notify" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::notify</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::notify</span> — <span class="dc-title">同步控制</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.notify-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::notify</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">  向对象发送唤醒通知  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.notify-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.notify-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-threaded.notify-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3590">    <p><strong>示例 #1 等待和唤醒</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #FF8000">//* 让线程等待 *<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>            if (!</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done</span><span style="color: #007700">)<br>                </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">wait</span><span style="color: #007700">();<br>        }, </span><span style="color: #9876AA">\$this</span><span style="color: #007700">);<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #FF8000">//* 向处于等待状态的线程发送唤醒通知 *<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">notify</span><span style="color: #007700">();<br>}, </span><span style="color: #9876AA">\$my</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">join</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Send notification to the referenced object
     * @link https://secure.php.net/manual/en/threaded.notify.php
     * @return bool <p>A boolean indication of success</p>
     */
    public function notify() {}

    /**
 * <div id="threaded.notifyone" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::notifyOne</h1>  <p class="verinfo">(PECL pthreads &gt;= 3.0.0)</p><p class="refpurpose"><span class="refname">Threaded::notifyOne</span> — <span class="dc-title">Synchronization</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.notifyone-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::notifyOne</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">  Send notification to the referenced object. This unblocks at least one of the  blocked threads (as opposed to unblocking all of them, as seen with  <span class="methodname" style="color:#CC7832">{@link Threaded::notify()}</span>).  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.notifyone-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.notifyone-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-threaded.notifyone-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3591">    <p><strong>示例 #1 Notifications and Waiting</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #FF8000">//* cause this thread to wait *<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>            if (!</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done</span><span style="color: #007700">)<br>                </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">wait</span><span style="color: #007700">();<br>        }, </span><span style="color: #9876AA">\$this</span><span style="color: #007700">);<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #FF8000">//* send notification to the waiting thread *<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">notifyOne</span><span style="color: #007700">();<br>}, </span><span style="color: #9876AA">\$my</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">join</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 3.0.0)<br/>
     * Send notification to the referenced object. This unblocks at least one
     * of the blocked threads (as opposed to unblocking all of them, as seen with
     * Threaded::notify()).
     * @link https://secure.php.net/manual/en/threaded.notifyone.php
     * @return bool <p>A boolean indication of success</p>
     */
    public function notifyOne() {}

    /**
 * <div id="threaded.pop" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::pop</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::pop</span> — <span class="dc-title">操作</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.pop-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::pop</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">  弹出对象属性表中的最后一项数据  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.pop-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.pop-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  对象属性表中最后一项数据  </p> </div>  <div class="refsect1 examples" id="refsect1-threaded.pop-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3592">    <p><strong>示例 #1 弹出对象属性表中的最后一项数据</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$safe </span><span style="color: #007700">= new </span><span style="color: #9876AA">Threaded</span><span style="color: #007700">();<br><br>while (</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">) &lt; </span><span style="color: #9876AA">10</span><span style="color: #007700">)<br>    </span><span style="color: #9876AA">\$safe</span><span style="color: #007700">[] = </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pop</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">int(9)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Pops an item from the objects property table
     * @link https://secure.php.net/manual/en/threaded.pop.php
     * @return mixed <p>The last item from the objects property table</p>
     */
    public function pop() {}

    /**
 * <div id="threaded.run" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::run</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::run</span> — <span class="dc-title">执行</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.run-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::run</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   如果需要在多线程环境下执行代码，必须实现本方法  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.run-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.run-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   无返回值。即使代码中 run 方法有返回值，也会被忽略  </p> </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * The programmer should always implement the run method for objects
     * that are intended for execution.
     * @link https://secure.php.net/manual/en/threaded.run.php
     * @return void
     */
    public function run() {}

    /**
 * <div id="threaded.shift" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::shift</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::shift</span> — <span class="dc-title">Manipulation</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.shift-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::shift</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span></div>  <p class="para rdfs-comment">   弹出对象属性表中第一项数据  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.shift-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.shift-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  对象属性表中的第一项数据  </p> </div>  <div class="refsect1 examples" id="refsect1-threaded.shift-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3593">    <p><strong>示例 #1 弹出对象属性表中第一项数据</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$safe </span><span style="color: #007700">= new </span><span style="color: #9876AA">Threaded</span><span style="color: #007700">();<br><br>while (</span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">) &lt; </span><span style="color: #9876AA">10</span><span style="color: #007700">)<br>    </span><span style="color: #9876AA">\$safe</span><span style="color: #007700">[] = </span><span style="color: #9876AA">count</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$safe</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">shift</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">int(0)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Shifts an item from the objects property table
     * @link https://secure.php.net/manual/en/threaded.shift.php
     * @return mixed <p>The first item from the objects property table</p>
     */
    public function shift() {}

    /**
 * <div id="threaded.synchronized" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::synchronized</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::synchronized</span> — <span class="dc-title">同步控制</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.synchronized-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::synchronized</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span> <span class="parameter" style="color:#3A95FF">\$block</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   在发起调用的线程上下文中获取对象同步锁，然后同步执行代码块  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.synchronized-parameters">  <h3 class="title">参数</h3>   <dl>       <dt><span class="parameter" style="color:#3A95FF">block</span></dt>    <dd>     <p class="para">  要执行的代码块     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">args</span></dt>    <dd>     <p class="para">      传送给代码块的不定长参数     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.synchronized-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  代码块的返回值  </p> </div> <div class="refsect1 examples" id="refsect1-threaded.synchronized-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3594">    <p><strong>示例 #1 同步</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>            if (!</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done</span><span style="color: #007700">)<br>                </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">wait</span><span style="color: #007700">();<br>        }, </span><span style="color: #9876AA">\$this</span><span style="color: #007700">);<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">notify</span><span style="color: #007700">();<br>}, </span><span style="color: #9876AA">\$my</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">join</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Executes the block while retaining the referenced objects
     * synchronization lock for the calling context
     * @link https://secure.php.net/manual/en/threaded.synchronized.php
     * @param Closure $block <p>The block of code to execute</p>
     * @param mixed ...$_ [optional] <p>Variable length list of arguments
     * to use as function arguments to the block</p>
     * @return mixed <p>The return value from the block</p>
     */
    public function synchronized(Closure $block, ...$_) {}

    /**
 * <div id="threaded.wait" class="refentry"> <div class="refnamediv">  <h1 class="refname">Threaded::wait</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Threaded::wait</span> — <span class="dc-title">Synchronization</span></p> </div> <div class="refsect1 description" id="refsect1-threaded.wait-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Threaded::wait</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$timeout</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   让发起调用的线程上下文进入等待状态，直到收到其他线程的唤醒通知  </p> </div> <div class="refsect1 parameters" id="refsect1-threaded.wait-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">timeout</span></dt>    <dd>     <p class="para">  可选参数，等待时间，以微秒计     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-threaded.wait-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-threaded.wait-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3595">    <p><strong>示例 #1 等待和唤醒</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #FF8000">//* 让本线程进入等待状态 *<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>            if (!</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done</span><span style="color: #007700">)<br>                </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">wait</span><span style="color: #007700">();<br>        }, </span><span style="color: #9876AA">\$this</span><span style="color: #007700">);<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #FF8000">//* 向处于等待状态的线程发送唤醒通知 *<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">notify</span><span style="color: #007700">();<br>}, </span><span style="color: #9876AA">\$my</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">join</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Will cause the calling context to wait for notification from the
     * referenced object
     * @link https://secure.php.net/manual/en/threaded.wait.php
     * @param int $timeout [optional] <p>An optional timeout in microseconds</p>
     * @return bool <p>A boolean indication of success</p>
     */
    public function wait(int $timeout = 0) {}

    /**
     * @inheritdoc
     * @see ArrayAccess::offsetExists()
     */
    public function offsetExists($offset) {}

    /**
     * @inheritdoc
     * @see ArrayAccess::offsetGet()
     */
    public function offsetGet($offset) {}

    /**
     * @inheritdoc
     * @see ArrayAccess::offsetSet()
     */
    public function offsetSet($offset, $value) {}

    /**
     * @inheritdoc
     * @see ArrayAccess::offsetUnset()
     */
    public function offsetUnset($offset) {}
}

/**
 * <div id="class.thread" class="reference"> <h1 class="title">Thread 类</h1>    <div class="partintro"><p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p>  <div class="section" id="thread.intro">   <h2 class="title">简介</h2>   <p class="para">  当调用 Thread 对象的 start 方法时，该对象的 run 方法中的代码将在独立线程中并行执行。   </p>   <p class="para">  run 方法中的代码执行完毕之后，独立线程立即退出，并且等待合适的时机由创建者线程加入（join）。      </p>   <div class="warning"><strong class="warning">警告</strong>   <p class="para">  依赖于引擎本身的机制检测何时加入线程可能引发非预期的行为，程序员应该尽可能的显式控制线程加入的时机。     </p>   </div>  </div>  <div class="section" id="thread.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Thread</strong>     </span>          <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.threaded.php" class="classname">Threaded</a>     </span>          <span class="oointerface"><span class="modifier">implements</span>        <a href="https://php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span><span class="oointerface">,  <a href="https://php.net/manual/zh/class.traversable.php" class="interfacename">Traversable</a></span><span class="oointerface">,  <a href="https://php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span> {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.getcreatorid.php" class="methodname" style="color:#CC7832">getCreatorId</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.getcurrentthread.php" class="methodname" style="color:#CC7832">getCurrentThread</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.thread.php" class="type Thread" style="color:#EAB766">Thread</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.getcurrentthreadid.php" class="methodname" style="color:#CC7832">getCurrentThreadId</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.getthreadid.php" class="methodname" style="color:#CC7832">getThreadId</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.isjoined.php" class="methodname" style="color:#CC7832">isJoined</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.isstarted.php" class="methodname" style="color:#CC7832">isStarted</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.join.php" class="methodname" style="color:#CC7832">join</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/thread.start.php" class="methodname" style="color:#CC7832">start</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::chunk}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$size</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$preserve</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::count}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::extend}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::isRunning}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::isTerminated}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832">{@link Threaded::merge}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$overwrite</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::notify}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::notifyOne}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::pop}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::run}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::shift}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::synchronized}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span> <span class="parameter" style="color:#3A95FF">\$block</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::wait}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$timeout</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Thread::getCreatorId} — 识别</li><li>{@link Thread::getCurrentThread} — 识别</li><li>{@link Thread::getCurrentThreadId} — 识别</li><li>{@link Thread::getThreadId} — 识别</li><li>{@link Thread::isJoined} — 状态监测</li><li>{@link Thread::isStarted} — 状态检测</li><li>{@link Thread::join} — 同步</li><li>{@link Thread::start} — 执行</li></ul></div>
 * 
 * (PECL pthreads &gt;= 2.0.0)<br/>
 * When the start method of a Thread is invoked, the run method code will be
 * executed in separate Thread, in parallel.<br/>
 * After the run method is executed the Thread will exit immediately, it will
 * be joined with the creating Thread at the appropriate time.
 *
 * @link https://secure.php.net/manual/en/class.thread.php
 */
class Thread extends Threaded implements Countable, Traversable, ArrayAccess
{
    /**
 * <div id="thread.getcreatorid" class="refentry"> <div class="refnamediv">  <h1 class="refname">Thread::getCreatorId</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Thread::getCreatorId</span> — <span class="dc-title">识别</span></p> </div> <div class="refsect1 description" id="refsect1-thread.getcreatorid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Thread::getCreatorId</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   返回创建当前线程的线程ID。  </p> </div> <div class="refsect1 parameters" id="refsect1-thread.getcreatorid-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-thread.getcreatorid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  线程ID，数字格式  </p> </div> <div class="refsect1 examples" id="refsect1-thread.getcreatorid-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3596">    <p><strong>示例 #1 返回创建线程的线程或进程ID</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s created by Thread #%lu\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">__CLASS__</span><span style="color: #007700">, </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCreatorId</span><span style="color: #007700">());<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">My&nbsp;created&nbsp;by&nbsp;Thread&nbsp;#123456778899</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Will return the identity of the Thread that created the referenced Thread
     * @link https://secure.php.net/manual/en/thread.getcreatorid.php
     * @return int <p>A numeric identity</p>
     */
    public function getCreatorId() {}

    /**
 * <div id="thread.getcurrentthread" class="refentry"> <div class="refnamediv">  <h1 class="refname">Thread::getCurrentThread</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Thread::getCurrentThread</span> — <span class="dc-title">识别</span></p> </div> <div class="refsect1 description" id="refsect1-thread.getcurrentthread-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Thread::getCurrentThread</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.thread.php" class="type Thread" style="color:#EAB766">Thread</a></span></div>  <p class="para rdfs-comment">   获取当前执行线程的引用。  </p> </div> <div class="refsect1 parameters" id="refsect1-thread.getcurrentthread-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-thread.getcurrentthread-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   表示当前执行线程的对象。  </p> </div>  <div class="refsect1 examples" id="refsect1-thread.getcurrentthread-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3597">    <p><strong>示例 #1 获取当前执行线程</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">Thread</span><span style="color: #007700">::</span><span style="color: #9876AA">getCurrentThread</span><span style="color: #007700">());<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(My)#2&nbsp;(0)&nbsp;{<br>}</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Return a reference to the currently executing Thread
     * @link https://secure.php.net/manual/en/thread.getcurrentthread.php
     * @return Thread <p>An object representing the currently executing Thread</p>
     */
    public static function getCurrentThread() {}

    /**
 * <div id="thread.getcurrentthreadid" class="refentry"> <div class="refnamediv">  <h1 class="refname">Thread::getCurrentThreadId</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Thread::getCurrentThreadId</span> — <span class="dc-title">识别</span></p> </div> <div class="refsect1 description" id="refsect1-thread.getcurrentthreadid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>Thread::getCurrentThreadId</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   返回当前执行线程的ID  </p> </div> <div class="refsect1 parameters" id="refsect1-thread.getcurrentthreadid-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-thread.getcurrentthreadid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  线程ID，数字格式  </p> </div> <div class="refsect1 examples" id="refsect1-thread.getcurrentthreadid-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3598">    <p><strong>示例 #1 返回当前执行线程的ID</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s is Thread #%lu\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">__CLASS__</span><span style="color: #007700">, </span><span style="color: #9876AA">Thread</span><span style="color: #007700">::</span><span style="color: #9876AA">getCurrentThreadId</span><span style="color: #007700">());<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">My&nbsp;is&nbsp;Thread&nbsp;#123456778899</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Will return the identity of the currently executing Thread
     * @link https://secure.php.net/manual/en/thread.getcurrentthreadid.php
     * @return int <p>A numeric identity</p>
     */
    public static function getCurrentThreadId() {}

    /**
 * <div id="thread.getthreadid" class="refentry"> <div class="refnamediv">  <h1 class="refname">Thread::getThreadId</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Thread::getThreadId</span> — <span class="dc-title">识别</span></p> </div> <div class="refsect1 description" id="refsect1-thread.getthreadid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Thread::getThreadId</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   返回引用线程的ID  </p> </div> <div class="refsect1 parameters" id="refsect1-thread.getthreadid-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-thread.getthreadid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  线程ID，数字格式  </p> </div> <div class="refsect1 examples" id="refsect1-thread.getthreadid-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3599">    <p><strong>示例 #1 返回引用线程的ID</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%s is Thread #%lu\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">__CLASS__</span><span style="color: #007700">, </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getThreadId</span><span style="color: #007700">());<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">My&nbsp;is&nbsp;Thread&nbsp;#123456778899</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Will return the identity of the referenced Thread
     * @link https://secure.php.net/manual/en/thread.getthreadid.php
     * @return int <p>A numeric identity</p>
     */
    public function getThreadId() {}

    /**
 * <div id="thread.isjoined" class="refentry"> <div class="refnamediv">  <h1 class="refname">Thread::isJoined</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Thread::isJoined</span> — <span class="dc-title">状态监测</span></p> </div> <div class="refsect1 description" id="refsect1-thread.isjoined-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span><span class="methodname" style="color:#CC7832"><strong>Thread::isJoined</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   线程是否已经被加入（join）  </p> </div> <div class="refsect1 parameters" id="refsect1-thread.isjoined-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-thread.isjoined-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-thread.isjoined-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3600">    <p><strong>示例 #1 检测线程状态</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>            if (!</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done</span><span style="color: #007700">)<br>                </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">wait</span><span style="color: #007700">();<br>        }, </span><span style="color: #9876AA">\$this</span><span style="color: #007700">);<br>    }<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isJoined</span><span style="color: #007700">());<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">synchronized</span><span style="color: #007700">(function(</span><span style="color: #9876AA">\$thread</span><span style="color: #007700">){<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">done </span><span style="color: #007700">= </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$thread</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">notify</span><span style="color: #007700">();<br>}, </span><span style="color: #9876AA">\$my</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Tell if the referenced Thread has been joined
     * @link https://secure.php.net/manual/en/thread.isjoined.php
     * @return bool <p>A boolean indication of state</p>
     */
    public function isJoined() {}

    /**
 * <div id="thread.isstarted" class="refentry"> <div class="refnamediv">  <h1 class="refname">Thread::isStarted</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Thread::isStarted</span> — <span class="dc-title">状态检测</span></p> </div> <div class="refsect1 description" id="refsect1-thread.isstarted-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span><span class="methodname" style="color:#CC7832"><strong>Thread::isStarted</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   线程是否开始执行  </p> </div> <div class="refsect1 parameters" id="refsect1-thread.isstarted-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-thread.isstarted-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div>  <div class="refsect1 examples" id="refsect1-thread.isstarted-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3601">    <p><strong>示例 #1 监测线程是否开始执行</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$worker </span><span style="color: #007700">= new </span><span style="color: #9876AA">Worker</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isStarted</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Tell if the referenced Thread was started
     * @link https://secure.php.net/manual/en/thread.isstarted.php
     * @return bool <p>A boolean indication of state</p>
     */
    public function isStarted() {}

    /**
 * <div id="thread.join" class="refentry"> <div class="refnamediv">  <h1 class="refname">Thread::join</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Thread::join</span> — <span class="dc-title">同步</span></p> </div> <div class="refsect1 description" id="refsect1-thread.join-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span><span class="methodname" style="color:#CC7832"><strong>Thread::join</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   让当前执行上下文等待被引用线程执行完毕  </p> </div> <div class="refsect1 parameters" id="refsect1-thread.join-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-thread.join-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-thread.join-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3602">    <p><strong>示例 #1 加入线程</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #FF8000">// ... <br>    </span><span style="color: #007700">}<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #FF8000">// ... <br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">join</span><span style="color: #007700">());<br></span><span style="color: #FF8000">// ... <br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Causes the calling context to wait for the referenced Thread to finish executing
     * @link https://secure.php.net/manual/en/thread.join.php
     * @return bool <p>A boolean indication of success</p>
     */
    public function join() {}

    /**
 * <div id="thread.start" class="refentry"> <div class="refnamediv">  <h1 class="refname">Thread::start</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Thread::start</span> — <span class="dc-title">执行</span></p> </div> <div class="refsect1 description" id="refsect1-thread.start-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Thread::start</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   在独立线程中执行 run 方法  </p> </div> <div class="refsect1 parameters" id="refsect1-thread.start-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">options</span></dt>    <dd>     <p class="para">      可选参数，用来控制线程继承。默认值为 PTHREADS_INHERIT_ALL     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-thread.start-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-thread.start-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3603">    <p><strong>示例 #1 开始线程</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">My </span><span style="color: #007700">extends </span><span style="color: #9876AA">Thread </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">run</span><span style="color: #007700">() {<br>        </span><span style="color: #FF8000">//* ... *<br>    </span><span style="color: #007700">}<br>}<br></span><span style="color: #9876AA">\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">My</span><span style="color: #007700">();<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Will start a new Thread to execute the implemented run method
     * @link https://secure.php.net/manual/en/thread.start.php
     * @param int $options [optional] <p>An optional mask of inheritance
     * constants, by default <b>{@link PTHREADS_INHERIT_ALL}</b></p>
     * @return bool <p>A boolean indication of success</p>
     */
    public function start(int $options = PTHREADS_INHERIT_ALL) {}
}

/**
 * <div id="class.worker" class="reference"> <h1 class="title">Worker 类</h1>  <div class="partintro"><p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p>  <div class="section" id="worker.intro">   <h2 class="title">简介</h2>   <p class="para">    Worker 是一个具有持久化上下文的线程对象，通常用来在多个线程中使用。   </p>   <p class="para">    当一个 Worker 对象开始之后，会执行它的 run 方法，但是即使 run 方法执行完毕，线程本身也不会消亡，除非遇到以下情况：   </p>   <ul class="itemizedlist">    <li class="listitem">    <p class="para">Worker 对象超出作用范围（没有指向它的引用了）</p>    </li>    <li class="listitem">    <p class="para">代码调用了 Worker 对象的 shutdown 方法</p>    </li>    <li class="listitem">    <p class="para">整个脚本终止了</p>    </li>   </ul>   <p class="para">    这意味着程序员可以在程序执行过程中重用这个线程上下文：    在 Worker 对象的栈中添加对象会激活 Worker 对象执行被加入对象的 run 方法。   </p>  </div>  <div class="section" id="worker.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Worker</strong>     </span>          <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.thread.php" class="classname">Thread</a>     </span>          <span class="oointerface"><span class="modifier">implements</span>        <a href="https://php.net/manual/zh/class.traversable.php" class="interfacename">Traversable</a></span><span class="oointerface">,  <a href="https://php.net/manual/zh/class.countable.php" class="interfacename">Countable</a></span><span class="oointerface">,  <a href="https://php.net/manual/zh/class.arrayaccess.php" class="interfacename">ArrayAccess</a></span> {</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/worker.collect.php" class="methodname" style="color:#CC7832">collect</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type Callable" style="color:#EAB766">Callable</a></span> <span class="parameter" style="color:#3A95FF">\$collector</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/worker.getstacked.php" class="methodname" style="color:#CC7832">getStacked</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/worker.isshutdown.php" class="methodname" style="color:#CC7832">isShutdown</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/worker.shutdown.php" class="methodname" style="color:#CC7832">shutdown</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/worker.stack.php" class="methodname" style="color:#CC7832">stack</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.threaded.php" class="type Threaded" style="color:#EAB766">Threaded</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$work</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/worker.unstack.php" class="methodname" style="color:#CC7832">unstack</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Thread::getCreatorId}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832">{@link Thread::getCurrentThread}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.thread.php" class="type Thread" style="color:#EAB766">Thread</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832">{@link Thread::getCurrentThreadId}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Thread::getThreadId}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832">{@link Thread::isJoined}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832">{@link Thread::isStarted}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832">{@link Thread::join}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Thread::start}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link Worker::collect} — Collect references to completed tasks</li><li>{@link Worker::getStacked} — 获取剩余的栈大小</li><li>{@link Worker::isShutdown} — 状态检测</li><li>{@link Worker::shutdown} — 关闭 Worker</li><li>{@link Worker::stack} — 将要执行的任务入栈</li><li>{@link Worker::unstack} — 将要执行的任务出栈</li></ul></div>
 * 
 * (PECL pthreads &gt;= 2.0.0)<br/>
 * Worker Threads have a persistent context, as such should be used over
 * Threads in most cases.<br/>
 * When a Worker is started, the run method will be executed, but the Thread will
 * not leave until one of the following conditions are met:<br/><ul>
 * <li>the Worker goes out of scope (no more references remain)</li>
 * <li>the programmer calls shutdown</li>
 * <li>the script dies</li></ul>
 * This means the programmer can reuse the context throughout execution; placing
 * objects on the stack of the Worker will cause the Worker to execute the stacked
 * objects run method.
 * @link https://secure.php.net/manual/en/class.worker.php
 */
class Worker extends Thread implements Traversable, Countable, ArrayAccess
{
    /**
 * <div id="worker.collect" class="refentry"> <div class="refnamediv">  <h1 class="refname">Worker::collect</h1>  <p class="verinfo">(PECL pthreads &gt;= 3.0.0)</p><p class="refpurpose"><span class="refname">Worker::collect</span> — <span class="dc-title">Collect references to completed tasks</span></p> </div> <div class="refsect1 description" id="refsect1-worker.collect-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Worker::collect</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type Callable" style="color:#EAB766">Callable</a></span> <span class="parameter" style="color:#3A95FF">\$collector</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   Allows the worker to collect references determined to be garbage by the   optionally given collector.  </p> </div> <div class="refsect1 parameters" id="refsect1-worker.collect-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">collector</span></dt>    <dd>     <p class="para">      A Callable collector that returns a boolean on whether the task can be      collected or not. Only in rare cases should a custom collector need to      be used.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-worker.collect-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The number of remaining tasks on the worker's stack to be collected.  </p> </div> <div class="refsect1 examples" id="refsect1-worker.collect-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3604">    <p><strong>示例 #1 A basic example of <span class="methodname" style="color:#CC7832"><strong>Worker::collect()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$worker </span><span style="color: #007700">= new </span><span style="color: #9876AA">Worker</span><span style="color: #007700">();<br><br>echo </span><span style="color: #DD0000">"There are currently </span><span style="color: #007700">{</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">collect</span><span style="color: #007700">()}</span><span style="color: #DD0000"> tasks on the stack to be collected\n"</span><span style="color: #007700">;<br><br>for (</span><span style="color: #9876AA">\$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">\$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">15</span><span style="color: #007700">; ++</span><span style="color: #9876AA">\$i</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stack</span><span style="color: #007700">(new class extends </span><span style="color: #9876AA">Threaded </span><span style="color: #007700">{});<br>}<br><br>echo </span><span style="color: #DD0000">"There are </span><span style="color: #007700">{</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">collect</span><span style="color: #007700">()}</span><span style="color: #DD0000"> tasks remaining on the stack to be collected\n"</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br><br>while (</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">collect</span><span style="color: #007700">()); </span><span style="color: #FF8000">// blocks until all tasks have finished executing<br><br></span><span style="color: #007700">echo </span><span style="color: #DD0000">"There are now </span><span style="color: #007700">{</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">collect</span><span style="color: #007700">()}</span><span style="color: #DD0000"> tasks on the stack to be collected\n"</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">shutdown</span><span style="color: #007700">();</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">There&nbsp;are&nbsp;currently&nbsp;0&nbsp;tasks&nbsp;on&nbsp;the&nbsp;stack&nbsp;to&nbsp;be&nbsp;collected<br>There&nbsp;are&nbsp;15&nbsp;tasks&nbsp;remaining&nbsp;on&nbsp;the&nbsp;stack&nbsp;to&nbsp;be&nbsp;collected<br>There&nbsp;are&nbsp;now&nbsp;0&nbsp;tasks&nbsp;on&nbsp;the&nbsp;stack&nbsp;to&nbsp;be&nbsp;collected</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 3.0.0)<br/>
     * Allows the worker to collect references determined to be garbage by the
     * optionally given collector
     * @link https://secure.php.net/manual/en/worker.collect.php
     * @param null|callable $collector [optional] <p>A Callable collector that returns
     * a boolean on whether the task can be collected or not. Only in rare cases
     * should a custom collector need to be used</p>
     * @return int <p>The number of remaining tasks on the worker's stack to be
     * collected</p>
     */
    public function collect(?callable $collector = null) {}

    /**
 * <div id="worker.getstacked" class="refentry"> <div class="refnamediv">  <h1 class="refname">Worker::getStacked</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Worker::getStacked</span> — <span class="dc-title">获取剩余的栈大小</span></p> </div> <div class="refsect1 description" id="refsect1-worker.getstacked-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Worker::getStacked</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   返回栈中剩余的任务数量  </p> </div> <div class="refsect1 parameters" id="refsect1-worker.getstacked-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-worker.getstacked-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  返回 worker 中等待执行的任务数量  </p> </div> <div class="refsect1 examples" id="refsect1-worker.getstacked-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3605">    <p><strong>示例 #1 <span class="classname"><strong class="classname">Worker::getStacked</strong></span> 基本示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$worker </span><span style="color: #007700">= new </span><span style="color: #9876AA">Worker</span><span style="color: #007700">();<br><br>for (</span><span style="color: #9876AA">\$i </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">\$i </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">5</span><span style="color: #007700">; ++</span><span style="color: #9876AA">\$i</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stack</span><span style="color: #007700">(new class extends </span><span style="color: #9876AA">Threaded </span><span style="color: #007700">{});<br>}<br><br>echo </span><span style="color: #DD0000">"There are </span><span style="color: #007700">{</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStacked</span><span style="color: #007700">()}</span><span style="color: #DD0000"> stacked tasks\n"</span><span style="color: #007700">;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">There&nbsp;are&nbsp;5&nbsp;stacked&nbsp;tasks</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Returns the number of tasks left on the stack
     * @link https://secure.php.net/manual/en/worker.getstacked.php
     * @return int <p>Returns the number of tasks currently waiting to be
     * executed by the worker</p>
     */
    public function getStacked() {}

    /**
 * <div id="worker.isshutdown" class="refentry"> <div class="refnamediv">  <h1 class="refname">Worker::isShutdown</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Worker::isShutdown</span> — <span class="dc-title">状态检测</span></p> </div> <div class="refsect1 description" id="refsect1-worker.isshutdown-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Worker::isShutdown</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Worker 对象是否被关闭  </p> </div> <div class="refsect1 parameters" id="refsect1-worker.isshutdown-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-worker.isshutdown-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  布尔值，表示 worker 是否已经被关闭  </p> </div> <div class="refsect1 examples" id="refsect1-worker.isshutdown-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3606">    <p><strong>示例 #1 检测 Worker 对象状态</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$worker </span><span style="color: #007700">= new </span><span style="color: #9876AA">Worker</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isShutdown</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">shutdown</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isShutdown</span><span style="color: #007700">());</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Whether the worker has been shutdown or not
     * @link https://secure.php.net/manual/en/worker.isshutdown.php
     * @return bool <p>Returns whether the worker has been shutdown or not</p>
     */
    public function isShutdown() {}

    /**
 * <div id="worker.shutdown" class="refentry"> <div class="refnamediv">  <h1 class="refname">Worker::shutdown</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Worker::shutdown</span> — <span class="dc-title">关闭 Worker </span></p> </div> <div class="refsect1 description" id="refsect1-worker.shutdown-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Worker::shutdown</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   在执行完已入栈对象之后，关闭这个 Worker 对象  </p> </div> <div class="refsect1 parameters" id="refsect1-worker.shutdown-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-worker.shutdown-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-worker.shutdown-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3607">    <p><strong>示例 #1 关闭 Worker</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">Worker</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">start</span><span style="color: #007700">();<br></span><span style="color: #FF8000">// 入栈和执行任务 <br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">shutdown</span><span style="color: #007700">());</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Shuts down the Worker after executing all of the stacked tasks
     * @link https://secure.php.net/manual/en/worker.shutdown.php
     * @return bool <p>Whether the worker was successfully shutdown or not</p>
     */
    public function shutdown() {}

    /**
 * <div id="worker.stack" class="refentry"> <div class="refnamediv">  <h1 class="refname">Worker::stack</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Worker::stack</span> — <span class="dc-title">将要执行的任务入栈</span></p> </div> <div class="refsect1 description" id="refsect1-worker.stack-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Worker::stack</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.threaded.php" class="type Threaded" style="color:#EAB766">Threaded</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$work</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   将要执行的任务入栈到 Worker 对象  </p> </div> <div class="refsect1 parameters" id="refsect1-worker.stack-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">work</span></dt>    <dd>     <p class="para">      要被 Worker 执行的 <span class="classname"><a href="https://php.net/manual/zh/class.threaded.php" class="classname">Threaded</a></span> 派生对象     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-worker.stack-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  入栈之后，Worker 对象栈的大小。  </p> </div> <div class="refsect1 examples" id="refsect1-worker.stack-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3608">    <p><strong>示例 #1 向 Worker 中入栈任务并执行</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$worker </span><span style="color: #007700">= new </span><span style="color: #9876AA">Worker</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$work </span><span style="color: #007700">= new class extends </span><span style="color: #9876AA">Threaded </span><span style="color: #007700">{};<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$worker</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stack</span><span style="color: #007700">(</span><span style="color: #9876AA">\$work</span><span style="color: #007700">));</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">int(1)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Appends the new work to the stack of the referenced worker
     * @link https://secure.php.net/manual/en/worker.stack.php
     * @param Threaded $work <p>A Threaded object to be executed by the Worker</p>
     * @return int <p>The new size of the stack</p>
     */
    public function stack(Threaded $work) {}

    /**
 * <div id="worker.unstack" class="refentry"> <div class="refnamediv">  <h1 class="refname">Worker::unstack</h1>  <p class="verinfo">(PECL pthreads &gt;= 2.0.0)</p><p class="refpurpose"><span class="refname">Worker::unstack</span> — <span class="dc-title">将要执行的任务出栈</span></p> </div> <div class="refsect1 description" id="refsect1-worker.unstack-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>Worker::unstack</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   把 Worker 栈顶的（最老的那个）任务从栈中移除。  </p> </div> <div class="refsect1 parameters" id="refsect1-worker.unstack-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-worker.unstack-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  出栈之后，Worker 栈的大小。  </p> </div>  <div class="refsect1 changelog" id="refsect1-worker.unstack-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>PECL pthreads 3.0.0</td>       <td>        移除了要出栈的任务参数。        现在只能移除栈顶元素。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-worker.unstack-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3609">    <p><strong>示例 #1 从 Worker 栈中移除对象</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$my </span><span style="color: #007700">= new </span><span style="color: #9876AA">Worker</span><span style="color: #007700">();<br></span><span style="color: #9876AA">\$work </span><span style="color: #007700">= new class extends </span><span style="color: #9876AA">Threaded </span><span style="color: #007700">{};<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">stack</span><span style="color: #007700">(</span><span style="color: #9876AA">\$work</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$my</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">unstack</span><span style="color: #007700">());</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">int(1)<br>int(0)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * (PECL pthreads &gt;= 2.0.0)<br/>
     * Removes the first task (the oldest one) in the stack
     * @link https://secure.php.net/manual/en/worker.unstack.php
     * @return Threaded|null <p>The item removed from the stack</p>
     */
    public function unstack() {}
}

/**
 * (PECL pthreads &gt;= 2.0.8)<br/>
 * Represents a garbage-collectable object.
 * @link https://secure.php.net/manual/en/class.collectable.php
 */
interface Collectable
{
    /**
     * (PECL pthreads &gt;= 2.0.8)<br/>
     * Can be called in {@link Pool::collect()} to determine if this object is garbage
     * @link https://secure.php.net/manual/en/collectable.isgarbage.php
     * @return bool <p>Whether this object is garbage or not</p>
     */
    public function isGarbage(): bool;
}

/**
 * <div id="class.volatile" class="reference"> <h1 class="title">The Volatile class</h1>    <div class="partintro"><p class="verinfo">(PECL pthreads &gt;= 3.0.0)</p>  <div class="section" id="volatile.intro">   <h2 class="title">简介</h2>   <p class="para">    The <span class="classname"><strong class="classname">Volatile</strong></span> class is new to pthreads v3. Its    introduction is a consequence of the new immutability semantics of    <span class="classname"><a href="https://php.net/manual/zh/class.threaded.php" class="classname">Threaded</a></span> members of <span class="classname"><a href="https://php.net/manual/zh/class.threaded.php" class="classname">Threaded</a></span>    classes. The <span class="classname"><strong class="classname">Volatile</strong></span> class enables for mutability    of its <span class="classname"><a href="https://php.net/manual/zh/class.threaded.php" class="classname">Threaded</a></span> members, and is also used to store    PHP arrays in <span class="classname"><a href="https://php.net/manual/zh/class.threaded.php" class="classname">Threaded</a></span> contexts.   </p>  </div>  <div class="section" id="volatile.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">Volatile</strong>     </span>          <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.threaded.php" class="classname">Threaded</a>     </span>          <span class="oointerface"><span class="modifier">implements</span>        <a href="https://php.net/manual/zh/class.collectable.php" class="interfacename">Collectable</a></span><span class="oointerface">,  <a href="https://php.net/manual/zh/class.traversable.php" class="interfacename">Traversable</a></span> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::chunk}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$size</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$preserve</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::count}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::extend}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::isRunning}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::isTerminated}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span><span class="methodname" style="color:#CC7832">{@link Threaded::merge}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$from</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$overwrite</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::notify}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::notifyOne}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::pop}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::run}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::shift}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type boolean" style="color:#EAB766">boolean</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::synchronized}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span> <span class="parameter" style="color:#3A95FF">\$block</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Threaded::wait}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$timeout</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>   }</div>  </div>  <div class="section" id="volatile.examples">   <h2 class="title">示例</h2>   <div class="example" id="volatile.example.immutable">    <p><strong>示例 #1 New immutability semantics of Threaded</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">Task </span><span style="color: #007700">extends </span><span style="color: #9876AA">Threaded<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data </span><span style="color: #007700">= new </span><span style="color: #9876AA">Threaded</span><span style="color: #007700">();<br><br>        </span><span style="color: #FF8000">// attempt to overwrite a Threaded property of a Threaded class (invalid)<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">();<br>    }<br>}<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">((new </span><span style="color: #9876AA">Task</span><span style="color: #007700">())-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">);</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="cdata"><blockquote style="border:1px gray solid;"><br>RuntimeException:&nbsp;Threaded&nbsp;members&nbsp;previously&nbsp;set&nbsp;to&nbsp;Threaded&nbsp;objects&nbsp;are&nbsp;immutable,&nbsp;cannot&nbsp;overwrite&nbsp;data&nbsp;in&nbsp;%s:%d<br></blockquote></div>    </div>   </div>   <div class="example" id="volatile.example.basic">    <p><strong>示例 #2 Volatile use-case</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">Task </span><span style="color: #007700">extends </span><span style="color: #9876AA">Volatile<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data </span><span style="color: #007700">= new </span><span style="color: #9876AA">Threaded</span><span style="color: #007700">();<br><br>        </span><span style="color: #FF8000">// attempt to overwrite a Threaded property of a Volatile class (valid)<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">data </span><span style="color: #007700">= new </span><span style="color: #9876AA">stdClass</span><span style="color: #007700">();<br>    }<br>}<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">((new </span><span style="color: #9876AA">Task</span><span style="color: #007700">())-&gt;</span><span style="color: #9876AA">data</span><span style="color: #007700">);</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="cdata"><blockquote style="border:1px gray solid;"><br>object(stdClass)#3&nbsp;(0)&nbsp;{<br>}<br></blockquote></div>    </div>   </div>  </div> </div></div>
 * 
 * (PECL pthreads &gt;= 3.0.0)<br/>
 * The Volatile class is new to pthreads v3. Its introduction is a consequence of
 * the new immutability semantics of Threaded members of Threaded classes. The
 * Volatile class enables for mutability of its Threaded members, and is also
 * used to store PHP arrays in Threaded contexts.
 * @see Threaded
 * @link https://secure.php.net/manual/en/class.volatile.php
 */
class Volatile extends Threaded implements Collectable, Traversable {}
