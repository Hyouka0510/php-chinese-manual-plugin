<?php

use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
* <div id="class.reflectionfunctionabstract" class="reference"> <h1 class="title">ReflectionFunctionAbstract 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p>  <div class="section" id="reflectionfunctionabstract.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname">{@link ReflectionFunction}</span> 的父类，详情请阅读它的描述。   </p>  </div>  <div class="section" id="reflectionfunctionabstract.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">abstract</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionFunctionAbstract</strong></strong>             <span class="modifier">implements</span>      <a href="https://php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionfunctionabstract.php#reflectionfunctionabstract.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.clone.php" class="methodname" style="color:#CC7832">__clone</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getattributes.php" class="methodname" style="color:#CC7832">getAttributes</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getclosurecalledclass.php" class="methodname" style="color:#CC7832">getClosureCalledClass</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getclosurescopeclass.php" class="methodname" style="color:#CC7832">getClosureScopeClass</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getclosurethis.php" class="methodname" style="color:#CC7832">getClosureThis</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getclosureusedvariables.php" class="methodname" style="color:#CC7832">getClosureUsedVariables</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getdoccomment.php" class="methodname" style="color:#CC7832">getDocComment</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getendline.php" class="methodname" style="color:#CC7832">getEndLine</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getextension.php" class="methodname" style="color:#CC7832">getExtension</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getextensionname.php" class="methodname" style="color:#CC7832">getExtensionName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getfilename.php" class="methodname" style="color:#CC7832">getFileName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getnamespacename.php" class="methodname" style="color:#CC7832">getNamespaceName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getnumberofparameters.php" class="methodname" style="color:#CC7832">getNumberOfParameters</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getnumberofrequiredparameters.php" class="methodname" style="color:#CC7832">getNumberOfRequiredParameters</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getparameters.php" class="methodname" style="color:#CC7832">getParameters</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getreturntype.php" class="methodname" style="color:#CC7832">getReturnType</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getshortname.php" class="methodname" style="color:#CC7832">getShortName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getstartline.php" class="methodname" style="color:#CC7832">getStartLine</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.getstaticvariables.php" class="methodname" style="color:#CC7832">getStaticVariables</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.gettentativereturntype.php" class="methodname" style="color:#CC7832">getTentativeReturnType</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.hasreturntype.php" class="methodname" style="color:#CC7832">hasReturnType</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.hastentativereturntype.php" class="methodname" style="color:#CC7832">hasTentativeReturnType</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.innamespace.php" class="methodname" style="color:#CC7832">inNamespace</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.isclosure.php" class="methodname" style="color:#CC7832">isClosure</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.isdeprecated.php" class="methodname" style="color:#CC7832">isDeprecated</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.isgenerator.php" class="methodname" style="color:#CC7832">isGenerator</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.isinternal.php" class="methodname" style="color:#CC7832">isInternal</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectiofunctionabstract.isstatic.php" class="methodname" style="color:#CC7832">isStatic</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.isuserdefined.php" class="methodname" style="color:#CC7832">isUserDefined</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.isvariadic.php" class="methodname" style="color:#CC7832">isVariadic</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.returnsreference.php" class="methodname" style="color:#CC7832">returnsReference</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">abstract</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionfunctionabstract.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div>    <div class="section" id="reflectionfunctionabstract.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionfunctionabstract.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">       函数名。只读，尝试赋值的时候将会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionFunctionAbstract::__clone} — 复制函数</li><li>{@link ReflectionFunctionAbstract::getAttributes} — Gets Attributes</li><li>{@link ReflectionFunctionAbstract::getClosureCalledClass} — Returns the class corresponding to static:: inside a closure</li><li>{@link ReflectionFunctionAbstract::getClosureScopeClass} — Returns the class corresponding to the scope inside a closure</li><li>{@link ReflectionFunctionAbstract::getClosureThis} — 返回闭包内与 $this 对应的对象</li><li>{@link ReflectionFunctionAbstract::getClosureUsedVariables} — Returns an array of the used variables in the Closure</li><li>{@link ReflectionFunctionAbstract::getDocComment} — 获取注释内容</li><li>{@link ReflectionFunctionAbstract::getEndLine} — 获取结束行号</li><li>{@link ReflectionFunctionAbstract::getExtension} — 获取扩展信息</li><li>{@link ReflectionFunctionAbstract::getExtensionName} — 获取扩展名称</li><li>{@link ReflectionFunctionAbstract::getFileName} — 获取文件名称</li><li>{@link ReflectionFunctionAbstract::getName} — 获取函数名称</li><li>{@link ReflectionFunctionAbstract::getNamespaceName} — 获取命名空间</li><li>{@link ReflectionFunctionAbstract::getNumberOfParameters} — 获取参数数目</li><li>{@link ReflectionFunctionAbstract::getNumberOfRequiredParameters} — 获取必须输入参数个数</li><li>{@link ReflectionFunctionAbstract::getParameters} — 获取参数</li><li>{@link ReflectionFunctionAbstract::getReturnType} — Gets the specified return type of a function</li><li>{@link ReflectionFunctionAbstract::getShortName} — 获取函数短名称</li><li>{@link ReflectionFunctionAbstract::getStartLine} — 获取开始行号</li><li>{@link ReflectionFunctionAbstract::getStaticVariables} — 获取静态变量</li><li>{@link ReflectionFunctionAbstract::getTentativeReturnType} — Returns the tentative return type associated with the function</li><li>{@link ReflectionFunctionAbstract::hasReturnType} — Checks if the function has a specified return type</li><li>{@link ReflectionFunctionAbstract::hasTentativeReturnType} — Returns whether the function has a tentative return type</li><li>{@link ReflectionFunctionAbstract::inNamespace} — 检查是否处于命名空间</li><li>{@link ReflectionFunctionAbstract::isClosure} — 检查是否是匿名函数</li><li>{@link ReflectionFunctionAbstract::isDeprecated} — 检查是否已经弃用</li><li>{@link ReflectionFunctionAbstract::isGenerator} — 判断函数是否是一个生成器函数</li><li>{@link ReflectionFunctionAbstract::isInternal} — 判断函数是否是内置函数</li><li>{@link ReflectionFunctionAbstract::isStatic} — 判断函数是否为 static</li><li>{@link ReflectionFunctionAbstract::isUserDefined} — 检查是否是用户定义</li><li>{@link ReflectionFunctionAbstract::isVariadic} — Checks if the function is variadic</li><li>{@link ReflectionFunctionAbstract::returnsReference} — 检查是否返回引用</li><li>{@link ReflectionFunctionAbstract::__toString} — 返回表示 ReflectionFunctionAbstract 对象的字符串</li></ul></div>
*
 * A parent class to <b>ReflectionFunction</b>, read its
 * description for details.
 *
 * @link https://php.net/manual/zh/class.reflectionfunctionabstract.php
 
*/
abstract class ReflectionFunctionAbstract implements Reflector
{
    /**
     * @var string Name of the function, same as calling the {@see ReflectionFunctionAbstract::getName()} method
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    /**
     * Clones function
     *
     * @link https://php.net/manual/en/reflectionfunctionabstract.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clones function
     *
     * @link https://php.net/manual/en/reflectionfunctionabstract.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "8.1")]
    private function __clone(): void {}

/**
* <div id="reflectionfunctionabstract.innamespace" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::inNamespace</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::inNamespace</span> — <span class="dc-title">检查是否处于命名空间</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.innamespace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::inNamespace</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查函数是否在命名空间内定义。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.innamespace-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.innamespace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   在命名空间内返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.innamespace-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNamespaceName()} - 获取命名空间</span></li>    <li><a href="https://php.net/manual/zh/language.namespaces.php" class="link">命名空间</a></li>   </ul>   </div></div>
    *
     * Checks if function in namespace
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.innamespace.php
     * @return bool {@see true} if it's in a namespace, otherwise {@see false}
     
    #[TentativeType]
*/
    public function inNamespace(): bool {}

/**
* <div id="reflectionfunctionabstract.isclosure" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::isClosure</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::isClosure</span> — <span class="dc-title">检查是否是匿名函数</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.isclosure-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::isClosure</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查反射函数是否是 <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.isclosure-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.isclosure-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果是 <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span> 返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div><div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.isclosure-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5538">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::isClosure()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 非匿名函数<br></span><span style="color: #9876AA">$function1 </span><span style="color: #007700">= </span><span style="color: #DD0000">'str_replace'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">$reflection1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$function1</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isClosure</span><span style="color: #007700">());<br><br></span><span style="color: #FF8000">// 匿名函数<br></span><span style="color: #9876AA">$function2 </span><span style="color: #007700">= function () {};<br></span><span style="color: #9876AA">$reflection2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$function2</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isClosure</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.isclosure-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isGenerator()} - 判断函数是否是一个生成器函数</span></li>   </ul>   </div></div>
    *
     * Checks if closure
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.isclosure.php
     * @return bool {@see true} if it's a closure, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isClosure(): bool {}

/**
* <div id="reflectionfunctionabstract.isdeprecated" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::isDeprecated</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::isDeprecated</span> — <span class="dc-title">检查是否已经弃用</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.isdeprecated-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::isDeprecated</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查函数是否已经被弃用  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.isdeprecated-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.isdeprecated-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   弃用返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.isdeprecated-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5539">    <p><strong>示例 #1      <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::isDeprecated()</strong></span> 示例    </strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>$rf </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'ereg'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rf</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isDeprecated</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.isdeprecated-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="classname"><a href="https://php.net/manual/zh/class.deprecated.php" class="classname">Deprecated</a></span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getDocComment()} - 获取注释内容</span></li>   </ul>   </div></div>
    *
     * Checks if deprecated
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.isdeprecated.php
     * @return bool {@see true} if it's deprecated, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isDeprecated(): bool {}

/**
* <div id="reflectionfunctionabstract.isinternal" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::isInternal</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::isInternal</span> — <span class="dc-title">判断函数是否是内置函数</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.isinternal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::isInternal</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   判断函数是否是内置函数，而非用户自定义。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.isinternal-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.isinternal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   内置函数返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.isinternal-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isUserDefined()} - 检查是否是用户定义</span></li>   </ul>   </div></div>
    *
     * Checks if is internal
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.isinternal.php
     * @return bool {@see true} if it's internal, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isInternal(): bool {}

/**
* <div id="reflectionfunctionabstract.isuserdefined" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::isUserDefined</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::isUserDefined</span> — <span class="dc-title">检查是否是用户定义</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.isuserdefined-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::isUserDefined</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查函数是否是用户自定义，也就是说不是 PHP 自己内置函数。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.isuserdefined-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.isuserdefined-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   用户自定义函数返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.isuserdefined-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isInternal()} - 判断函数是否是内置函数</span></li>   </ul>   </div></div>
    *
     * Checks if user defined
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.isuserdefined.php
     * @return bool {@see true} if it's user-defined, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isUserDefined(): bool {}

/**
* <div id="reflectionfunctionabstract.isgenerator" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::isGenerator</h1>  <p class="verinfo">(PHP 5 &gt;= 5.5.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::isGenerator</span> — <span class="dc-title">判断函数是否是一个生成器函数</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.isgenerator-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::isGenerator</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.isgenerator-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.isgenerator-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   生成器函数返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，不是返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div></div>
    *
     * Returns whether this function is a generator
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.isgenerator.php
     * @return bool {@see true} if the function is generator, otherwise {@see false}
     * @since 5.5
     
    #[Pure]
    #[TentativeType]
*/
    public function isGenerator(): bool {}

/**
* <div id="reflectionfunctionabstract.isvariadic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::isVariadic</h1>  <p class="verinfo">(PHP 5 &gt;= 5.6.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::isVariadic</span> — <span class="dc-title">Checks if the function is variadic</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.isvariadic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::isVariadic</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if the function is   <a href="https://php.net/manual/zh/functions.arguments.php#functions.variable-arg-list" class="link">variadic</a>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.isvariadic-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.isvariadic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the function is variadic, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div></div>
    *
     * Returns whether this function is variadic
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.isvariadic.php
     * @return bool {@see true} if the function is variadic, otherwise {@see false}
     * @since 5.6
     
    #[Pure]
    #[TentativeType]
*/
    public function isVariadic(): bool {}

/**
* <div id="reflectionfunctionabstract.getclosurethis" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getClosureThis</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getClosureThis</span> — <span class="dc-title">返回闭包内与 $this 对应的对象</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getclosurethis-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureThis</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span></div>  <p class="para rdfs-comment">   如果函数是非静态闭包，获取绑定到闭包内部 <var class="varname">$this</var> 的对象。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getclosurethis-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getclosurethis-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   返回 <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span> 中 <var class="varname">$this</var> 所表示的对象实例。如果函数不是闭包或者没有   <var class="varname">$this</var>，则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.getclosurethis-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5529">   <p><strong>示例 #1     Example showcasing difference between    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureCalledClass()}</span>,    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureScopeClass()}</span>,    and <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureThis()</strong></span>    with a closure in the object context   </strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">A<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">getClosure</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">self</span><span style="color: #007700">::class, static::class);<br><br>        return function() {};<br>    }<br>}<br><br>class </span><span style="color: #9876AA">B </span><span style="color: #007700">extends </span><span style="color: #9876AA">A </span><span style="color: #007700">{}<br><br></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">B</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosure</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$r </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureThis</span><span style="color: #007700">()); </span><span style="color: #FF8000">// $this === $b, since a non-static closure take the object context<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureScopeClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the self::class resolution inside a closure<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureCalledClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the static::class resolution inside a closure<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(1) "A"<br>string(1) "B"<br>object(B)#1 (0) {<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "A"<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "B"<br>}</blockquote></div>   </div>  </div>  <div class="example" id="example-5530">   <p><strong>示例 #2     Example showcasing difference between    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureCalledClass()}</span>,    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureScopeClass()}</span>,    and <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureThis()</strong></span>    with a static closure without an object context   </strong></p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">A<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">getClosure</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">self</span><span style="color: #007700">::class, static::class);<br><br>        return static function() {};<br>    }<br>}<br><br>class </span><span style="color: #9876AA">B </span><span style="color: #007700">extends </span><span style="color: #9876AA">A </span><span style="color: #007700">{}<br><br></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">B</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosure</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$r </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureThis</span><span style="color: #007700">()); </span><span style="color: #FF8000">// NULL, since the pseudo-variable $this is not available in a static context<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureScopeClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the self::class resolution inside a closure<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureCalledClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the static::class resolution inside a closure<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(1) "A"<br>string(1) "B"<br>NULL<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "A"<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "B"<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getclosurethis-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureCalledClass()} - Returns the class corresponding to static:: inside a closure</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureScopeClass()} - Returns the class corresponding to the scope inside a closure</span></li>   <li><a href="https://php.net/manual/zh/language.oop5.late-static-bindings.php" class="xref">后期静态绑定</a></li>  </ul> </div></div>
    *
     * Returns this pointer bound to closure
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getclosurethis.php
     * @return object|null Returns $this pointer or {@see null} in case of an error.
     
    #[Pure]
    #[TentativeType]
*/
    public function getClosureThis(): ?object {}

/**
* <div id="reflectionfunctionabstract.getclosurescopeclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getClosureScopeClass</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getClosureScopeClass</span> — <span class="dc-title">Returns the class corresponding to the scope inside a closure</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getclosurescopeclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureScopeClass</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div>  <p class="simpara">   Returns the class as a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> that   corresponds to the scope inside the   <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getclosurescopeclass-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getclosurescopeclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> corresponding to the class   whose scope is being used inside the <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>.   If the function is not a closure or if it has global scope <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>   is returned instead.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.getclosurescopeclass-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5527">   <p><strong>示例 #1     Example showcasing difference between    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureCalledClass()}</span>,    <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureScopeClass()</strong></span>,    and <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureThis()}</span>    with a closure in the object context   </strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">A<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">getClosure</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">self</span><span style="color: #007700">::class, static::class);<br><br>        return function() {};<br>    }<br>}<br><br>class </span><span style="color: #9876AA">B </span><span style="color: #007700">extends </span><span style="color: #9876AA">A </span><span style="color: #007700">{}<br><br></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">B</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosure</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$r </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureThis</span><span style="color: #007700">()); </span><span style="color: #FF8000">// $this === $b, since a non-static closure take the object context<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureScopeClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the self::class resolution inside a closure<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureCalledClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the static::class resolution inside a closure<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(1) "A"<br>string(1) "B"<br>object(B)#1 (0) {<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "A"<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "B"<br>}</blockquote></div>   </div>  </div>  <div class="example" id="example-5528">   <p><strong>示例 #2     Example showcasing difference between    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureCalledClass()}</span>,    <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureScopeClass()</strong></span>,    and <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureThis()}</span>    with a static closure without an object context   </strong></p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">A<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">getClosure</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">self</span><span style="color: #007700">::class, static::class);<br><br>        return static function() {};<br>    }<br>}<br><br>class </span><span style="color: #9876AA">B </span><span style="color: #007700">extends </span><span style="color: #9876AA">A </span><span style="color: #007700">{}<br><br></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">B</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosure</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$r </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureThis</span><span style="color: #007700">()); </span><span style="color: #FF8000">// NULL, since the pseudo-variable $this is not available in a static context<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureScopeClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the self::class resolution inside a closure<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureCalledClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the static::class resolution inside a closure<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(1) "A"<br>string(1) "B"<br>NULL<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "A"<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "B"<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getclosurescopeclass-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureCalledClass()} - Returns the class corresponding to static:: inside a closure</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureThis()} - 返回闭包内与 $this 对应的对象</span></li>   <li><a href="https://php.net/manual/zh/language.oop5.late-static-bindings.php" class="xref">后期静态绑定</a></li>  </ul> </div></div>
    *
     * Returns the scope associated to the closure
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getclosurescopeclass.php
     * @return ReflectionClass|null Returns the class on success or {@see null}
     * on failure.
     * @since 5.4
     
    #[Pure]
    #[TentativeType]
*/
    public function getClosureScopeClass(): ?ReflectionClass {}

/**
* <div id="reflectionfunctionabstract.getclosurecalledclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getClosureCalledClass</h1>  <p class="verinfo">(PHP 8 &gt;= 8.0.23, PHP 8 &gt;= 8.1.11)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getClosureCalledClass</span> — <span class="dc-title">Returns the class corresponding to static:: inside a closure</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getclosurecalledclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureCalledClass</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div>  <p class="simpara">   Returns the class as a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> that   corresponds to resolving the class name corresponding to <span class="literal">static::</span> inside the   <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getclosurecalledclass-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getclosurecalledclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> corresponding to the class   represented by <span class="literal">static::</span> in the <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>.   If the function is not a closure or if it has global scope <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>   is returned instead.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.getclosurecalledclass-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5525">   <p><strong>示例 #1     Example showcasing difference between    <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureCalledClass()</strong></span>,    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureScopeClass()}</span>,    and <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureThis()}</span>    with a closure in the object context   </strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">A<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">getClosure</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">self</span><span style="color: #007700">::class, static::class);<br><br>        return function() {};<br>    }<br>}<br><br>class </span><span style="color: #9876AA">B </span><span style="color: #007700">extends </span><span style="color: #9876AA">A </span><span style="color: #007700">{}<br><br></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">B</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosure</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$r </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureThis</span><span style="color: #007700">()); </span><span style="color: #FF8000">// $this === $b, since a non-static closure take the object context<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureScopeClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the self::class resolution inside a closure<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureCalledClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the static::class resolution inside a closure<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(1) "A"<br>string(1) "B"<br>object(B)#1 (0) {<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "A"<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "B"<br>}</blockquote></div>   </div>  </div>  <div class="example" id="example-5526">   <p><strong>示例 #2     Example showcasing difference between    <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureCalledClass()</strong></span>,    <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureScopeClass()}</span>,    and <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureThis()}</span>    with a static closure without an object context   </strong></p>   <div class="example-contents">    <div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">A<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">getClosure</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">self</span><span style="color: #007700">::class, static::class);<br><br>        return static function() {};<br>    }<br>}<br><br>class </span><span style="color: #9876AA">B </span><span style="color: #007700">extends </span><span style="color: #9876AA">A </span><span style="color: #007700">{}<br><br></span><span style="color: #9876AA">$b </span><span style="color: #007700">= new </span><span style="color: #9876AA">B</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$c </span><span style="color: #007700">= </span><span style="color: #9876AA">$b</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosure</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$r </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$c</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureThis</span><span style="color: #007700">()); </span><span style="color: #FF8000">// NULL, since the pseudo-variable $this is not available in a static context<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureScopeClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the self::class resolution inside a closure<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$r</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureCalledClass</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Corresponds to the static::class resolution inside a closure<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(1) "A"<br>string(1) "B"<br>NULL<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "A"<br>}<br>object(ReflectionClass)#4 (1) {<br>  ["name"]=&gt;<br>  string(1) "B"<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getclosurecalledclass-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureScopeClass()} - Returns the class corresponding to the scope inside a closure</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureThis()} - 返回闭包内与 $this 对应的对象</span></li>   <li><a href="https://php.net/manual/zh/language.oop5.late-static-bindings.php" class="xref">后期静态绑定</a></li>  </ul> </div></div>
    *
     * @return ReflectionClass|null Returns the class on success or {@see null}
     * on failure.
     * @since 8.0
     
    #[Pure]
    #[TentativeType]
*/
    public function getClosureCalledClass(): ?ReflectionClass {}

/**
* <div id="reflectionfunctionabstract.getdoccomment" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getDocComment</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getDocComment</span> — <span class="dc-title">获取注释内容</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getdoccomment-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getDocComment</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取函数的文档注释。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getdoccomment-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getdoccomment-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果存在文档注释返回其内容，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getdoccomment-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getStartLine()} - 获取开始行号</span></li>   </ul>   </div></div>
    *
     * Gets doc comment
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getdoccomment.php
     * @return string|false The doc comment if it exists, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function getDocComment(): string|false {}

/**
* <div id="reflectionfunctionabstract.getendline" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getEndLine</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getEndLine</span> — <span class="dc-title">获取结束行号</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getendline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getEndLine</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取结束行号。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getendline-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getendline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   获取用户定义函数的结束行号，如果未知返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getendline-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getStartLine()} - 获取开始行号</span></li>   </ul>   </div></div>
    *
     * Gets end line number
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getendline.php
     * @return int|false The ending line number of the user defined function,
     * or {@see false} if unknown.
     
    #[Pure]
    #[TentativeType]
*/
    public function getEndLine(): int|false {}

/**
* <div id="reflectionfunctionabstract.getextension" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getExtension</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getExtension</span> — <span class="dc-title">获取扩展信息</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getextension-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getExtension</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div>  <p class="para rdfs-comment">   获取函数的扩展信息  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getextension-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getextension-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   包含扩展信息的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="classname">ReflectionExtension</a></span> 对象，用户定义的函数则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getextension-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getExtensionName()} - 获取扩展名称</span></li>   </ul>   </div></div>
    *
     * Gets extension info
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getextension.php
     * @return ReflectionExtension|null The extension information, as a
     * {@see ReflectionExtension} object or {@see null} instead.
     
    #[Pure]
    #[TentativeType]
*/
    public function getExtension(): ?ReflectionExtension {}

/**
* <div id="reflectionfunctionabstract.getextensionname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getExtensionName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getExtensionName</span> — <span class="dc-title">获取扩展名称</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getextensionname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getExtensionName</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取扩展名称。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getextensionname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getextensionname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   定义函数的扩展名，用户定义函数则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getextensionname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getExtension()} - 获取扩展信息</span></li>   </ul>   </div></div>
    *
     * Gets extension name
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getextensionname.php
     * @return string|false The extension's name or {@see false} instead.
     
    #[Pure]
    #[TentativeType]
*/
    public function getExtensionName(): string|false {}

/**
* <div id="reflectionfunctionabstract.getfilename" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getFileName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getFileName</span> — <span class="dc-title">获取文件名称</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getfilename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getFileName</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取函数定义的文件名称。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getfilename-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getfilename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回定义函数所在文件的文件名。如果定义的类在 PHP 核心或者 PHP 扩展中，则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getfilename-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNamespaceName()} - 获取命名空间</span></li>   </ul>   </div></div>
    *
     * Gets file name
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getfilename.php
     * @return string|false The file name or {@see false} in case of error.
     
    #[Pure]
    #[TentativeType]
*/
    public function getFileName(): string|false {}

/**
* <div id="reflectionfunctionabstract.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getName</span> — <span class="dc-title">获取函数名称</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   获取函数名称。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回函数名称。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getExtensionName()} - 获取扩展名称</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isUserDefined()} - 检查是否是用户定义</span></li>   </ul>   </div></div>
    *
     * Gets function name
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getname.php
     * @return string The name of the function.
     
    #[Pure]
    #[TentativeType]
*/
    public function getName(): string {}

/**
* <div id="reflectionfunctionabstract.getnamespacename" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getNamespaceName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getNamespaceName</span> — <span class="dc-title">获取命名空间</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getnamespacename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getNamespaceName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   获取类定义所属的命名空间。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getnamespacename-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getnamespacename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回命名空间。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getnamespacename-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getFileName()} - 获取文件名称</span></li>    <li><a href="https://php.net/manual/zh/language.namespaces.php" class="link">命名空间</a></li>   </ul>   </div></div>
    *
     * Gets namespace name
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getnamespacename.php
     * @return string The namespace name.
     
    #[Pure]
    #[TentativeType]
*/
    public function getNamespaceName(): string {}

/**
* <div id="reflectionfunctionabstract.getnumberofparameters" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getNumberOfParameters</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getNumberOfParameters</span> — <span class="dc-title">获取参数数目</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getnumberofparameters-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getNumberOfParameters</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   获取函数定义的参数数量，包括可选参数。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getnumberofparameters-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getnumberofparameters-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   参数的个数。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getnumberofparameters-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfRequiredParameters()} - 获取必须输入参数个数</span></li>    <li><span class="function">{@link func_num_args()} - 返回传递给函数的参数数量</span></li>   </ul>   </div></div>
    *
     * Gets number of parameters
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getnumberofparameters.php
     * @return int The number of parameters.
     * @since 5.0.3
     
    #[Pure]
    #[TentativeType]
*/
    public function getNumberOfParameters(): int {}

/**
* <div id="reflectionfunctionabstract.getnumberofrequiredparameters" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getNumberOfRequiredParameters</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getNumberOfRequiredParameters</span> — <span class="dc-title">获取必须输入参数个数</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getnumberofrequiredparameters-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getNumberOfRequiredParameters</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   获取函数定义中，必须输入的参数个数。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getnumberofrequiredparameters-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getnumberofrequiredparameters-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   必须输入的参数个数。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getnumberofrequiredparameters-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfParameters()} - 获取参数数目</span></li>   </ul>   </div></div>
    *
     * Gets number of required parameters
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getnumberofrequiredparameters.php
     * @return int The number of required parameters.
     * @since 5.0.3
     
    #[Pure]
    #[TentativeType]
*/
    public function getNumberOfRequiredParameters(): int {}

/**
* <div id="reflectionfunctionabstract.getparameters" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getParameters</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getParameters</span> — <span class="dc-title">获取参数</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getparameters-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getParameters</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取通过 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionparameter.php" class="type ReflectionParameter" style="color:#EAB766">ReflectionParameter</a></span> 数组返回参数列表。顺序为源码中定义的顺序。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getparameters-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getparameters-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   由 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionparameter.php" class="classname">ReflectionParameter</a></span> 对象组成的参数列表。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getparameters-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfParameters()} - 获取参数数目</span></li>    <li><span class="function">{@link func_get_args()} - 返回一个包含函数参数列表的数组</span></li>   </ul>   </div></div>
    *
     * Gets parameters
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getparameters.php
     * @return ReflectionParameter[] The parameters, as a ReflectionParameter objects.
     
    #[Pure]
    #[TentativeType]
*/
    public function getParameters(): array {}

    /**
     * Gets the specified return type of a function
     *
     * @link https://php.net/manual/en/reflectionfunctionabstract.getreturntype.php
     * @return ReflectionType|null Returns a {@see ReflectionType} object if a
     * return type is specified, {@see null} otherwise.
     * @since 7.0
     */
    #[Pure]
    #[LanguageLevelTypeAware(
        [
            '7.1' => 'ReflectionNamedType|null',
            '8.0' => 'ReflectionNamedType|ReflectionUnionType|null',
            '8.1' => 'ReflectionNamedType|ReflectionUnionType|ReflectionIntersectionType|null'
        ],
        default: 'ReflectionType|null'
    )]
/**
* <div id="reflectionfunctionabstract.getreturntype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getReturnType</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getReturnType</span> — <span class="dc-title">Gets the specified return type of a function</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getreturntype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getReturnType</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div>  <p class="para rdfs-comment">   Gets the specified return type of a reflected function.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getreturntype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getreturntype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span> object if a return type is   specified, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.getreturntype-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5532">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getReturnType()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">function </span><span style="color: #9876AA">to_int</span><span style="color: #007700">(</span><span style="color: #9876AA">$param</span><span style="color: #007700">) : </span><span style="color: #9876AA">int </span><span style="color: #007700">{<br>    return (int) </span><span style="color: #9876AA">$param</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$reflection1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'to_int'</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$reflection1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getReturnType</span><span style="color: #007700">();</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">int</blockquote></div>    </div>   </div>   <div class="example" id="example-5533">    <p><strong>示例 #2 Usage on built-in functions</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>$reflection2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'array_merge'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getReturnType</span><span style="color: #007700">());</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">null</blockquote></div>    </div>   </div>    <p class="para">   This is because many internal functions do not have types specified for their   parameters or return values. It is therefore best to avoid using this   method on built-in functions.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getreturntype-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::hasReturnType()} - Checks if the function has a specified return type</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionType::__toString()} - To string</span></li>   </ul>   </div></div>
    #[TentativeType]
*/
    public function getReturnType(): ?ReflectionType {}

/**
* <div id="reflectionfunctionabstract.getshortname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getShortName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getShortName</span> — <span class="dc-title">获取函数短名称</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getshortname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getShortName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   获取函数的段名称 (没有命名空间定义)。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getshortname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getshortname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   函数短名称。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getshortname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNamespaceName()} - 获取命名空间</span></li>    <li><a href="https://php.net/manual/zh/language.namespaces.php" class="link">命名空间</a></li>   </ul>   </div></div>
    *
     * Gets function short name
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getshortname.php
     * @return string The short name of the function.
     
    #[Pure]
    #[TentativeType]
*/
    public function getShortName(): string {}

/**
* <div id="reflectionfunctionabstract.getstartline" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getStartLine</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getStartLine</span> — <span class="dc-title">获取开始行号</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getstartline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getStartLine</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取函数定义的开始行号  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getstartline-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getstartline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   开始行号，如果未知则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getstartline-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getEndLine()} - 获取结束行号</span></li>   </ul>   </div></div>
    *
     * Gets starting line number
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getstartline.php
     * @return int|false The starting line number or {@see false} if unknown.
     
    #[Pure]
    #[TentativeType]
*/
    public function getStartLine(): int|false {}

/**
* <div id="reflectionfunctionabstract.getstaticvariables" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getStaticVariables</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getStaticVariables</span> — <span class="dc-title">获取静态变量</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getstaticvariables-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getStaticVariables</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取静态变量  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getstaticvariables-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getstaticvariables-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个静态变量的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getstaticvariables-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getParameters()} - 获取参数</span></li>   </ul>   </div></div>
    *
     * Gets static variables
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.getstaticvariables.php
     * @return array An array of static variables.
     
    #[Pure]
    #[TentativeType]
*/
    public function getStaticVariables(): array {}

/**
* <div id="reflectionfunctionabstract.returnsreference" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::returnsReference</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::returnsReference</span> — <span class="dc-title">检查是否返回引用</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.returnsreference-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::returnsReference</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查是否返回引用  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.returnsreference-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.returnsreference-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果返回引用则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.returnsreference-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isClosure()} - 检查是否是匿名函数</span></li>   </ul>   </div></div>
    *
     * Checks if returns reference
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.returnsreference.php
     * @return bool {@see true} if it returns a reference, otherwise {@see false}
     
    #[TentativeType]
*/
    public function returnsReference(): bool {}

/**
* <div id="reflectionfunctionabstract.hasreturntype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::hasReturnType</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::hasReturnType</span> — <span class="dc-title">Checks if the function has a specified return type</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.hasreturntype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::hasReturnType</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether the reflected function has a return type specified.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.hasreturntype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.hasreturntype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the function is a specified return type, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.hasreturntype-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5535">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::hasReturnType()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">function </span><span style="color: #9876AA">to_int</span><span style="color: #007700">(</span><span style="color: #9876AA">$param</span><span style="color: #007700">) : </span><span style="color: #9876AA">int </span><span style="color: #007700">{<br>    return (int) </span><span style="color: #9876AA">$param</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$reflection1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'to_int'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasReturnType</span><span style="color: #007700">());</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   <div class="example" id="example-5536">    <p><strong>示例 #2 Usage on built-in functions</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>$reflection2 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'array_merge'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflection2</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasReturnType</span><span style="color: #007700">());</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)</blockquote></div>    </div>   </div>    <p class="para">   This is because many internal functions do not have types specified for their   parameters or return values. It is therefore best to avoid using this   method on built-in functions.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.hasreturntype-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getReturnType()} - Gets the specified return type of a function</span></li>   </ul>   </div></div>
    *
     * Checks if the function has a specified return type
     *
     * @link https://php.net/manual/zh/reflectionfunctionabstract.hasreturntype.php
     * @return bool Returns {@see true} if the function is a specified return
     * type, otherwise {@see false}.
     * @since 7.0
     
    #[TentativeType]
*/
    public function hasReturnType(): bool {}

/**
* <div id="reflectionfunctionabstract.getattributes" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getAttributes</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getAttributes</span> — <span class="dc-title">Gets Attributes</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getattributes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getAttributes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   Returns all attributes declared on this function or method as an array of <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="type ReflectionAttribute" style="color:#EAB766">ReflectionAttribute</a></span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getattributes-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">name</span></dt><dd> <p class="para">  过滤结果，匹配此类名，仅包含 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 实例的属性。 </p></dd>   <dt><span class="parameter" style="color:#3A95FF">flags</span></dt><dd> <p class="para">  如果提供了 <span class="parameter" style="color:#3A95FF">name</span>，则用于确定如何过滤结果的 flag。 </p> <p class="para">  默认值为 <span class="literal">0</span>，这将导致返回的结果只属于类 <span class="parameter" style="color:#3A95FF">name</span> 的属性。 </p> <p class="para">  唯一可用的其他选项是使用 <strong><span>{@link ReflectionAttribute::IS_INSTANCEOF}</span></strong>，它将改为使用 <span class="literal">instanceof</span> 进行过滤。 </p></dd>  </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getattributes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Array of attributes, as a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> object.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.getattributes-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5521">    <p><strong>示例 #1 Basic usage with a class method</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>class </span><span style="color: #9876AA">Factory </span><span style="color: #007700">{<br>    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>    public function </span><span style="color: #9876AA">makeApple</span><span style="color: #007700">(): </span><span style="color: #9876AA">string<br>    </span><span style="color: #007700">{<br>        return </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>    }<br>}<br><br></span><span style="color: #9876AA">$method </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'Factory'</span><span style="color: #007700">, </span><span style="color: #DD0000">'makeApple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$method</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">();<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>    [0] =&gt; Fruit<br>    [1] =&gt; Red<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5522">    <p><strong>示例 #2 Basic usage with a function</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>function </span><span style="color: #9876AA">makeApple</span><span style="color: #007700">(): </span><span style="color: #9876AA">string<br></span><span style="color: #007700">{<br>    return </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'makeApple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">();<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>    [0] =&gt; Fruit<br>    [1] =&gt; Red<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5523">    <p><strong>示例 #3 Filtering results by class name</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>function </span><span style="color: #9876AA">makeApple</span><span style="color: #007700">(): </span><span style="color: #9876AA">string<br></span><span style="color: #007700">{<br>    return </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'makeApple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fruit'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>    [0] =&gt; Fruit<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5524">    <p><strong>示例 #4 Filtering results by class name, with inheritance</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">interface </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">implements </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>function </span><span style="color: #9876AA">makeApple</span><span style="color: #007700">(): </span><span style="color: #9876AA">string<br></span><span style="color: #007700">{<br>    return </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #DD0000">'makeApple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Color'</span><span style="color: #007700">, </span><span style="color: #9876AA">ReflectionAttribute</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_INSTANCEOF</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>    [0] =&gt; Red<br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getattributes-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getAttributes()} - 获取所有属性</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getAttributes()} - Gets Attributes</span></li>   </ul>   </div></div>
    *
     * @template T
     *
     * Returns an array of function attributes.
     *
     * @param class-string<T>|null $name Name of an attribute class
     * @param int $flags Сriteria by which the attribute is searched.
     * @return ReflectionAttribute<T>[]
     * @since 8.0
     
    #[Pure]
*/
    public function getAttributes(?string $name = null, int $flags = 0): array {}

/**
* <div id="reflectionfunctionabstract.getclosureusedvariables" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getClosureUsedVariables</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getClosureUsedVariables</span> — <span class="dc-title">Returns an array of the used variables in the Closure</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.getclosureusedvariables-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureUsedVariables</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   Returns an <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> of the used variables in the <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.getclosureusedvariables-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.getclosureusedvariables-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> of the used variables in the <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.getclosureusedvariables-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5531">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getClosureUsedVariables()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>$one </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br></span><span style="color: #9876AA">$two </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">$function </span><span style="color: #007700">= function() use (</span><span style="color: #9876AA">$one</span><span style="color: #007700">, </span><span style="color: #9876AA">$two</span><span style="color: #007700">) {<br>    static </span><span style="color: #9876AA">$three </span><span style="color: #007700">= </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br>};<br><br></span><span style="color: #9876AA">$reflector </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionFunction</span><span style="color: #007700">(</span><span style="color: #9876AA">$function</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getClosureUsedVariables</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(2) {<br>  ["one"]=&gt;<br>  int(1)<br>  ["two"]=&gt;<br>  int(2)<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.getclosureusedvariables-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link ReflectionFunctionAbstract::getClosureScopeClass()} - Returns the class corresponding to the scope inside a closure</span></li>    <li><span class="function">{@link ReflectionFunctionAbstract::getClosureThis()} - 返回闭包内与 $this 对应的对象</span></li>   </ul>   </div></div>
    #[PhpStormStubsElementAvailable('8.1')]
    #[Pure]
*/
    public function getClosureUsedVariables(): array {}

/**
* <div id="reflectionfunctionabstract.hastentativereturntype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::hasTentativeReturnType</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::hasTentativeReturnType</span> — <span class="dc-title">Returns whether the function has a tentative return type</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.hastentativereturntype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::hasTentativeReturnType</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Returns whether the function has a tentative return type.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.hastentativereturntype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.hastentativereturntype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the function has a tentative return type, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.hastentativereturntype-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5537">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::hasTentativeReturnType()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>$method </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #9876AA">\ArrayAccess</span><span style="color: #007700">::class, </span><span style="color: #DD0000">'offsetGet'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$method</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasTentativeReturnType</span><span style="color: #007700">());</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.hastentativereturntype-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getTentativeReturnType()} - Returns the tentative return type associated with the function</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::hasReturnType()} - Checks if the function has a specified return type</span></li>    <li><a href="https://php.net/manual/zh/language.oop5.inheritance.php#language.oop5.inheritance.internal-classes" class="link">Return Type Compatibility with Internal Classes</a></li>   </ul>   </div></div>
    #[PhpStormStubsElementAvailable('8.1')]
    #[Pure]
*/
    public function hasTentativeReturnType(): bool {}

/**
* <div id="reflectionfunctionabstract.gettentativereturntype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionFunctionAbstract::getTentativeReturnType</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionFunctionAbstract::getTentativeReturnType</span> — <span class="dc-title">Returns the tentative return type associated with the function</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionfunctionabstract.gettentativereturntype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getTentativeReturnType</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div>  <p class="para rdfs-comment">   Returns the tentative return type associated with the function.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionfunctionabstract.gettentativereturntype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionfunctionabstract.gettentativereturntype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span> object if a tentative return type is   specified, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionfunctionabstract.gettentativereturntype-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5534">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionFunctionAbstract::getTentativeReturnType()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>$method </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #9876AA">\ArrayAccess</span><span style="color: #007700">::class, </span><span style="color: #DD0000">'offsetGet'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$method</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getTentativeReturnType</span><span style="color: #007700">());</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionNamedType)#2 (0) {<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionfunctionabstract.gettentativereturntype-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getReturnType()} - Gets the specified return type of a function</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::hasTentativeReturnType()} - Returns whether the function has a tentative return type</span></li>    <li><a href="https://php.net/manual/zh/language.oop5.inheritance.php#language.oop5.inheritance.internal-classes" class="link">Return Type Compatibility with Internal Classes</a></li>   </ul>   </div></div>
    #[PhpStormStubsElementAvailable('8.1')]
    #[Pure]
*/
    public function getTentativeReturnType(): ?ReflectionType {}

    #[PhpStormStubsElementAvailable('8.1')]
    #[Pure]
    #[TentativeType]
    public function isStatic(): bool {}

    public function __toString() {}
}
