<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
 * <div id="class.reflectionclass" class="reference"> <h1 class="title">ReflectionClass 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="reflectionclass.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionClass</strong></span> 类报告了一个类的有关信息。   </p>  </div>  <div class="section" id="reflectionclass.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionClass</strong></strong>             <span class="modifier">implements</span>      <a href="https://php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.is-implicit-abstract"><var class="varname">IS_IMPLICIT_ABSTRACT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.is-explicit-abstract"><var class="varname">IS_EXPLICIT_ABSTRACT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.is-final"><var class="varname">IS_FINAL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.is-readonly"><var class="varname">IS_READONLY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.skip-initialization-on-serialize"><var class="varname">SKIP_INITIALIZATION_ON_SERIALIZE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.skip-destructor"><var class="varname">SKIP_DESTRUCTOR</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionclass.php#reflectionclass.props.name">\$<var class="varname">name</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$objectOrClass</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.export.php" class="methodname" style="color:#CC7832">export</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$argument</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$return</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getattributes.php" class="methodname" style="color:#CC7832">getAttributes</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getconstant.php" class="methodname" style="color:#CC7832">getConstant</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getconstants.php" class="methodname" style="color:#CC7832">getConstants</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></span> <span class="parameter" style="color:#3A95FF">\$filter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getconstructor.php" class="methodname" style="color:#CC7832">getConstructor</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getdefaultproperties.php" class="methodname" style="color:#CC7832">getDefaultProperties</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getdoccomment.php" class="methodname" style="color:#CC7832">getDocComment</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getendline.php" class="methodname" style="color:#CC7832">getEndLine</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getextension.php" class="methodname" style="color:#CC7832">getExtension</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getextensionname.php" class="methodname" style="color:#CC7832">getExtensionName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getfilename.php" class="methodname" style="color:#CC7832">getFileName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getinterfacenames.php" class="methodname" style="color:#CC7832">getInterfaceNames</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getinterfaces.php" class="methodname" style="color:#CC7832">getInterfaces</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getlazyinitializer.php" class="methodname" style="color:#CC7832">getLazyInitializer</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getmethod.php" class="methodname" style="color:#CC7832">getMethod</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getmethods.php" class="methodname" style="color:#CC7832">getMethods</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></span> <span class="parameter" style="color:#3A95FF">\$filter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getmodifiers.php" class="methodname" style="color:#CC7832">getModifiers</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getnamespacename.php" class="methodname" style="color:#CC7832">getNamespaceName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getparentclass.php" class="methodname" style="color:#CC7832">getParentClass</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getproperties.php" class="methodname" style="color:#CC7832">getProperties</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></span> <span class="parameter" style="color:#3A95FF">\$filter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getproperty.php" class="methodname" style="color:#CC7832">getProperty</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionproperty.php" class="type ReflectionProperty" style="color:#EAB766">ReflectionProperty</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getreflectionconstant.php" class="methodname" style="color:#CC7832">getReflectionConstant</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="type ReflectionClassConstant" style="color:#EAB766">ReflectionClassConstant</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getreflectionconstants.php" class="methodname" style="color:#CC7832">getReflectionConstants</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></span> <span class="parameter" style="color:#3A95FF">\$filter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getshortname.php" class="methodname" style="color:#CC7832">getShortName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getstartline.php" class="methodname" style="color:#CC7832">getStartLine</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getstaticproperties.php" class="methodname" style="color:#CC7832">getStaticProperties</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.getstaticpropertyvalue.php" class="methodname" style="color:#CC7832">getStaticPropertyValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$def_value</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.gettraitaliases.php" class="methodname" style="color:#CC7832">getTraitAliases</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.gettraitnames.php" class="methodname" style="color:#CC7832">getTraitNames</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.gettraits.php" class="methodname" style="color:#CC7832">getTraits</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.hasconstant.php" class="methodname" style="color:#CC7832">hasConstant</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.hasmethod.php" class="methodname" style="color:#CC7832">hasMethod</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.hasproperty.php" class="methodname" style="color:#CC7832">hasProperty</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.implementsinterface.php" class="methodname" style="color:#CC7832">implementsInterface</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$interface</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.initializelazyobject.php" class="methodname" style="color:#CC7832">initializeLazyObject</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.innamespace.php" class="methodname" style="color:#CC7832">inNamespace</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isabstract.php" class="methodname" style="color:#CC7832">isAbstract</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isanonymous.php" class="methodname" style="color:#CC7832">isAnonymous</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.iscloneable.php" class="methodname" style="color:#CC7832">isCloneable</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isenum.php" class="methodname" style="color:#CC7832">isEnum</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isfinal.php" class="methodname" style="color:#CC7832">isFinal</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isinstance.php" class="methodname" style="color:#CC7832">isInstance</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isinstantiable.php" class="methodname" style="color:#CC7832">isInstantiable</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isinterface.php" class="methodname" style="color:#CC7832">isInterface</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isinternal.php" class="methodname" style="color:#CC7832">isInternal</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isiterable.php" class="methodname" style="color:#CC7832">isIterable</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isreadonly.php" class="methodname" style="color:#CC7832">isReadOnly</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.issubclassof.php" class="methodname" style="color:#CC7832">isSubclassOf</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.istrait.php" class="methodname" style="color:#CC7832">isTrait</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isuninitializedlazyobject.php" class="methodname" style="color:#CC7832">isUninitializedLazyObject</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.isuserdefined.php" class="methodname" style="color:#CC7832">isUserDefined</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.marklazyobjectasinitialized.php" class="methodname" style="color:#CC7832">markLazyObjectAsInitialized</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.newinstance.php" class="methodname" style="color:#CC7832">newInstance</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.newinstanceargs.php" class="methodname" style="color:#CC7832">newInstanceArgs</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$args</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.newinstancewithoutconstructor.php" class="methodname" style="color:#CC7832">newInstanceWithoutConstructor</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.newlazyghost.php" class="methodname" style="color:#CC7832">newLazyGhost</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$initializer</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.newlazyproxy.php" class="methodname" style="color:#CC7832">newLazyProxy</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$factory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.resetaslazyghost.php" class="methodname" style="color:#CC7832">resetAsLazyGhost</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$initializer</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.resetaslazyproxy.php" class="methodname" style="color:#CC7832">resetAsLazyProxy</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$factory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.setstaticpropertyvalue.php" class="methodname" style="color:#CC7832">setStaticPropertyValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclass.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>   }</div>  </div>    <div class="section" id="reflectionclass.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionclass.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">       类名。只读，尝试赋值时抛出 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </p>     </dd>       </dl>  </div>    <div class="section" id="reflectionclass.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="reflectionclass.constants.modifiers">    <h2 class="title">ReflectionClass 修饰符</h2>    <dl>           <dt id="reflectionclass.constants.is-implicit-abstract">       <strong><span>{@link ReflectionClass::IS_IMPLICIT_ABSTRACT}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该类是 <a href="https://php.net/manual/zh/language.oop5.abstract.php" class="link">abstract</a>，因为有一些抽象方法。       </p>      </dd>                <dt id="reflectionclass.constants.is-explicit-abstract">       <strong><span>{@link ReflectionClass::IS_EXPLICIT_ABSTRACT}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该类是 <a href="https://php.net/manual/zh/language.oop5.abstract.php" class="link">abstract</a>，因为已明确定义。       </p>      </dd>                <dt id="reflectionclass.constants.is-final">       <strong><span>{@link ReflectionClass::IS_FINAL}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该类是 <a href="https://php.net/manual/zh/language.oop5.final.php" class="link">final</a>。       </p>      </dd>                <dt id="reflectionclass.constants.is-readonly">       <strong><span>{@link ReflectionClass::IS_READONLY}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该类是 <a href="https://php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.class.readonly" class="link">readonly</a>。       </p>      </dd>                <dt id="reflectionclass.constants.skip-initialization-on-serialize">       <strong><span>{@link ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <span class="simpara">        表示 <span class="function">{@link serialize()}</span> 不应触发延迟对象的初始化。       </span>      </dd>                <dt id="reflectionclass.constants.skip-destructor">       <strong><span>{@link ReflectionClass::SKIP_DESTRUCTOR}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <span class="simpara">        表示将对象重置为延迟时不应调用对象析构方法。       </span>      </dd>         </dl>   </div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.4.0</td>       <td>        所有类常量现已类型化。       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        移除 <span class="methodname" style="color:#CC7832">{@link ReflectionClass::export()}</span>。       </td>      </tr>     </tbody>       </table>  </div></div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionClass::__construct} — 初始化 ReflectionClass 类</li><li>{@link ReflectionClass::export} — 导出类</li><li>{@link ReflectionClass::getAttributes} — 获取所有属性</li><li>{@link ReflectionClass::getConstant} — 获取已定义的常量</li><li>{@link ReflectionClass::getConstants} — 获取常量</li><li>{@link ReflectionClass::getConstructor} — 获取类的构造函数</li><li>{@link ReflectionClass::getDefaultProperties} — 获取默认属性</li><li>{@link ReflectionClass::getDocComment} — 获取文档注释</li><li>{@link ReflectionClass::getEndLine} — 获取最后一行的行数</li><li>{@link ReflectionClass::getExtension} — 根据已定义的类获取所在扩展的 ReflectionExtension 对象</li><li>{@link ReflectionClass::getExtensionName} — 获取定义的类所在的扩展的名称</li><li>{@link ReflectionClass::getFileName} — 获取定义类的文件名</li><li>{@link ReflectionClass::getInterfaceNames} — 获取接口（interface）名称</li><li>{@link ReflectionClass::getInterfaces} — 获取接口</li><li>{@link ReflectionClass::getLazyInitializer} — Gets lazy initializer</li><li>{@link ReflectionClass::getMethod} — 获取类方法的 ReflectionMethod</li><li>{@link ReflectionClass::getMethods} — 获取方法的数组</li><li>{@link ReflectionClass::getModifiers} — 获取类的修饰符</li><li>{@link ReflectionClass::getName} — 获取类名</li><li>{@link ReflectionClass::getNamespaceName} — 获取命名空间的名称</li><li>{@link ReflectionClass::getParentClass} — 获取父类</li><li>{@link ReflectionClass::getProperties} — 获取属性</li><li>{@link ReflectionClass::getProperty} — 获取类的一个属性的 ReflectionProperty</li><li>{@link ReflectionClass::getReflectionConstant} — Gets a ReflectionClassConstant for a class's constant</li><li>{@link ReflectionClass::getReflectionConstants} — Gets class constants</li><li>{@link ReflectionClass::getShortName} — 获取短名</li><li>{@link ReflectionClass::getStartLine} — 获取起始行号</li><li>{@link ReflectionClass::getStaticProperties} — 获取静态（static）属性</li><li>{@link ReflectionClass::getStaticPropertyValue} — 获取静态（static）属性的值</li><li>{@link ReflectionClass::getTraitAliases} — 返回 trait 别名数组</li><li>{@link ReflectionClass::getTraitNames} — 返回这个类所使用 traits 的名称的数组</li><li>{@link ReflectionClass::getTraits} — 返回这个类所使用的 traits 数组</li><li>{@link ReflectionClass::hasConstant} — 检查常量是否已经定义</li><li>{@link ReflectionClass::hasMethod} — 检查方法是否已定义</li><li>{@link ReflectionClass::hasProperty} — 检查属性是否已定义</li><li>{@link ReflectionClass::implementsInterface} — 实现接口</li><li>{@link ReflectionClass::initializeLazyObject} — Forces initialization of a lazy object</li><li>{@link ReflectionClass::inNamespace} — 检查是否位于命名空间中</li><li>{@link ReflectionClass::isAbstract} — 检查类是否是抽象类（abstract）</li><li>{@link ReflectionClass::isAnonymous} — 检查类是否是匿名类</li><li>{@link ReflectionClass::isCloneable} — 返回了一个类是否可复制</li><li>{@link ReflectionClass::isEnum} — Returns whether this is an enum</li><li>{@link ReflectionClass::isFinal} — 检查类是否声明为 final</li><li>{@link ReflectionClass::isInstance} — 检查类的实例</li><li>{@link ReflectionClass::isInstantiable} — 检查类是否可实例化</li><li>{@link ReflectionClass::isInterface} — 检查类是否是一个接口（interface）</li><li>{@link ReflectionClass::isInternal} — 检查类是否由扩展或核心在内部定义</li><li>{@link ReflectionClass::isIterable} — Check whether this class is iterable</li><li>{@link ReflectionClass::isIterateable} — 别名 ReflectionClass::isIterable</li><li>{@link ReflectionClass::isReadOnly} — Checks if class is readonly</li><li>{@link ReflectionClass::isSubclassOf} — 检查是否为子类</li><li>{@link ReflectionClass::isTrait} — 返回了是否是 trait</li><li>{@link ReflectionClass::isUninitializedLazyObject} — Checks if an object is lazy and uninitialized</li><li>{@link ReflectionClass::isUserDefined} — 检查是否由用户定义的</li><li>{@link ReflectionClass::markLazyObjectAsInitialized} — Marks a lazy object as initialized without calling the initializer or factory</li><li>{@link ReflectionClass::newInstance} — 从指定的参数创建新类实例</li><li>{@link ReflectionClass::newInstanceArgs} — 从给出的参数创建一个新的类实例</li><li>{@link ReflectionClass::newInstanceWithoutConstructor} — 创建新的类实例而不调用它的构造函数</li><li>{@link ReflectionClass::newLazyGhost} — Creates a new lazy ghost instance</li><li>{@link ReflectionClass::newLazyProxy} — Creates a new lazy proxy instance</li><li>{@link ReflectionClass::resetAsLazyGhost} — Resets an object and marks it as lazy</li><li>{@link ReflectionClass::resetAsLazyProxy} — Resets an object and marks it as lazy</li><li>{@link ReflectionClass::setStaticPropertyValue} — 设置 public static 属性的值</li><li>{@link ReflectionClass::__toString} — 返回 ReflectionClass 对象字符串的表示形式</li></ul></div>
 * 
 * @template T of object
 * The <b>ReflectionClass</b> class reports information about a class.
 *
 * @link https://php.net/manual/zh/class.reflectionclass.php
 */
class ReflectionClass implements Reflector
{
    /**
     * @var class-string<T> Name of the class, same as calling the {@see ReflectionClass::getName()} method
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    /**
     * Indicates class that is abstract because it has some abstract methods.
     *
     * @link https://www.php.net/manual/en/class.reflectionclass.php#reflectionclass.constants.is-implicit-abstract
     */
    public const IS_IMPLICIT_ABSTRACT = 16;

    /**
     * Indicates class that is abstract because of its definition.
     *
     * @link https://www.php.net/manual/en/class.reflectionclass.php#reflectionclass.constants.is-explicit-abstract
     */
    public const IS_EXPLICIT_ABSTRACT = 64;

    /**
     * Indicates final class.
     *
     * @link https://www.php.net/manual/en/class.reflectionclass.php#reflectionclass.constants.is-final
     */
    public const IS_FINAL = 32;

    /**
     * @since 8.2
     */
    public const IS_READONLY = 65536;

    /**
     * @since 8.4
     */
    public const int SKIP_INITIALIZATION_ON_SERIALIZE = 0;

    /**
     * @since 8.4
     */
    public const int SKIP_DESTRUCTOR = 0;

    /**
     * Constructs a ReflectionClass
     *
     * @link https://php.net/manual/en/reflectionclass.construct.php
     * @param class-string<T>|T $objectOrClass Either a string containing the name of
     * the class to reflect, or an object.
     * @throws ReflectionException if the class does not exist.
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'object|string'], default: '')] $objectOrClass) {}

    /**
 * <div id="reflectionclass.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::export</h1>  <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ReflectionClass::export</span> — <span class="dc-title">导出类</span></p> </div> <div id="reflectionclass.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <div class="refsect1 description" id="refsect1-reflectionclass.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$argument</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$return</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   导出反射后的类。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.export-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">argument</span></dt>     <dd>      <p class="para">       导出的反射。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 时返回导出结果，设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>（默认值）则忽略返回。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果参数 <span class="parameter" style="color:#3A95FF">return</span> 设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，导出结果将作为 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>返回，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.export-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5441">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::export()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">\$var1</span><span style="color: #007700">;<br>    public </span><span style="color: #9876AA">\$var2 </span><span style="color: #007700">= </span><span style="color: #DD0000">'Orange'</span><span style="color: #007700">;<br><br>    public function </span><span style="color: #9876AA">type</span><span style="color: #007700">() {<br>        return </span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">;<br>    }<br>}<br></span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">::</span><span style="color: #9876AA">export</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Class&nbsp;[&nbsp;<user>&nbsp;class&nbsp;Apple&nbsp;]&nbsp;{<br>&nbsp;&nbsp;@@&nbsp;php&nbsp;shell&nbsp;code&nbsp;1-8<br><br>&nbsp;&nbsp;-&nbsp;Constants&nbsp;[0]&nbsp;{<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;-&nbsp;Static&nbsp;properties&nbsp;[0]&nbsp;{<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;-&nbsp;Static&nbsp;methods&nbsp;[0]&nbsp;{<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;-&nbsp;Properties&nbsp;[2]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;[&nbsp;<default>&nbsp;public&nbsp;\$var1&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;[&nbsp;<default>&nbsp;public&nbsp;\$var2&nbsp;]<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;-&nbsp;Methods&nbsp;[1]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;[&nbsp;<user>&nbsp;public&nbsp;method&nbsp;type&nbsp;]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@@&nbsp;php&nbsp;shell&nbsp;code&nbsp;5&nbsp;-&nbsp;7<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}</user></default></default></user></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.export-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getName()} - 获取类名</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::__toString()} - 返回 ReflectionClass 对象字符串的表示形式</span></li>   </ul>   </div></div>
 * 
     * Exports a reflected class
     *
     * @link https://php.net/manual/zh/reflectionclass.export.php
     * @param mixed $argument The reflection to export.
     * @param bool $return Setting to {@see true} will return the export, as
     * opposed to emitting it. Setting to {@see false} (the default) will do the opposite.
     * @return string|null If the $return parameter is set to {@see true}, then the
     * export is returned as a string, otherwise {@see null} is returned.
     * @removed 8.0
     */
    #[Deprecated(since: '7.4')]
    public static function export($argument, $return = false) {}

    /**
     * Returns the string representation of the ReflectionClass object.
     *
     * @link https://php.net/manual/en/reflectionclass.tostring.php
     * @return string A string representation of this {@see ReflectionClass} instance.
     */
    #[TentativeType]
    public function __toString(): string {}

    /**
 * <div id="reflectionclass.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getName</span> — <span class="dc-title">获取类名</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   获取类的名称。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   类名。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getname-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5457">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getName()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">namespace </span><span style="color: #9876AA">A\B</span><span style="color: #007700">;<br><br>class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'stdClass'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">\$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'A\\B\\Foo'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>string(8)&nbsp;"stdClass"<br>string(0)&nbsp;""<br>string(8)&nbsp;"stdClass"<br><br>bool(true)<br>string(7)&nbsp;"A\B\Foo"<br>string(3)&nbsp;"A\B"<br>string(3)&nbsp;"Foo"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getNamespaceName()} - 获取命名空间的名称</span></li>   </ul>   </div></div>
 * 
     * Gets class name
     *
     * @link https://php.net/manual/zh/reflectionclass.getname.php
     * @return string The class name.
     */
    #[Pure]
    #[TentativeType]
    public function getName(): string {}

    /**
 * <div id="reflectionclass.isinternal" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isInternal</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isInternal</span> — <span class="dc-title">检查类是否由扩展或核心在内部定义</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isinternal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInternal</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查类是否由扩展或核心在内部定义，与用户定义相反。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isinternal-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isinternal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.isinternal-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5476">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInternal()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$internalclass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br><br>class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{}<br></span><span style="color: #9876AA">\$userclass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$internalclass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInternal</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$userclass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInternal</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isinternal-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isUserDefined()} - 检查是否由用户定义的</span></li>   </ul>   </div></div>
 * 
     * Checks if class is defined internally by an extension, or the core
     *
     * @link https://php.net/manual/zh/reflectionclass.isinternal.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isInternal(): bool {}

    /**
 * <div id="reflectionclass.isuserdefined" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isUserDefined</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isUserDefined</span> — <span class="dc-title">检查是否由用户定义的</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isuserdefined-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isUserDefined</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查一个类是否由用户定义，和内置相对。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isuserdefined-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isuserdefined-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isuserdefined-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInternal()} - 检查类是否由扩展或核心在内部定义</span></li>   </ul>   </div></div>
 * 
     * Checks if user defined
     *
     * @link https://php.net/manual/zh/reflectionclass.isuserdefined.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isUserDefined(): bool {}

    /**
 * <div id="reflectionclass.isinstantiable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isInstantiable</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isInstantiable</span> — <span class="dc-title">检查类是否可实例化</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isinstantiable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInstantiable</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查这个类是否可实例化。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isinstantiable-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isinstantiable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.isinstantiable-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5474">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInstantiable()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">C </span><span style="color: #007700">{ }<br><br>interface </span><span style="color: #9876AA">iface </span><span style="color: #007700">{<br>    function </span><span style="color: #9876AA">f1</span><span style="color: #007700">();<br>}<br><br>class </span><span style="color: #9876AA">ifaceImpl </span><span style="color: #007700">implements </span><span style="color: #9876AA">iface </span><span style="color: #007700">{<br>    function </span><span style="color: #9876AA">f1</span><span style="color: #007700">() {}<br>}<br><br>abstract class </span><span style="color: #9876AA">abstractClass </span><span style="color: #007700">{<br>    function </span><span style="color: #9876AA">f1</span><span style="color: #007700">() { }<br>    abstract function </span><span style="color: #9876AA">f2</span><span style="color: #007700">();<br>}<br><br>class </span><span style="color: #9876AA">D </span><span style="color: #007700">extends </span><span style="color: #9876AA">abstractClass </span><span style="color: #007700">{<br>    function </span><span style="color: #9876AA">f2</span><span style="color: #007700">() { }<br>}<br><br>trait </span><span style="color: #9876AA">T </span><span style="color: #007700">{<br>    function </span><span style="color: #9876AA">f1</span><span style="color: #007700">() {}<br>}<br><br>class </span><span style="color: #9876AA">privateConstructor </span><span style="color: #007700">{<br>    private function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">() { }<br>}<br><br></span><span style="color: #9876AA">\$classes </span><span style="color: #007700">= array(<br>    </span><span style="color: #DD0000">"C"</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"iface"</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"ifaceImpl"</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"abstractClass"</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"D"</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"T"</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">"privateConstructor"</span><span style="color: #007700">,<br>);<br><br>foreach(</span><span style="color: #9876AA">\$classes  </span><span style="color: #007700">as </span><span style="color: #9876AA">\$class </span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$reflectionClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">);<br>    echo </span><span style="color: #DD0000">"Is </span><span style="color: #9876AA">\$class</span><span style="color: #DD0000"> instantiable?  "</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInstantiable</span><span style="color: #007700">()); <br>}<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Is&nbsp;C&nbsp;instantiable?&nbsp;&nbsp;bool(true)<br>Is&nbsp;iface&nbsp;instantiable?&nbsp;&nbsp;bool(false)<br>Is&nbsp;ifaceImpl&nbsp;instantiable?&nbsp;&nbsp;bool(true)<br>Is&nbsp;abstractClass&nbsp;instantiable?&nbsp;&nbsp;bool(false)<br>Is&nbsp;D&nbsp;instantiable?&nbsp;&nbsp;bool(true)<br>Is&nbsp;T&nbsp;instantiable?&nbsp;&nbsp;bool(false)<br>Is&nbsp;privateConstructor&nbsp;instantiable?&nbsp;&nbsp;bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isinstantiable-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInstance()} - 检查类的实例</span></li>   </ul>   </div></div>
 * 
     * Checks if the class is instantiable
     *
     * @link https://php.net/manual/zh/reflectionclass.isinstantiable.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isInstantiable(): bool {}

    /**
 * <div id="reflectionclass.iscloneable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isCloneable</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isCloneable</span> — <span class="dc-title">返回了一个类是否可复制</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.iscloneable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isCloneable</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   返回了这个类是否可复制。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.iscloneable-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.iscloneable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果这个类可以复制返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.iscloneable-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5471">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isCloneable()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">NotCloneable </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">\$var1</span><span style="color: #007700">;<br>    <br>    private function </span><span style="color: #9876AA">__clone</span><span style="color: #007700">() {<br>    }<br>}<br><br>class </span><span style="color: #9876AA">Cloneable </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">\$var1</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$notCloneable </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'NotCloneable'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$cloneable </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Cloneable'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$notCloneable</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCloneable</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$cloneable</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isCloneable</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>    </div>   </div>   </div></div>
 * 
     * Returns whether this class is cloneable
     *
     * @link https://php.net/manual/zh/reflectionclass.iscloneable.php
     * @return bool Returns {@see true} if the class is cloneable, {@see false} otherwise.
     * @since 5.4
     */
    #[Pure]
    #[TentativeType]
    public function isCloneable(): bool {}

    /**
 * <div id="reflectionclass.getfilename" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getFileName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getFileName</span> — <span class="dc-title">获取定义类的文件名</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getfilename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getFileName</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取类被定义的文件的文件名。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getfilename-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getfilename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回类所定义的文件名。如果这个类是在 PHP 核心或 PHP 扩展中定义的，则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getfilename-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getExtensionName()} - 获取定义的类所在的扩展的名称</span></li>   </ul>   </div></div>
 * 
     * Gets the filename of the file in which the class has been defined
     *
     * @link https://php.net/manual/zh/reflectionclass.getfilename.php
     * @return string|false the filename of the file in which the class has been defined.
     * If the class is defined in the PHP core or in a PHP extension, {@see false}
     * is returned.
     */
    #[Pure]
    #[TentativeType]
    public function getFileName(): string|false {}

    /**
 * <div id="reflectionclass.getstartline" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getStartLine</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getStartLine</span> — <span class="dc-title">获取起始行号</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getstartline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStartLine</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取起始的行号。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getstartline-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getstartline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   起始的行号，类型是 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>，如果未知，则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getstartline-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getEndLine()} - 获取最后一行的行数</span></li>   </ul>   </div></div>
 * 
     * Gets starting line number
     *
     * @link https://php.net/manual/zh/reflectionclass.getstartline.php
     * @return int The starting line number, as an integer.
     */
    #[Pure]
    #[TentativeType]
    public function getStartLine(): int|false {}

    /**
 * <div id="reflectionclass.getendline" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getEndLine</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getEndLine</span> — <span class="dc-title">获取最后一行的行数</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getendline-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getEndLine</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   从用户定义的类获取其最后一行的行数。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getendline-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getendline-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回用户定义的类最后一行的行数，如果未知则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getendline-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5449">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getEndLine()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// Test Class<br></span><span style="color: #007700">class </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$rc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br><br>echo </span><span style="color: #9876AA">\$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getEndLine</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">3</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getendline-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStartLine()} - 获取起始行号</span></li>   </ul>   </div></div>
 * 
     * Gets end line
     *
     * @link https://php.net/manual/zh/reflectionclass.getendline.php
     * @return int|false The ending line number of the user defined class, or
     * {@see false} if unknown.
     */
    #[Pure]
    #[TentativeType]
    public function getEndLine(): int|false {}

    /**
 * <div id="reflectionclass.getdoccomment" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getDocComment</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getDocComment</span> — <span class="dc-title">获取文档注释</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getdoccomment-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getDocComment</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   从类中获取文档注释。文档注释以 <span class="literal">//*</span> 开头，后跟空格。   如果类定义上方有多个文档注释，则采用最接近该类的注释。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getdoccomment-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getdoccomment-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果存在则返回文档注释，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getdoccomment-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5448">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getDocComment()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">//*<br> * A test class<br> *<br> * @param  foo bar<br> * @return baz<br> <br></span><span style="color: #007700">class </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$rc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDocComment</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(61)&nbsp;"//*&nbsp;<br>&nbsp;*&nbsp;A&nbsp;test&nbsp;class<br>&nbsp;*<br>&nbsp;*&nbsp;@param&nbsp;&nbsp;foo&nbsp;bar<br>&nbsp;*&nbsp;@return&nbsp;baz<br>&nbsp;"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getdoccomment-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getName()} - 获取类名</span></li>   </ul>   </div></div>
 * 
     * Gets doc comments
     *
     * @link https://php.net/manual/zh/reflectionclass.getdoccomment.php
     * @return string|false The doc comment if it exists, otherwise {@see false}
     */
    #[Pure]
    #[TentativeType]
    public function getDocComment(): string|false {}

    /**
 * <div id="reflectionclass.getconstructor" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getConstructor</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getConstructor</span> — <span class="dc-title">获取类的构造函数</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getconstructor-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstructor</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></span></div>  <p class="para rdfs-comment">   获取已反射的类的构造函数。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getconstructor-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getconstructor-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> 对象，反射了类的构造函数，或者当类不存在构造函数时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.getconstructor-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5446">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstructor()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$constructor </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstructor</span><span style="color: #007700">();<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$constructor</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionMethod)#2&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;string(11)&nbsp;"__construct"<br>&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;string(15)&nbsp;"ReflectionClass"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getconstructor-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getName()} - 获取类名</span></li>   </ul>   </div></div>
 * 
     * Gets the constructor of the class
     *
     * @link https://php.net/manual/zh/reflectionclass.getconstructor.php
     * @return ReflectionMethod|null A {@see ReflectionMethod} object reflecting
     * the class' constructor, or {@see null} if the class has no constructor.
     */
    #[Pure]
    #[TentativeType]
    public function getConstructor(): ?ReflectionMethod {}

    /**
 * <div id="reflectionclass.hasmethod" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::hasMethod</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::hasMethod</span> — <span class="dc-title">检查方法是否已定义</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.hasmethod-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasMethod</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查一个类中指定的方法是否已定义。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.hasmethod-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要检查的方法的名称。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.hasmethod-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果有这个方法返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.hasmethod-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5465">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasMethod()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">Class </span><span style="color: #9876AA">C </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">publicFoo</span><span style="color: #007700">() {<br>        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    }<br><br>    protected function </span><span style="color: #9876AA">protectedFoo</span><span style="color: #007700">() {<br>        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    }<br><br>    private function </span><span style="color: #9876AA">privateFoo</span><span style="color: #007700">() {<br>        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    }<br><br>    static function </span><span style="color: #9876AA">staticFoo</span><span style="color: #007700">() {<br>        return </span><span style="color: #9876AA">true</span><span style="color: #007700">;<br>    }<br>}<br><br></span><span style="color: #9876AA">\$rc </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">"C"</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'publicFoo'</span><span style="color: #007700">));<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'protectedFoo'</span><span style="color: #007700">));<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'privateFoo'</span><span style="color: #007700">));<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'staticFoo'</span><span style="color: #007700">));<br><br></span><span style="color: #FF8000">// C should not have method bar<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">));<br><br></span><span style="color: #FF8000">// Method names are case insensitive<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'PUBLICfOO'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(true)<br>bool(true)<br>bool(true)<br>bool(false)<br>bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.hasmethod-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasConstant()} - 检查常量是否已经定义</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasProperty()} - 检查属性是否已定义</span></li>   </ul>   </div></div>
 * 
     * Checks if method is defined
     *
     * @link https://php.net/manual/zh/reflectionclass.hasmethod.php
     * @param string $name Name of the method being checked for.
     * @return bool Returns {@see true} if it has the method, otherwise {@see false}
     */
    #[TentativeType]
    public function hasMethod(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): bool {}

    /**
 * <div id="reflectionclass.getmethod" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getMethod</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getMethod</span> — <span class="dc-title">获取类方法的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span></span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getmethod-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethod</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></div>  <p class="para rdfs-comment">   获取类方法的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span>。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getmethod-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要反射的方法名称。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getmethod-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span>。  </p> </div>  <div class="refsect1 errors" id="refsect1-reflectionclass.getmethod-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果方法不存在则会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> 异常。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getmethod-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5454">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethod()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$method </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'getMethod'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$method</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionMethod)#2&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;string(9)&nbsp;"getMethod"<br>&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;string(15)&nbsp;"ReflectionClass"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getmethod-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getMethods()} - 获取方法的数组</span></li>   </ul>   </div></div>
 * 
     * Gets a <b>ReflectionMethod</b> for a class method.
     *
     * @link https://php.net/manual/zh/reflectionclass.getmethod.php
     * @param string $name The method name to reflect.
     * @return ReflectionMethod A {@see ReflectionMethod}
     * @throws ReflectionException if the method does not exist.
     */
    #[Pure]
    #[TentativeType]
    public function getMethod(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): ReflectionMethod {}

    /**
 * <div id="reflectionclass.getmethods" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getMethods</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getMethods</span> — <span class="dc-title">获取方法的数组</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getmethods-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethods</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></span> <span class="parameter" style="color:#3A95FF">\$filter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取类的方法的数组。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getmethods-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">filter</span></dt>     <dd>      <p class="para">       过滤结果为仅包含某些属性的方法。默认不过滤。      </p>      <p class="para">              <strong><span>{@link ReflectionMethod::IS_STATIC}</span></strong>、       <strong><span>{@link ReflectionMethod::IS_PUBLIC}</span></strong>、       <strong><span>{@link ReflectionMethod::IS_PROTECTED}</span></strong>、       <strong><span>{@link ReflectionMethod::IS_PRIVATE}</span></strong>、       <strong><span>{@link ReflectionMethod::IS_ABSTRACT}</span></strong>、       <strong><span>{@link ReflectionMethod::IS_FINAL}</span></strong> 的按位或（OR），就会返回<em>任意</em>满足条件的属性。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        请注意：其他位操作，例如 <span class="literal">~</span> 无法按预期运行。这个示例也就是说，无法获取所有的非静态方法。       </span>      </p></blockquote>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getmethods-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   包含每个方法 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> 对象的<span class="type" style="color:#EAB766">数组</span>。  </p> </div>  <div class="refsect1 changelog" id="refsect1-reflectionclass.getmethods-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.2.0</td>      <td>       <span class="parameter" style="color:#3A95FF">filter</span> 现在允许为 null。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getmethods-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5455">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethods()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">firstMethod</span><span style="color: #007700">() { }<br>    final protected function </span><span style="color: #9876AA">secondMethod</span><span style="color: #007700">() { }<br>    private static function </span><span style="color: #9876AA">thirdMethod</span><span style="color: #007700">() { }<br>}<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$methods </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMethods</span><span style="color: #007700">();<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$methods</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(3)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;object(ReflectionMethod)#2&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(11)&nbsp;"firstMethod"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(5)&nbsp;"Apple"<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;object(ReflectionMethod)#3&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(12)&nbsp;"secondMethod"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(5)&nbsp;"Apple"<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[2]=&gt;<br>&nbsp;&nbsp;object(ReflectionMethod)#4&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(11)&nbsp;"thirdMethod"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(5)&nbsp;"Apple"<br>&nbsp;&nbsp;}<br>}</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5456">    <p><strong>示例 #2 从 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getMethods()</strong></span> 中过滤结果</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">firstMethod</span><span style="color: #007700">() { }<br>    final protected function </span><span style="color: #9876AA">secondMethod</span><span style="color: #007700">() { }<br>    private static function </span><span style="color: #9876AA">thirdMethod</span><span style="color: #007700">() { }<br>}<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$methods </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMethods</span><span style="color: #007700">(</span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_STATIC </span><span style="color: #007700">| </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_FINAL</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$methods</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(2)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;object(ReflectionMethod)#2&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(12)&nbsp;"secondMethod"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(5)&nbsp;"Apple"<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;object(ReflectionMethod)#3&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(11)&nbsp;"thirdMethod"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(5)&nbsp;"Apple"<br>&nbsp;&nbsp;}<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getmethods-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getMethod()} - 获取类方法的 ReflectionMethod</span></li>        <li><span class="function">{@link get_class_methods()} - 返回由类的方法名组成的数组</span></li>   </ul>   </div></div>
 * 
     * Gets an array of methods for the class.
     *
     * @link https://php.net/manual/zh/reflectionclass.getmethods.php
     * @param int|null $filter Filter the results to include only methods
     * with certain attributes. Defaults to no filtering.
     * @return ReflectionMethod[] An array of {@see ReflectionMethod} objects
     * reflecting each method.
     */
    #[Pure]
    #[TentativeType]
    public function getMethods(#[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $filter = null): array {}

    /**
 * <div id="reflectionclass.hasproperty" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::hasProperty</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::hasProperty</span> — <span class="dc-title">检查属性是否已定义</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.hasproperty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasProperty</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查指定的属性是否已定义。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.hasproperty-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       待检查的属性的名称。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.hasproperty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果有这个属性返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.hasproperty-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5466">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasProperty()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public    </span><span style="color: #9876AA">\$p1</span><span style="color: #007700">;<br>    protected </span><span style="color: #9876AA">\$p2</span><span style="color: #007700">;<br>    private   </span><span style="color: #9876AA">\$p3</span><span style="color: #007700">;<br><br>}<br><br></span><span style="color: #9876AA">\$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"p1"</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"p2"</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"p3"</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"p4"</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(true)<br>bool(true)<br>bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.hasproperty-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasConstant()} - 检查常量是否已经定义</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasMethod()} - 检查方法是否已定义</span></li>   </ul>   </div></div>
 * 
     * Checks if property is defined
     *
     * @link https://php.net/manual/zh/reflectionclass.hasproperty.php
     * @param string $name Name of the property being checked for.
     * @return bool Returns {@see true} if it has the property, otherwise {@see false}
     */
    #[TentativeType]
    public function hasProperty(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): bool {}

    /**
 * <div id="reflectionclass.getproperty" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getProperty</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getProperty</span> — <span class="dc-title">获取类的一个属性的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span></span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getproperty-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getProperty</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionproperty.php" class="type ReflectionProperty" style="color:#EAB766">ReflectionProperty</a></span></div>  <p class="para rdfs-comment">   获取类的一个属性的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span>。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getproperty-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       属性名。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getproperty-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.getproperty-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5460">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getProperty()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$property </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$property</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionProperty)#2&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;string(4)&nbsp;"name"<br>&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;string(15)&nbsp;"ReflectionClass"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getproperty-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperties()} - 获取属性</span></li>   </ul>   </div></div>
 * 
     * Gets a <b>ReflectionProperty</b> for a class's property
     *
     * @link https://php.net/manual/zh/reflectionclass.getproperty.php
     * @param string $name The property name.
     * @return ReflectionProperty A {@see ReflectionProperty}
     * @throws ReflectionException If no property exists by that name.
     */
    #[Pure]
    #[TentativeType]
    public function getProperty(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): ReflectionProperty {}

    /**
 * <div id="reflectionclass.getproperties" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getProperties</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getProperties</span> — <span class="dc-title">获取属性</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getproperties-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getProperties</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></span> <span class="parameter" style="color:#3A95FF">\$filter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取反射过的属性。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getproperties-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">filter</span></dt>     <dd>      <p class="para">       可选的过滤器，过滤为所需类型的属性。它使用 <a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.modifiers" class="link">ReflectionProperty 常量</a> 来配置，默认获取所有类型的属性。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getproperties-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="classname"><a href="https://php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span> 对象的数组。  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionclass.getproperties-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.2.0</td>      <td>       <span class="parameter" style="color:#3A95FF">filter</span> 现在允许为 null。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getproperties-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionclass.getproperties.example.filter">   <p><strong>示例 #1 <span class="function"><strong>ReflectionClass::getProperties()</strong></span> 过滤示例</strong></p>   <div class="example-contents"><p>    这个示例延时了可选 <span class="parameter" style="color:#3A95FF">filter</span> 参数的用法，示例里实际上忽略了私有属性。   </p></div>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public    </span><span style="color: #9876AA">\$foo  </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br>    protected </span><span style="color: #9876AA">\$bar  </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br>    private   </span><span style="color: #9876AA">\$baz  </span><span style="color: #007700">= </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">\$reflect </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">\$foo</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$props   </span><span style="color: #007700">= </span><span style="color: #9876AA">\$reflect</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperties</span><span style="color: #007700">(</span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_PUBLIC </span><span style="color: #007700">| </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_PROTECTED</span><span style="color: #007700">);<br><br>foreach (</span><span style="color: #9876AA">\$props </span><span style="color: #007700">as </span><span style="color: #9876AA">\$prop</span><span style="color: #007700">) {<br>    print </span><span style="color: #9876AA">\$prop</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$props</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">foo<br>bar<br>array(2)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;object(ReflectionProperty)#3&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"foo"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"Foo"<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;object(ReflectionProperty)#4&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"bar"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"Foo"<br>&nbsp;&nbsp;}<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getproperties-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperty()} - 获取类的一个属性的 ReflectionProperty</span></li>    <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionproperty.php" class="classname">ReflectionProperty</a></span></li>    <li><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.modifiers" class="link">ReflectionProperty 修饰符常量</a></li>   </ul>   </div></div>
 * 
     * Gets properties
     *
     * @link https://php.net/manual/zh/reflectionclass.getproperties.php
     * @param int|null $filter The optional filter, for filtering desired
     * property types. It's configured using the {@see ReflectionProperty} constants,
     * and defaults to all property types.
     * @return ReflectionProperty[]
     */
    #[Pure]
    #[TentativeType]
    public function getProperties(#[LanguageLevelTypeAware(['8.0' => 'int|null'], default: '')] $filter = null): array {}

    /**
 * <div id="reflectionclass.getreflectionconstant" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getReflectionConstant</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getReflectionConstant</span> — <span class="dc-title">Gets a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span> for a class's constant</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getreflectionconstant-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getReflectionConstant</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="type ReflectionClassConstant" style="color:#EAB766">ReflectionClassConstant</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   Gets a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span> for a class's constant.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getreflectionconstant-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       The class constant name.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getreflectionconstant-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span>,  或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div>  <div class="refsect1 seealso" id="refsect1-reflectionclass.getreflectionconstant-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getReflectionConstants()} - Gets class constants</span></li>    <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span></li>   </ul>   </div></div>
 * 
     * Gets a ReflectionClassConstant for a class's property
     *
     * @link https://php.net/manual/zh/reflectionclass.getreflectionconstant.php
     * @param string $name The class constant name.
     * @return ReflectionClassConstant|false A {@see ReflectionClassConstant}.
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function getReflectionConstant(string $name): ReflectionClassConstant|false {}

    /**
 * <div id="reflectionclass.getreflectionconstants" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getReflectionConstants</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getReflectionConstants</span> — <span class="dc-title">Gets class constants</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getreflectionconstants-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getReflectionConstants</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></span> <span class="parameter" style="color:#3A95FF">\$filter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   Retrieves reflected constants.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getreflectionconstants-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">filter</span></dt>    <dd>     <p class="para">      The optional filter, for filtering desired constant visibilities. It's configured using      the <a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.modifiers" class="link">ReflectionClassConstant constants</a>,      and defaults to all constant visibilities.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getreflectionconstants-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   An array of <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span> objects.  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionclass.getreflectionconstants-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">filter</span> has been added.      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getreflectionconstants-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionclass.getreflectionconstants.example">   <p><strong>示例 #1 Basic <span class="function"><strong>ReflectionClass::getReflectionConstants()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public    const </span><span style="color: #9876AA">FOO  </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br>    protected const </span><span style="color: #9876AA">BAR  </span><span style="color: #007700">= </span><span style="color: #9876AA">2</span><span style="color: #007700">;<br>    private   const </span><span style="color: #9876AA">BAZ  </span><span style="color: #007700">= </span><span style="color: #9876AA">3</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">\$reflect </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">\$foo</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$consts  </span><span style="color: #007700">= </span><span style="color: #9876AA">\$reflect</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getReflectionConstants</span><span style="color: #007700">();<br><br>foreach (</span><span style="color: #9876AA">\$consts </span><span style="color: #007700">as </span><span style="color: #9876AA">\$const</span><span style="color: #007700">) {<br>    print </span><span style="color: #9876AA">\$const</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$consts</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">FOO<br>BAR<br>BAZ<br>array(3)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;object(ReflectionClassConstant)#3&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"FOO"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"Foo"<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;object(ReflectionClassConstant)#4&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"BAR"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"Foo"<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[2]=&gt;<br>&nbsp;&nbsp;object(ReflectionClassConstant)#5&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"BAZ"<br>&nbsp;&nbsp;&nbsp;&nbsp;["class"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;string(3)&nbsp;"Foo"<br>&nbsp;&nbsp;}<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getreflectionconstants-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getReflectionConstant()} - Gets a ReflectionClassConstant for a class's constant</span></li>    <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span></li>   </ul>   </div></div>
 * 
     * Gets class constants
     *
     * @link https://php.net/manual/zh/reflectionclass.getreflectionconstants.php
     * @param int|null $filter [optional] allows the filtering of constants defined in a class by their visibility. Since 8.0.
     * @return ReflectionClassConstant[] An array of ReflectionClassConstant objects.
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function getReflectionConstants(#[PhpStormStubsElementAvailable(from: '8.0')] ?int $filter = null): array {}

    /**
 * <div id="reflectionclass.hasconstant" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::hasConstant</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::hasConstant</span> — <span class="dc-title">检查常量是否已经定义</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.hasconstant-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasConstant</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查类中是否已经定义了指定的常量。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.hasconstant-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要被检查的常量名称。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.hasconstant-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果已定义返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.hasconstant-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5464">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::hasConstant()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    const </span><span style="color: #9876AA">c1 </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">"Foo"</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">"c1"</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">"c2"</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.hasconstant-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasMethod()} - 检查方法是否已定义</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::hasProperty()} - 检查属性是否已定义</span></li>   </ul>   </div></div>
 * 
     * Checks if constant is defined
     *
     * @link https://php.net/manual/zh/reflectionclass.hasconstant.php
     * @param string $name The name of the constant being checked for.
     * @return bool Returns {@see true} if the constant is defined, otherwise {@see false}
     */
    #[TentativeType]
    public function hasConstant(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): bool {}

    /**
 * <div id="reflectionclass.getconstants" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getConstants</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getConstants</span> — <span class="dc-title">获取常量</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getconstants-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstants</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></span> <span class="parameter" style="color:#3A95FF">\$filter</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   从类中获取所有已定义的常量，而不管它们的可见性如何。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getconstants-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">filter</span></dt>    <dd>     <p class="para">      可选过滤器，传入过滤所需的可见性常量。可用      <a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.modifiers" class="link">ReflectionClassConstant 常量</a>      进行配置，默认为所有可见性常量。     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getconstants-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   常量的<span class="type" style="color:#EAB766">数组</span>，常量名是数组的键，常量的值是数组的值。  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionclass.getconstants-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       添加 <span class="parameter" style="color:#3A95FF">filter</span> 。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getconstants-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getConstant()} - 获取已定义的常量</span></li>   </ul>   </div></div>
 * 
     * Gets constants
     *
     * @link https://php.net/manual/zh/reflectionclass.getconstants.php
     * @param int|null $filter [optional] allows the filtering of constants defined in a class by their visibility. Since 8.0.
     * @return array An array of constants, where the keys hold the name and
     * the values the value of the constants.
     */
    #[Pure]
    #[TentativeType]
    public function getConstants(#[PhpStormStubsElementAvailable(from: '8.0')] ?int $filter = null): array {}

    /**
 * <div id="reflectionclass.getconstant" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getConstant</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getConstant</span> — <span class="dc-title">获取已定义的常量</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getconstant-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstant</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   获取已定义的常量。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getconstant-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       要获取的类常量的名称。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getconstant-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   常量名称为 <span class="parameter" style="color:#3A95FF">name</span> 的值。   如果在类中没有找到该常量，则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getconstant-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5445">    <p><strong>示例 #1 使用 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getConstant()</strong></span></strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example </span><span style="color: #007700">{<br>    const </span><span style="color: #9876AA">C1 </span><span style="color: #007700">= </span><span style="color: #9876AA">false</span><span style="color: #007700">;<br>    const </span><span style="color: #9876AA">C2 </span><span style="color: #007700">= </span><span style="color: #DD0000">'I am a constant'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$reflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Example'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'C1'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'C2'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'C3'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>string(15)&nbsp;"I&nbsp;am&nbsp;a&nbsp;constant"<br>bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getconstant-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getConstants()} - 获取常量</span></li>   </ul>   </div></div>
 * 
     * Gets defined constant
     *
     * @link https://php.net/manual/zh/reflectionclass.getconstant.php
     * @param string $name Name of the constant.
     * @return mixed|false Value of the constant with the name name.
     * Returns {@see false} if the constant was not found in the class.
     */
    #[Pure]
    #[TentativeType]
    public function getConstant(#[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name): mixed {}

    /**
 * <div id="reflectionclass.getinterfaces" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getInterfaces</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getInterfaces</span> — <span class="dc-title">获取接口</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getinterfaces-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getInterfaces</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取接口。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getinterfaces-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getinterfaces-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   接口的关联<span class="type" style="color:#EAB766">数组</span>，数组键是接口（interface）的名称，数组的值是 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> 对象。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getinterfaces-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5453">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getInterfaces()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">interface </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br><br>interface </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{ }<br><br>class </span><span style="color: #9876AA">Baz </span><span style="color: #007700">implements </span><span style="color: #9876AA">Foo</span><span style="color: #007700">, </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$rc1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">"Baz"</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInterfaces</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[Foo]&nbsp;=&gt;&nbsp;ReflectionClass&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[name]&nbsp;=&gt;&nbsp;Foo<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;[Bar]&nbsp;=&gt;&nbsp;ReflectionClass&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[name]&nbsp;=&gt;&nbsp;Bar<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br><br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getinterfaces-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getInterfaceNames()} - 获取接口（interface）名称</span></li>   </ul>   </div></div>
 * 
     * Gets the interfaces
     *
     * @link https://php.net/manual/zh/reflectionclass.getinterfaces.php
     * @return ReflectionClass[] An associative array of interfaces, with keys as interface
     * names and the array values as {@see ReflectionClass} objects.
     */
    #[Pure]
    #[TentativeType]
    public function getInterfaces(): array {}

    /**
 * <div id="reflectionclass.getinterfacenames" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getInterfaceNames</h1>  <p class="verinfo">(PHP 5 &gt;= 5.2.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getInterfaceNames</span> — <span class="dc-title">获取接口（interface）名称</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getinterfacenames-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getInterfaceNames</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取接口（interface）名称。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getinterfacenames-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getinterfacenames-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   一个数值数组，接口（interface）的名称是数组的值。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getinterfacenames-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5452">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getInterfaceNames()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">interface </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br><br>interface </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{ }<br><br>class </span><span style="color: #9876AA">Baz </span><span style="color: #007700">implements </span><span style="color: #9876AA">Foo</span><span style="color: #007700">, </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$rc1 </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">"Baz"</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$rc1</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getInterfaceNames</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Foo<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;Bar<br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getinterfacenames-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getInterfaces()} - 获取接口</span></li>   </ul>   </div></div>
 * 
     * Gets the interface names
     *
     * @link https://php.net/manual/zh/reflectionclass.getinterfacenames.php
     * @return string[] A numerical array with interface names as the values.
     */
    #[Pure]
    #[TentativeType]
    public function getInterfaceNames(): array {}

    /**
 * <div id="reflectionclass.isanonymous" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isAnonymous</h1>  <p class="verinfo">(PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isAnonymous</span> — <span class="dc-title">检查类是否是匿名类</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isanonymous-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isAnonymous</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查类是否是匿名类。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isanonymous-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isanonymous-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.isanonymous-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5470">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isAnonymous()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{}<br></span><span style="color: #9876AA">\$anonClass </span><span style="color: #007700">= new class {};<br><br></span><span style="color: #9876AA">\$normalClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$anonClass  </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">\$anonClass</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$normalClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAnonymous</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$anonClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAnonymous</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isanonymous-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isFinal()} - 检查类是否声明为 final</span></li>   </ul>   </div></div>
 * 
     * Checks if the class is anonymous
     *
     * @link https://php.net/manual/zh/reflectionclass.isanonymous.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     * @since 7.0
     */
    #[Pure]
    #[TentativeType]
    public function isAnonymous(): bool {}

    /**
 * <div id="reflectionclass.isinterface" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isInterface</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isInterface</span> — <span class="dc-title">检查类是否是一个接口（interface）</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isinterface-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInterface</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查类是否是一个接口（interface）。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isinterface-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isinterface-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.isinterface-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5475">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInterface()</strong></span> 基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">interface </span><span style="color: #9876AA">SomeInterface </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">interfaceMethod</span><span style="color: #007700">();<br>}<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'SomeInterface'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInterface</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isinterface-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInstance()} - 检查类的实例</span></li>   </ul>   </div></div>
 * 
     * Checks if the class is an interface
     *
     * @link https://php.net/manual/zh/reflectionclass.isinterface.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isInterface(): bool {}

    /**
 * <div id="reflectionclass.gettraits" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getTraits</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getTraits</span> — <span class="dc-title">返回这个类所使用的 traits 数组</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.gettraits-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getTraits</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取该类使用的 trait 数组。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.gettraits-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.gettraits-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回了数组，键是 trait 的名称，值是 trait 实例的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span>。   出现错误的情况下返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div></div>
 * 
     * Returns an array of traits used by this class
     *
     * @link https://php.net/manual/zh/reflectionclass.gettraits.php
     * @return ReflectionClass[] an array with trait names in keys and
     * instances of trait's {@see ReflectionClass} in values.
     * @since 5.4
     */
    #[Pure]
    #[TentativeType]
    public function getTraits(): array {}

    /**
 * <div id="reflectionclass.gettraitnames" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getTraitNames</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getTraitNames</span> — <span class="dc-title">返回这个类所使用 traits 的名称的数组</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.gettraitnames-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getTraitNames</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取该类使用的 trait 名称。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.gettraitnames-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.gettraitnames-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回的数组的值包含了 trait 的名称。  </p> </div></div>
 * 
     * Returns an array of names of traits used by this class
     *
     * @link https://php.net/manual/zh/reflectionclass.gettraitnames.php
     * @return string[] An array with trait names in values.
     * Returns {@see null} in case of an error.
     * @since 5.4
     */
    #[Pure]
    #[TentativeType]
    public function getTraitNames(): array {}

    /**
 * <div id="reflectionclass.gettraitaliases" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getTraitAliases</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getTraitAliases</span> — <span class="dc-title">返回 trait 别名数组</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.gettraitaliases-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getTraitAliases</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取当前类中定义的 trait 方法别名数组。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.gettraitaliases-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.gettraitaliases-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回数组，新的方法名位于键中，原始名称（格式是   <span class="literal">"TraitName::original"</span>）位于数组的值中。  </p> </div></div>
 * 
     * Returns an array of trait aliases
     *
     * @link https://php.net/manual/zh/reflectionclass.gettraitaliases.php
     * @return string[] an array with new method names in keys and original
     * names (in the format "TraitName::original") in values.
     * Returns {@see null} in case of an error.
     * @since 5.4
     */
    #[Pure]
    #[TentativeType]
    public function getTraitAliases(): array {}

    /**
 * <div id="reflectionclass.istrait" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isTrait</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isTrait</span> — <span class="dc-title">返回了是否是 trait</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.istrait-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isTrait</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span> 是否指向 trait。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.istrait-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.istrait-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果是 trait 返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div></div>
 * 
     * Returns whether this is a trait
     *
     * @link https://php.net/manual/zh/reflectionclass.istrait.php
     * @return bool Returns {@see true} if this is a trait, {@see false} otherwise.
     * Returns {@see null} in case of an error.
     * @since 5.4
     */
    #[Pure]
    #[TentativeType]
    public function isTrait(): bool {}

    /**
 * <div id="reflectionclass.isabstract" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isAbstract</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isAbstract</span> — <span class="dc-title">检查类是否是抽象类（abstract）</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isabstract-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isAbstract</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查这个类是否是抽象类（abstract）。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isabstract-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isabstract-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.isabstract-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5469">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isAbstract()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class          </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br>abstract class </span><span style="color: #9876AA">TestAbstractClass </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$testClass     </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$abstractClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestAbstractClass'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$testClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAbstract</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$abstractClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isAbstract</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isabstract-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInterface()} - 检查类是否是一个接口（interface）</span></li>    <li><a href="https://php.net/manual/zh/language.oop5.abstract.php" class="link">类的抽象</a></li>   </ul>   </div></div>
 * 
     * Checks if class is abstract
     *
     * @link https://php.net/manual/zh/reflectionclass.isabstract.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isAbstract(): bool {}

    /**
 * <div id="reflectionclass.isfinal" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isFinal</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isFinal</span> — <span class="dc-title">检查类是否声明为 final</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isfinal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isFinal</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查类是否声明为 final。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isfinal-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isfinal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.isfinal-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5472">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isFinal()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class       </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br>final class </span><span style="color: #9876AA">TestFinalClass </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$normalClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$finalClass  </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestFinalClass'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$normalClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isFinal</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$finalClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isFinal</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isfinal-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isAbstract()} - 检查类是否是抽象类（abstract）</span></li>    <li><a href="https://php.net/manual/zh/language.oop5.final.php" class="link">Final 关键字</a></li>   </ul>   </div></div>
 * 
     * Checks if class is final
     *
     * @link https://php.net/manual/zh/reflectionclass.isfinal.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isFinal(): bool {}

    /**
 * <div id="reflectionclass.isreadonly" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isReadOnly</h1>  <p class="verinfo">(PHP 8 &gt;= 8.2.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::isReadOnly</span> — <span class="dc-title">Checks if class is readonly</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isreadonly-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isReadOnly</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if a class is <a href="https://php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.class.readonly" class="link">readonly</a>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isreadonly-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isreadonly-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if a class is readonly, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.isreadonly-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5478">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isReadOnly()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">TestClass </span><span style="color: #007700">{ }<br>readonly class </span><span style="color: #9876AA">TestReadOnlyClass </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$normalClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$readonlyClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'TestReadOnlyClass'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$normalClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isReadOnly</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$readonlyClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isReadOnly</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isreadonly-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isAbstract()} - 检查类是否是抽象类（abstract）</span></li>    <li><a href="https://php.net/manual/zh/language.oop5.basic.php#language.oop5.basic.class.readonly" class="link">Readonly classes</a></li>   </ul>   </div></div>
 * 
     * @return bool
     */
    #[Pure]
    #[PhpStormStubsElementAvailable(from: '8.2')]
    public function isReadOnly(): bool {}

    /**
 * <div id="reflectionclass.getmodifiers" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getModifiers</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getModifiers</span> — <span class="dc-title">获取类的修饰符</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getmodifiers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getModifiers</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   返回这个类访问修饰符的位字段。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getmodifiers-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getmodifiers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 <a href="https://php.net/manual/zh/class.reflectionclass.php#reflectionclass.constants.modifiers" class="link">   修饰符常量</a> 的位掩码。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getmodifiers-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperties()} - 获取属性</span></li>     <li><span class="methodname" style="color:#CC7832">{@link Reflection::getModifierNames()} - 获取修饰符的名称</span></li>   </ul>   </div></div>
 * 
     * Gets modifiers
     *
     * @link https://php.net/manual/zh/reflectionclass.getmodifiers.php
     * @return int bitmask of modifier constants.
     */
    #[Pure]
    #[TentativeType]
    public function getModifiers(): int {}

    /**
 * <div id="reflectionclass.isinstance" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isInstance</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isInstance</span> — <span class="dc-title">检查类的实例</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isinstance-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInstance</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查对象是否为一个类的实例。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isinstance-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       待比较的对象。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isinstance-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.isinstance-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5473">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isInstance()</strong></span> 相关示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// Example usage<br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br><br>if (</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInstance</span><span style="color: #007700">(</span><span style="color: #9876AA">\$arg</span><span style="color: #007700">)) {<br>    echo </span><span style="color: #DD0000">"Yes"</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #FF8000">// Equivalent to<br></span><span style="color: #007700">if (</span><span style="color: #9876AA">\$arg </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Foo</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"Yes"</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #FF8000">// Equivalent to<br></span><span style="color: #007700">if (</span><span style="color: #9876AA">is_a</span><span style="color: #007700">(</span><span style="color: #9876AA">\$arg</span><span style="color: #007700">, </span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">)) {<br>    echo </span><span style="color: #DD0000">"Yes"</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Yes<br>Yes<br>Yes</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isinstance-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInterface()} - 检查类是否是一个接口（interface）</span></li>    <li><a href="https://php.net/manual/zh/language.operators.type.php" class="link">类型运算符（instanceof）</a></li>    <li><a href="https://php.net/manual/zh/language.oop5.interfaces.php" class="link">对象接口</a></li>    <li><span class="function">{@link is_a()} - 检查对象是否属于一个给定的类型或子类型。</span></li>   </ul>   </div></div>
 * 
     * Checks class for instance
     *
     * @link https://php.net/manual/zh/reflectionclass.isinstance.php
     * @param object $object The object being compared to.
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isInstance(#[LanguageLevelTypeAware(['8.0' => 'object'], default: '')] $object): bool {}

    /**
 * <div id="reflectionclass.newinstance" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::newInstance</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::newInstance</span> — <span class="dc-title">从指定的参数创建新类实例</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.newinstance-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newInstance</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div>  <p class="para rdfs-comment">   创建类的新的实例。给出的参数将会传递到类的构造函数。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.newinstance-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       接受可变数目的参数，用于传递到类的构造函数，和 <span class="function">{@link call_user_func()}</span> 很相似。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.newinstance-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionclass.newinstance-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果类的构造函数不是 public 的将会导致一个 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p>  <p class="para">   当 <span class="parameter" style="color:#3A95FF">args</span> 指定了一个或多个参数，而类不具有构造函数时,将导致一个 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.newinstance-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceArgs()} - 从给出的参数创建一个新的类实例</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceWithoutConstructor()} - 创建新的类实例而不调用它的构造函数</span></li>   </ul>   </div></div>
 * 
     * Creates a new class instance from given arguments.
     *
     * @link https://php.net/manual/zh/reflectionclass.newinstance.php
     * @param mixed ...$args Accepts a variable number of arguments which are
     * passed to the class constructor, much like {@see call_user_func}
     * @return T a new instance of the class.
     * @throws ReflectionException if the class constructor is not public or if
     * the class does not have a constructor and the $args parameter contains
     * one or more parameters.
     */
    public function newInstance(...$args) {}

    /**
 * <div id="reflectionclass.newinstancewithoutconstructor" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::newInstanceWithoutConstructor</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::newInstanceWithoutConstructor</span> — <span class="dc-title">创建新的类实例而不调用它的构造函数</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.newinstancewithoutconstructor-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newInstanceWithoutConstructor</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div>  <p class="para rdfs-comment">   创建一个新的类的实例而不调用它的构造函数。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.newinstancewithoutconstructor-parameters">  <h3 class="title">参数</h3>  <p class="para">  </p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.newinstancewithoutconstructor-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  </p> </div>  <div class="refsect1 errors" id="refsect1-reflectionclass.newinstancewithoutconstructor-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果这个类是必须调用构造函数来实例化的内置类，将导致 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。此异常仅限于   <a href="https://php.net/manual/zh/language.oop5.final.php" class="link">final</a> 的内置类。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.newinstancewithoutconstructor-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstance()} - 从指定的参数创建新类实例</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceArgs()} - 从给出的参数创建一个新的类实例</span></li>   </ul>   </div></div>
 * 
     * Creates a new class instance without invoking the constructor.
     *
     * @link https://php.net/manual/zh/reflectionclass.newinstancewithoutconstructor.php
     * @return T a new instance of the class.
     * @throws ReflectionException if the class is an internal class that
     * cannot be instantiated without invoking the constructor. In PHP 5.6.0
     * onwards, this exception is limited only to internal classes that are final.
     * @since 5.4
     */
    #[TentativeType]
    public function newInstanceWithoutConstructor(): object {}

    /**
 * <div id="reflectionclass.newinstanceargs" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::newInstanceArgs</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.3, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::newInstanceArgs</span> — <span class="dc-title">从给出的参数创建一个新的类实例</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.newinstanceargs-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newInstanceArgs</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$args</span><span class="initializer"> = []</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span></div>  <p class="para rdfs-comment">   创建一个类的新实例，给出的参数将传递到类的构造函数。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.newinstanceargs-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       这个参数以 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 形式传递到类的构造函数。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.newinstanceargs-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回类的新实例，失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionclass.newinstanceargs-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果类的构造函数不是 public 的将导致产生 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p>  <p class="para">   当 <span class="parameter" style="color:#3A95FF">args</span> 指定了一个或多个参数，而类不具有构造函数时,将导致 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.newinstanceargs-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5482">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newInstanceArgs()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionFunction'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$instance </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">newInstanceArgs</span><span style="color: #007700">(array(</span><span style="color: #DD0000">'substr'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$instance</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionFunction)#2&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;string(6)&nbsp;"substr"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.newinstanceargs-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstance()} - 从指定的参数创建新类实例</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceWithoutConstructor()} - 创建新的类实例而不调用它的构造函数</span></li>   </ul>   </div></div>
 * 
     * Creates a new class instance from given arguments.
     *
     * @link https://php.net/manual/zh/reflectionclass.newinstanceargs.php
     * @param array $args The parameters to be passed to the class constructor as an array.
     * @return T|null a new instance of the class.
     * @throws ReflectionException if the class constructor is not public or if
     * the class does not have a constructor and the $args parameter contains
     * one or more parameters.
     * @since 5.1.3
     */
    #[TentativeType]
    public function newInstanceArgs(array $args = []): ?object {}

    /**
 * <div id="reflectionclass.getparentclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getParentClass</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getParentClass</span> — <span class="dc-title">获取父类</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getparentclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getParentClass</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取父级类。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getparentclass-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getparentclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span>，没有父类为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getparentclass-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::__construct()} - 初始化 ReflectionClass 类</span></li>   </ul>   </div></div>
 * 
     * Gets parent class
     *
     * @link https://php.net/manual/zh/reflectionclass.getparentclass.php
     * @return ReflectionClass|false A {@see ReflectionClass} or {@see false}
     * if there's no parent.
     */
    #[Pure]
    #[TentativeType]
    public function getParentClass(): ReflectionClass|false {}

    /**
 * <div id="reflectionclass.issubclassof" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isSubclassOf</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isSubclassOf</span> — <span class="dc-title">检查是否为子类</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.issubclassof-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isSubclassOf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查类是否为指定类的子类，或者实现了指定的接口。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.issubclassof-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       要检查的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> 形式的类名或者类的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span> 对象。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.issubclassof-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.issubclassof-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInterface()} - 检查类是否是一个接口（interface）</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::implementsInterface()} - 实现接口</span></li>    <li><span class="function">{@link is_subclass_of()} - 检查对象是否继承或者实现（implement）此类</span></li>    <li><span class="function">{@link get_parent_class()} - 检索对象或者类的父级类名</span></li>   </ul>   </div></div>
 * 
     * Checks if a subclass
     *
     * @link https://php.net/manual/zh/reflectionclass.issubclassof.php
     * @param string|ReflectionClass $class Either the name of the class as
     * string or a {@see ReflectionClass} object of the class to check against.
     * @return bool {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isSubclassOf(#[LanguageLevelTypeAware(['8.0' => 'ReflectionClass|string'], default: '')] $class): bool {}

    /**
 * <div id="reflectionclass.getstaticproperties" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getStaticProperties</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getStaticProperties</span> — <span class="dc-title">获取静态（static）属性</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getstaticproperties-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStaticProperties</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取静态（static）属性。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getstaticproperties-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getstaticproperties-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   静态（static）的属性，类型是 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>。  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionclass.getstaticproperties-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.3.0</td>      <td>       <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStaticProperties()</strong></span> 的返回类型已经从       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 更改为 <span class="literal">?array</span>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getstaticproperties-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticPropertyValue()} - 获取静态（static）属性的值</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::setStaticPropertyValue()} - 设置 public static 属性的值</span></li>   </ul>   </div></div>
 * 
     * Gets static properties
     *
     * @link https://php.net/manual/zh/reflectionclass.getstaticproperties.php
     * @return array|null The static properties, as an array where the keys hold
     * the name and the values the value of the properties.
     */
    #[Pure]
    #[TentativeType]
    #[LanguageLevelTypeAware(['8.3' => 'array'], default: 'array|null')]
    public function getStaticProperties() {}

    /**
 * <div id="reflectionclass.getstaticpropertyvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getStaticPropertyValue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getStaticPropertyValue</span> — <span class="dc-title">获取静态（static）属性的值</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getstaticpropertyvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStaticPropertyValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$def_value</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   获取这个类里静态（static）属性的值。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getstaticpropertyvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       静态属性的名称，来返回它的值。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">def_value</span></dt>     <dd>      <p class="para">       假如类没有定义 <span class="parameter" style="color:#3A95FF">name</span> 的 static 属性，将返回一个默认值。       如果属性不存在，并且省略了此参数，将会抛出       <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> 。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getstaticpropertyvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   静态属性的值。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.getstaticpropertyvalue-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5463">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getStaticPropertyValue()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br>    public static </span><span style="color: #9876AA">\$color </span><span style="color: #007700">= </span><span style="color: #DD0000">'Red'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getStaticPropertyValue</span><span style="color: #007700">(</span><span style="color: #DD0000">'color'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(3)&nbsp;"Red"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getstaticpropertyvalue-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticProperties()} - 获取静态（static）属性</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::setStaticPropertyValue()} - 设置 public static 属性的值</span></li>   </ul>   </div></div>
 * 
     * Gets static property value
     *
     * @link https://php.net/manual/zh/reflectionclass.getstaticpropertyvalue.php
     * @param string $name The name of the static property for which to return a value.
     * @param mixed $default [optional] A default value to return in case the class does
     * not declare a static property with the given name. If the property does
     * not exist and this argument is omitted, a {@see ReflectionException} is thrown.
     * @return mixed The value of the static property.
     */
    #[Pure]
    #[TentativeType]
    public function getStaticPropertyValue(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $default
    ): mixed {}

    /**
 * <div id="reflectionclass.setstaticpropertyvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::setStaticPropertyValue</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::setStaticPropertyValue</span> — <span class="dc-title">设置 public static 属性的值</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.setstaticpropertyvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::setStaticPropertyValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="simpara">   设置 public 静态属性的值。如果属性是 private 或 protected，则方法会失败。  </p>  <p class="simpara">   <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setValue()}</span> 允许设置 public、private 和 protected 属性的值。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.setstaticpropertyvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       属性的名称。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       属性的值。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.setstaticpropertyvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionclass.setstaticpropertyvalue-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.4.0</td>      <td>       使用 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::setStaticPropertyValue()</strong></span> 设置 private 或 protected       静态属性现在会导致致命错误。之前会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.setstaticpropertyvalue-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticPropertyValue()} - 获取静态（static）属性的值</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setValue()} - Set property value</span></li>   </ul>   </div></div>
 * 
     * Sets static property value
     *
     * @link https://php.net/manual/zh/reflectionclass.setstaticpropertyvalue.php
     * @param string $name Property name.
     * @param mixed $value New property value.
     * @return void No value is returned.
     */
    #[TentativeType]
    public function setStaticPropertyValue(
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $name,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): void {}

    /**
 * <div id="reflectionclass.getdefaultproperties" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getDefaultProperties</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getDefaultProperties</span> — <span class="dc-title">获取默认属性</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getdefaultproperties-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getDefaultProperties</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   获取类的默认属性（包括了继承的属性）。  </p>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    当在内部类中使用时，此方法仅用于静态属性，当在用户定义类中使用此方法时，无法追踪静态类属性的默认值。   </p>  </blockquote> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getdefaultproperties-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getdefaultproperties-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   默认属性的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>，其键是属性的名称，其值是属性的默认值或者   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>（如果没有默认值）。这个函数不区分静态和非静态属性，也不考虑可见性修饰符。   </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getdefaultproperties-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5447">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getDefaultProperties()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{<br>    protected </span><span style="color: #9876AA">\$inheritedProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'inheritedDefault'</span><span style="color: #007700">;<br>}<br><br>class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">extends </span><span style="color: #9876AA">Bar </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">\$property </span><span style="color: #007700">= </span><span style="color: #DD0000">'propertyDefault'</span><span style="color: #007700">;<br>    private </span><span style="color: #9876AA">\$privateProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'privatePropertyDefault'</span><span style="color: #007700">;<br>    public static </span><span style="color: #9876AA">\$staticProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'staticProperty'</span><span style="color: #007700">;<br>    public </span><span style="color: #9876AA">\$defaultlessProperty</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$reflectionClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDefaultProperties</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(5)&nbsp;{<br>&nbsp;&nbsp;&nbsp;["staticProperty"]=&gt;<br>&nbsp;&nbsp;&nbsp;string(14)&nbsp;"staticProperty"<br>&nbsp;&nbsp;&nbsp;["property"]=&gt;<br>&nbsp;&nbsp;&nbsp;string(15)&nbsp;"propertyDefault"<br>&nbsp;&nbsp;&nbsp;["privateProperty"]=&gt;<br>&nbsp;&nbsp;&nbsp;string(22)&nbsp;"privatePropertyDefault"<br>&nbsp;&nbsp;&nbsp;["defaultlessProperty"]=&gt;<br>&nbsp;&nbsp;&nbsp;NULL<br>&nbsp;&nbsp;&nbsp;["inheritedProperty"]=&gt;<br>&nbsp;&nbsp;&nbsp;string(16)&nbsp;"inheritedDefault"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getdefaultproperties-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperties()} - 获取属性</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticProperties()} - 获取静态（static）属性</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getProperty()} - 获取类的一个属性的 ReflectionProperty</span></li>   </ul>   </div></div>
 * 
     * Gets default properties
     *
     * @link https://php.net/manual/zh/reflectionclass.getdefaultproperties.php
     * @return mixed[] An array of default properties, with the key being the name
     * of the property and the value being the default value of the property
     * or {@see null} if the property doesn't have a default value. The function
     * does not distinguish between static and non static properties and does
     * not take visibility modifiers into account.
     */
    #[Pure]
    #[TentativeType]
    public function getDefaultProperties(): array {}

    /**
 * <div id="reflectionclass.isiterateable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isIterateable</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isIterateable</span> — <span class="dc-title">别名 <span class="methodname" style="color:#CC7832">{@link ReflectionClass::isIterable()}</span></span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isiterateable-description">  <h3 class="title">说明</h3>  <p class="para">别名 <span class="methodname" style="color:#CC7832">{@link ReflectionClass::isIterable()}</span></p>  <p class="para">   自 PHP 7.2.0 起，应该首选 <span class="methodname" style="color:#CC7832"><strong>RefectionClass::isIterable()</strong></span>，而不是拼写错误的   <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isIterateable()</strong></span>。  </p> </div></div>
 * 
     * An alias of {@see ReflectionClass::isIterable} method.
     *
     * @link https://php.net/manual/zh/reflectionclass.isiterateable.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[Pure]
    #[TentativeType]
    public function isIterateable(): bool {}

    /**
 * <div id="reflectionclass.isiterable" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isIterable</h1>  <p class="verinfo">(PHP 7 &gt;= 7.2.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::isIterable</span> — <span class="dc-title">Check whether this class is iterable</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isiterable-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isIterable</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Check whether this class is iterable (i.e. can be used inside <a href="https://php.net/manual/zh/control-structures.foreach.php" class="link"><span class="literal">foreach</span></a>).  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isiterable-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isiterable-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.isiterable-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5477">    <p><strong>示例 #1 Basic <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isIterable()</strong></span> Usage</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">IteratorClass </span><span style="color: #007700">implements </span><span style="color: #9876AA">Iterator </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">() { }<br>    public function </span><span style="color: #9876AA">key</span><span style="color: #007700">() { }<br>    public function </span><span style="color: #9876AA">current</span><span style="color: #007700">() { }<br>    function </span><span style="color: #9876AA">next</span><span style="color: #007700">() { }<br>    function </span><span style="color: #9876AA">valid</span><span style="color: #007700">() { }<br>    function </span><span style="color: #9876AA">rewind</span><span style="color: #007700">() { }<br>}<br>class </span><span style="color: #9876AA">DerivedClass </span><span style="color: #007700">extends </span><span style="color: #9876AA">IteratorClass </span><span style="color: #007700">{ }<br>class </span><span style="color: #9876AA">NonIterator </span><span style="color: #007700">{ }<br><br>function </span><span style="color: #9876AA">dump_iterable</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$reflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">);<br>    </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isIterable</span><span style="color: #007700">());<br>}<br><br></span><span style="color: #9876AA">\$classes </span><span style="color: #007700">= array(</span><span style="color: #DD0000">"ArrayObject"</span><span style="color: #007700">, </span><span style="color: #DD0000">"IteratorClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"DerivedClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"NonIterator"</span><span style="color: #007700">);<br><br>foreach (</span><span style="color: #9876AA">\$classes </span><span style="color: #007700">as </span><span style="color: #9876AA">\$class</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"Is </span><span style="color: #9876AA">\$class</span><span style="color: #DD0000"> iterable? "</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">dump_iterable</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">);<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Is&nbsp;ArrayObject&nbsp;iterable?&nbsp;bool(true)<br>Is&nbsp;IteratorClass&nbsp;iterable?&nbsp;bool(true)<br>Is&nbsp;DerivedClass&nbsp;iterable?&nbsp;bool(true)<br>Is&nbsp;NonIterator&nbsp;iterable?&nbsp;bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isiterable-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::__construct()} - 初始化 ReflectionClass 类</span></li>   </ul>   </div></div>
 * 
     * Check whether this class is iterable
     *
     * @link https://php.net/manual/zh/reflectionclass.isiterable.php
     * @return bool Returns {@see true} on success or {@see false} on failure.
     * @since 7.2
     */
    #[Pure]
    #[TentativeType]
    public function isIterable(): bool {}

    /**
 * <div id="reflectionclass.implementsinterface" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::implementsInterface</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::implementsInterface</span> — <span class="dc-title">实现接口</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.implementsinterface-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::implementsInterface</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$interface</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查其是否实现了接口（interface）。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.implementsinterface-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">interface</span></dt>     <dd>      <p class="para">       接口（interface）的名称。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.implementsinterface-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionclass.implementsinterface-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">interface</span> 不是接口，则   <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::implementsInterface()</strong></span> 会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.implementsinterface-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isInterface()} - 检查类是否是一个接口（interface）</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isSubclassOf()} - 检查是否为子类</span></li>    <li><span class="function">{@link interface_exists()} - 检查接口是否已被定义</span></li>    <li><a href="https://php.net/manual/zh/language.oop5.interfaces.php" class="link">对象接口</a></li>   </ul>   </div></div>
 * 
     * Checks whether it implements an interface.
     *
     * @link https://php.net/manual/zh/reflectionclass.implementsinterface.php
     * @param string $interface The interface name.
     * @return bool Returns {@see true} on success or {@see false} on failure.
     */
    #[TentativeType]
    public function implementsInterface(#[LanguageLevelTypeAware(['8.0' => 'ReflectionClass|string'], default: '')] $interface): bool {}

    /**
 * <div id="reflectionclass.getextension" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getExtension</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getExtension</span> — <span class="dc-title">根据已定义的类获取所在扩展的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="classname">ReflectionExtension</a></span> 对象</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getextension-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getExtension</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div>  <p class="para rdfs-comment">   获取已定义类的扩展的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="classname">ReflectionExtension</a></span> 对象。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getextension-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getextension-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   类所处的扩展的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="classname">ReflectionExtension</a></span> 对象的表示，如果是用户定义的类则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.getextension-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5450">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getExtension()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$extension </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtension</span><span style="color: #007700">();<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$extension</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionExtension)#2&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;["name"]=&gt;<br>&nbsp;&nbsp;string(10)&nbsp;"Reflection"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getextension-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getExtensionName()} - 获取定义的类所在的扩展的名称</span></li>   </ul>   </div></div>
 * 
     * Gets a <b>ReflectionExtension</b> object for the extension which defined the class
     *
     * @link https://php.net/manual/zh/reflectionclass.getextension.php
     * @return ReflectionExtension|null A {@see ReflectionExtension} object representing
     * the extension which defined the class, or {@see null} for user-defined classes.
     */
    #[Pure]
    #[TentativeType]
    public function getExtension(): ?ReflectionExtension {}

    /**
 * <div id="reflectionclass.getextensionname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getExtensionName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getExtensionName</span> — <span class="dc-title">获取定义的类所在的扩展的名称</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getextensionname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getExtensionName</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取定义的类所在的扩展的名称。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getextensionname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getextensionname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   获取定义的类所在的扩展的名称，如果是用户定义的类，则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div>  <div class="refsect1 examples" id="refsect1-reflectionclass.getextensionname-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5451">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getExtensionName()</strong></span> 的基本用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'ReflectionClass'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$extension </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getExtensionName</span><span style="color: #007700">();<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$extension</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(10)&nbsp;"Reflection"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getextensionname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getExtension()} - 根据已定义的类获取所在扩展的 ReflectionExtension 对象</span></li>   </ul>   </div></div>
 * 
     * Gets the name of the extension which defined the class
     *
     * @link https://php.net/manual/zh/reflectionclass.getextensionname.php
     * @return string|false The name of the extension which defined the class,
     * or {@see false} for user-defined classes.
     */
    #[Pure]
    #[TentativeType]
    public function getExtensionName(): string|false {}

    /**
 * <div id="reflectionclass.innamespace" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::inNamespace</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::inNamespace</span> — <span class="dc-title">检查是否位于命名空间中</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.innamespace-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::inNamespace</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查这个类是否定义于一个命名空间中里。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.innamespace-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.innamespace-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.innamespace-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5468">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::inNamespace()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">namespace </span><span style="color: #9876AA">A\B</span><span style="color: #007700">;<br><br>class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'stdClass'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">\$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'A\\B\\Foo'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>string(8)&nbsp;"stdClass"<br>string(0)&nbsp;""<br>string(8)&nbsp;"stdClass"<br><br>bool(true)<br>string(7)&nbsp;"A\B\Foo"<br>string(3)&nbsp;"A\B"<br>string(3)&nbsp;"Foo"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.innamespace-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getNamespaceName()} - 获取命名空间的名称</span></li>    <li><a href="https://php.net/manual/zh/language.namespaces.php" class="link">PHP Namespaces</a></li>   </ul>   </div></div>
 * 
     * Checks if in namespace
     *
     * @link https://php.net/manual/zh/reflectionclass.innamespace.php
     * @return bool {@see true} on success or {@see false} on failure.
     */
    #[TentativeType]
    public function inNamespace(): bool {}

    /**
 * <div id="reflectionclass.getnamespacename" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getNamespaceName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getNamespaceName</span> — <span class="dc-title">获取命名空间的名称</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getnamespacename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getNamespaceName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   获取命名空间（namespace）的名称。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getnamespacename-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getnamespacename-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   命名空间的名称。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getnamespacename-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5458">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getNamespaceName()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">namespace </span><span style="color: #9876AA">A\B</span><span style="color: #007700">;<br><br>class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'stdClass'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'A\\B\\Foo'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>string(8)&nbsp;"stdClass"<br>string(0)&nbsp;""<br>string(8)&nbsp;"stdClass"<br><br>bool(true)<br>string(7)&nbsp;"A\B\Foo"<br>string(3)&nbsp;"A\B"<br>string(3)&nbsp;"Foo"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getnamespacename-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getParentClass()} - 获取父类</span></li>    <li><a href="https://php.net/manual/zh/language.namespaces.php" class="link">namespaces</a></li>   </ul>   </div></div>
 * 
     * Gets namespace name
     *
     * @link https://php.net/manual/zh/reflectionclass.getnamespacename.php
     * @return string The namespace name.
     */
    #[Pure]
    #[TentativeType]
    public function getNamespaceName(): string {}

    /**
 * <div id="reflectionclass.getshortname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getShortName</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getShortName</span> — <span class="dc-title">获取短名</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getshortname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getShortName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   获取类的短名，就是不含命名空间（namespace）的那一部分。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getshortname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getshortname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   类的短名。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getshortname-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5462">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getShortName()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">namespace </span><span style="color: #9876AA">A\B</span><span style="color: #007700">;<br><br>class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{ }<br><br></span><span style="color: #9876AA">\$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'stdClass'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">\$function </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'A\\B\\Foo'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">inNamespace</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getShortName</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>string(8)&nbsp;"stdClass"<br>string(0)&nbsp;""<br>string(8)&nbsp;"stdClass"<br><br>bool(true)<br>string(7)&nbsp;"A\B\Foo"<br>string(3)&nbsp;"A\B"<br>string(3)&nbsp;"Foo"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getshortname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getName()} - 获取类名</span></li>   </ul>   </div></div>
 * 
     * Gets short name
     *
     * @link https://php.net/manual/zh/reflectionclass.getshortname.php
     * @return string The class short name.
     */
    #[Pure]
    #[TentativeType]
    public function getShortName(): string {}

    /**
 * <div id="reflectionclass.getattributes" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getAttributes</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClass::getAttributes</span> — <span class="dc-title">获取所有属性</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getattributes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getAttributes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   返回类中声明的所有属性，类型是由 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="type ReflectionAttribute" style="color:#EAB766">ReflectionAttribute</a></span> 组成的 array。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getattributes-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">name</span></dt><dd> <p class="para">  过滤结果，匹配此类名，仅包含 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 实例的属性。 </p></dd>   <dt><span class="parameter" style="color:#3A95FF">flags</span></dt><dd> <p class="para">  如果提供了 <span class="parameter" style="color:#3A95FF">name</span>，则用于确定如何过滤结果的 flag。 </p> <p class="para">  默认值为 <span class="literal">0</span>，这将导致返回的结果只属于类 <span class="parameter" style="color:#3A95FF">name</span> 的属性。 </p> <p class="para">  唯一可用的其他选项是使用 <strong><span>{@link ReflectionAttribute::IS_INSTANCEOF}</span></strong>，它将改为使用 <span class="literal">instanceof</span> 进行过滤。 </p></dd>  </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getattributes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   由 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 对象组成的属性数组。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.getattributes-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5442">    <p><strong>示例 #1 基础用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br>}<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">();<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">\$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Fruit<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;Red<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5443">    <p><strong>示例 #2 通过类名过滤结果</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br>}<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fruit'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">\$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Fruit<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5444">    <p><strong>示例 #3 通过类名和继承过滤结果</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">interface </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">implements </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>#[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Apple </span><span style="color: #007700">{<br>}<br><br></span><span style="color: #9876AA">\$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">\$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #9876AA">Color</span><span style="color: #007700">::class, </span><span style="color: #9876AA">ReflectionAttribute</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_INSTANCEOF</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">\$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Red<br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getattributes-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getAttributes()} - Gets Attributes</span></li>   </ul>   </div></div>
 * 
     * @template T
     *
     * Returns an array of class attributes.
     *
     * @param class-string<T>|null $name Name of an attribute class
     * @param int $flags Сriteria by which the attribute is searched.
     * @return ReflectionAttribute<T>[]
     * @since 8.0
     */
    #[Pure]
    public function getAttributes(?string $name = null, int $flags = 0): array {}

    /**
     * Clones object
     *
     * @link https://php.net/manual/en/reflectionclass.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clones object
     *
     * @link https://php.net/manual/en/reflectionclass.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "8.1")]
    private function __clone(): void {}

/**
 * <div id="reflectionclass.isenum" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isEnum</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::isEnum</span> — <span class="dc-title">Returns whether this is an enum</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isenum-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isEnum</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if a class is an <a href="https://php.net/manual/zh/language.enumerations.php" class="link">enum</a>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isenum-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isenum-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if this is an <a href="https://php.net/manual/zh/language.enumerations.php" class="link">enum</a>, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div></div>
 */
    public function isEnum(): bool {}

    /**
 * <div id="reflectionclass.newlazyghost" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::newLazyGhost</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::newLazyGhost</span> — <span class="dc-title">Creates a new lazy ghost instance</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.newlazyghost-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newLazyGhost</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$initializer</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div>  <p class="simpara">   Creates a new lazy ghost instance of the class, attaching the   <span class="parameter" style="color:#3A95FF">initializer</span> to it. The constructor is not called, and   properties are not set to their default value. However, the object will   be automatically initialized by invoking the   <span class="parameter" style="color:#3A95FF">initializer</span> the first time its state is observed or   modified. See   <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.initialization-triggers" class="link">Initialization   Triggers</a> and <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.initialization-sequence" class="link">   Initialization Sequence</a>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.newlazyghost-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">initializer</span></dt>    <dd>     <span class="simpara">      The initializer is a callback with the following signature:     </span>     <p class="para">      </p><div class="methodsynopsis dc-description"><span class="methodname" style="color:#CC7832"><span class="replaceable">initializer</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>      <dl>               <dt><span class="parameter" style="color:#3A95FF">object</span></dt>        <dd>         <span class="simpara">          The <span class="parameter" style="color:#3A95FF">object</span> being initialized. At this point,          the object is no longer marked as lazy, and accessing it does not          trigger initialization again.         </span>        </dd>             </dl>          <span class="simpara">      The <span class="parameter" style="color:#3A95FF">initializer</span> function must return <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> or no      value.     </span>    </dd>          <dt id="reflectionclass.newlazyghost.parameters.options"><span class="parameter" style="color:#3A95FF">options</span></dt>    <dd>     <p class="para">      <span class="parameter" style="color:#3A95FF">options</span> can be a combination of the following      flags:      </p><dl>               <dt>         <strong><span>{@link ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE}</span></strong>        </dt>        <dd>         <span class="simpara">          By default, serializing a lazy object triggers its          initialization. Setting this flag prevents initialization, allowing          lazy objects to be serialized without being initialized.         </span>        </dd>             </dl>         </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.newlazyghost-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns a lazy ghost instance. If the object has no properties, or if all its   properties are static or virtual, a normal (non-lazy) instance is returned.   See also   <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.lifecycle" class="link">Lifecycle of Lazy   Objects</a>.  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionclass.newlazyghost-errors">  <h3 class="title">错误／异常</h3>  <p class="simpara">   An <span class="classname"><a href="https://php.net/manual/zh/class.error.php" class="classname">Error</a></span> if the class is internal or extends an   internal class except <span class="classname"><a href="https://php.net/manual/zh/class.stdclass.php" class="classname">stdClass</a></span>.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.newlazyghost-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5483">   <p><strong>示例 #1 Basic usage</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(public </span><span style="color: #9876AA">int \$prop</span><span style="color: #007700">) {<br>        echo </span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">, </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>    }<br>}<br><br></span><span style="color: #9876AA">\$reflector </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br></span><span style="color: #9876AA">\$object </span><span style="color: #007700">= </span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">newLazyGhost</span><span style="color: #007700">(function (</span><span style="color: #9876AA">Example \$object</span><span style="color: #007700">) {<br>     </span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br>});<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Example</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// Triggers initialization, and fetches the property after that<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prop</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">lazy&nbsp;ghost&nbsp;object(Example)#3&nbsp;(0)&nbsp;{<br>&nbsp;&nbsp;["prop"]=&gt;<br>&nbsp;&nbsp;uninitialized(int)<br>}<br>bool(true)<br>Example::__construct<br>int(1)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.newlazyghost-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyProxy()} - Creates a new lazy proxy instance</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceWithoutConstructor()} - 创建新的类实例而不调用它的构造函数</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::resetAsLazyGhost()} - Resets an object and marks it as lazy</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::markLazyObjectAsInitialized()} - Marks a lazy object as initialized without calling the initializer or factory</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::initializeLazyObject()} - Forces initialization of a lazy object</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isUninitializedLazyObject()} - Checks if an object is lazy and uninitialized</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setRawValueWithoutLazyInitialization()} - Set raw property value without triggering lazy initialization</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::skipLazyInitialization()} - Marks property as non-lazy</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isLazy()} - Checks whether a property is lazy</span></li>  </ul> </div></div>
 * 
     * @since 8.4
     */
    public function newLazyGhost(callable $initializer, int $options = 0): object {}

    /**
 * <div id="reflectionclass.newlazyproxy" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::newLazyProxy</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::newLazyProxy</span> — <span class="dc-title">Creates a new lazy proxy instance</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.newlazyproxy-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::newLazyProxy</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$factory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div>  <p class="simpara">   Creates a new lazy proxy instance of the class, attaching the   <span class="parameter" style="color:#3A95FF">factory</span> function to it. The constructor is not   called, and properties are not set to their default values. When an   attempt is made to observe or modify the proxy's state for the first   time, the factory function is called to provide a real instance, which   is then attached to the proxy. After this, all subsequent interactions   with the proxy are forwarded to the real instance. See   <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.initialization-triggers" class="link">Initialization   Triggers</a> and <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.initialization-sequence" class="link">   Initialization Sequence</a>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.newlazyproxy-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">factory</span></dt>    <dd>     <span class="simpara">      The factory is a callback with the following signature:     </span>     <p class="para">      </p><div class="methodsynopsis dc-description">       <span class="methodname" style="color:#CC7832"><span class="replaceable">factory</span></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div>      <dl>               <dt><span class="parameter" style="color:#3A95FF">object</span></dt>        <dd>         <span class="simpara">          The <span class="parameter" style="color:#3A95FF">object</span> being initialized. At this point,          the object is no longer marked as lazy, and accessing it does not          trigger initialization again.         </span>        </dd>             </dl>          <span class="simpara">      The factory function must return an object, referred to as the      <em>real instance</em>, which is then attached to the      proxy. This real instance must not be lazy and must not be the      proxy itself.  If the real instance does not have the same class      as the proxy, the proxy's class must be a subclass of the real      instance's class, without additional properties, and must not override the      <span class="methodname" style="color:#CC7832"><strong>__destruct()</strong></span> or <span class="methodname" style="color:#CC7832"><strong>__clone()</strong></span>      methods.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">options</span></dt><dd>     <p class="para">      <span class="parameter" style="color:#3A95FF">options</span> can be a combination of the following      flags:      </p><dl>               <dt>         <strong><span>{@link ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE}</span></strong>        </dt>        <dd>         <span class="simpara">          By default, serializing a lazy object triggers its          initialization. Setting this flag prevents initialization, allowing          lazy objects to be serialized without being initialized.         </span>        </dd>             </dl>         </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.newlazyproxy-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns a lazy proxy instance. If the object has no properties, or if all its   properties are static or virtual, a normal (non-lazy) instance is returned.   See also   <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.lifecycle" class="link">Lifecycle of Lazy   Objects</a>.  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionclass.newlazyproxy-errors">  <h3 class="title">错误／异常</h3>  <p class="simpara">   An <span class="classname"><a href="https://php.net/manual/zh/class.error.php" class="classname">Error</a></span> if the class is internal or extends an   internal class except <span class="classname"><a href="https://php.net/manual/zh/class.stdclass.php" class="classname">stdClass</a></span>.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.newlazyproxy-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5484">   <p><strong>示例 #1 Basic usage</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(public </span><span style="color: #9876AA">int \$prop</span><span style="color: #007700">) {<br>        echo </span><span style="color: #9876AA">__METHOD__</span><span style="color: #007700">, </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>    }<br>}<br><br></span><span style="color: #9876AA">\$reflector </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br></span><span style="color: #9876AA">\$object </span><span style="color: #007700">= </span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">newLazyProxy</span><span style="color: #007700">(function (</span><span style="color: #9876AA">Example \$object</span><span style="color: #007700">) {<br>     </span><span style="color: #9876AA">\$realInstance </span><span style="color: #007700">= new </span><span style="color: #9876AA">Example</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br>     return </span><span style="color: #9876AA">\$realInstance</span><span style="color: #007700">;<br>});<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object </span><span style="color: #007700">instanceof </span><span style="color: #9876AA">Example</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// Triggers initialization, and forwards the property fetch to the real instance<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prop</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">lazy&nbsp;proxy&nbsp;object(Example)#3&nbsp;(0)&nbsp;{<br>&nbsp;&nbsp;["prop"]=&gt;<br>&nbsp;&nbsp;uninitialized(int)<br>}<br>bool(true)<br>Example::__construct<br>int(1)<br>lazy&nbsp;proxy&nbsp;object(Example)#3&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;["instance"]=&gt;<br>&nbsp;&nbsp;object(Example)#4&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;["prop"]=&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int(1)<br>&nbsp;&nbsp;}<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.newlazyproxy-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()} - Creates a new lazy ghost instance</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceWithoutConstructor()} - 创建新的类实例而不调用它的构造函数</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::resetAsLazyProxy()} - Resets an object and marks it as lazy</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::markLazyObjectAsInitialized()} - Marks a lazy object as initialized without calling the initializer or factory</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::initializeLazyObject()} - Forces initialization of a lazy object</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isUninitializedLazyObject()} - Checks if an object is lazy and uninitialized</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setRawValueWithoutLazyInitialization()} - Set raw property value without triggering lazy initialization</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::skipLazyInitialization()} - Marks property as non-lazy</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isLazy()} - Checks whether a property is lazy</span></li>  </ul> </div></div>
 * 
     * @return T
     * @since 8.4
     */
    public function newLazyProxy(callable $factory, int $options = 0): object {}

    /**
 * <div id="reflectionclass.resetaslazyghost" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::resetAsLazyGhost</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::resetAsLazyGhost</span> — <span class="dc-title">Resets an object and marks it as lazy</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.resetaslazyghost-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::resetAsLazyGhost</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$initializer</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="simpara">   Resets an existing <span class="parameter" style="color:#3A95FF">object</span> and marks it as lazy.  </p>  <p class="simpara">   The object's destructor is called (if one exists) unless the   <strong><span>{@link ReflectionClass::SKIP_DESTRUCTOR}</span></strong> flag is specified. In   the special case where the object is an initialized proxy, the real instance   is detached from the proxy. If the real instance is no longer referenced   elsewhere, its destructor is called regardless of the   <strong><span>SKIP_DESTRUCTOR</span></strong> flag.  </p>  <p class="simpara">   Dynamic properties are removed, and the value of properties declared on the   class is discarded as though <span class="function">{@link unset()}</span> was called, and   marked as lazy. This implies that if the object is an instance of a subclass   with additional properties, these properties are not modified and not made   lazy.   <a href="https://php.net/manual/zh/language.oop5.properties.php#language.oop5.properties.readonly-properties" class="link">Readonly   properties</a> are also not modified and not made lazy if they are   <span class="literal">final</span> or the class itself is <span class="literal">final</span>.  </p>  <p class="simpara">   If no properties were marked lazy, the object is not marked as lazy. See   also   <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.lifecycle" class="link">Lazy Objects   Lifecycle</a>.  </p>  <p class="simpara">   Otherwise, after calling this method, the behavior of the object is the same   as an object created by   <span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()}</span> (except for   subclass and readonly properties, as described above).  </p>  <p class="simpara">   The object is not replaced by another one, and its identity remains   unchanged. Functionality such as <span class="function">{@link spl_object_id()}</span>,   <span class="function">{@link spl_object_hash()}</span>,   <span class="classname"><a href="https://php.net/manual/zh/class.splobjectstorage.php" class="classname">SplObjectStorage</a></span>, <span class="classname"><a href="https://php.net/manual/zh/class.weakmap.php" class="classname">WeakMap</a></span>,   <span class="classname"><a href="https://php.net/manual/zh/class.weakreference.php" class="classname">WeakReference</a></span>, or   <a href="https://php.net/manual/zh/language.oop5.object-comparison.php" class="link">the identity operator   (<span class="literal">===</span>)</a> are unaffected.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.resetaslazyghost-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      A non-lazy object, or an initialized lazy object.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">initializer</span></dt>    <dd>     <span class="simpara">      An initializer callback with the same signature and purpose as in      <span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()}</span>.     </span>    </dd>          <dt id="reflectionclass.resetaslazyghost.parameters.options"><span class="parameter" style="color:#3A95FF">options</span></dt>    <dd>     <p class="para">      <span class="parameter" style="color:#3A95FF">options</span> can be a combination of the following      flags:      </p><dl>               <dt>         <strong><span>{@link ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE}</span></strong>        </dt>        <dd>         <span class="simpara">          By default, serializing a lazy object triggers its          initialization. Setting this flag prevents initialization, allowing          lazy objects to be serialized without being initialized.         </span>        </dd>                      <dt>         <strong><span>{@link ReflectionClass::SKIP_DESTRUCTOR}</span></strong>        </dt>        <dd>         <span class="simpara">          By default, the object destructor is called (if any) before making it          lazy. This provides safety regarding any preexisting state in the          object. This flag disables that behavior, allowing objects to be reset          as lazy without calling the destructor.         </span>        </dd>             </dl>         </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.resetaslazyghost-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   没有返回值。  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionclass.resetaslazyghost-errors">  <h3 class="title">错误／异常</h3>  <p class="simpara">   A <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> if the object is lazy and   non-initialized.  </p>  <p class="simpara">   An <span class="classname"><a href="https://php.net/manual/zh/class.error.php" class="classname">Error</a></span> if the object is being initialized, or if the   object properties are being iterated with   <a href="https://php.net/manual/zh/control-structures.foreach.php" class="link"><span class="literal">foreach</span></a>.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.resetaslazyghost-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()} - Creates a new lazy ghost instance</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::resetAsLazyProxy()} - Resets an object and marks it as lazy</span></li>  </ul> </div></div>
 * 
     * @since 8.4
     */
    public function resetAsLazyGhost(object $object, callable $initializer, int $options = 0): void {}

    /**
 * <div id="reflectionclass.resetaslazyproxy" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::resetAsLazyProxy</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::resetAsLazyProxy</span> — <span class="dc-title">Resets an object and marks it as lazy</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.resetaslazyproxy-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::resetAsLazyProxy</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">\$factory</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="simpara">   The behavior of this method is the same as   <span class="methodname" style="color:#CC7832">{@link ReflectionClass::resetAsLazyGhost()}</span> except that it   uses the proxy strategy.  </p>  <p class="simpara">   The <span class="parameter" style="color:#3A95FF">object</span> itself becomes the proxy. Similarly to   <span class="methodname" style="color:#CC7832">{@link ReflectionClass::resetAsLazyGhost()}</span>, the object is not   replaced by an other one, and its identity does not change, even after   initialization. The proxy and the real instance are distinct objects, with   distinct identities.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.resetaslazyproxy-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      A non-lazy object, or an initialized lazy object.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">factory</span></dt>    <dd>     <span class="simpara">      An factory callback with the same signature and purpose as in      <span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyProxy()}</span>.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">options</span></dt><dd>     <p class="para">      <span class="parameter" style="color:#3A95FF">options</span> can be a combination of the following      flags:      </p><dl>               <dt>         <strong><span>{@link ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE}</span></strong>        </dt>        <dd>         <span class="simpara">          By default, serializing a lazy object triggers its          initialization. Setting this flag prevents initialization, allowing          lazy objects to be serialized without being initialized.         </span>        </dd>                      <dt>         <strong><span>{@link ReflectionClass::SKIP_DESTRUCTOR}</span></strong>        </dt>        <dd>         <span class="simpara">          By default, the object destructor is called (if any) before making it          lazy. This provides safety regarding any preexisting state in the          object. This flag disables that behavior, allowing objects to be reset          as lazy without calling the destructor.         </span>        </dd>             </dl>         </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.resetaslazyproxy-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   没有返回值。  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionclass.resetaslazyproxy-errors">  <h3 class="title">错误／异常</h3>  <p class="simpara">   A <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> if the object is lazy and   non-initialized.  </p>  <p class="simpara">   An <span class="classname"><a href="https://php.net/manual/zh/class.error.php" class="classname">Error</a></span> if the object is being initialized, or if the   object properties are being iterated with   <a href="https://php.net/manual/zh/control-structures.foreach.php" class="link"><span class="literal">foreach</span></a>.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.resetaslazyproxy-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyProxy()} - Creates a new lazy proxy instance</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::resetAsLazyGhost()} - Resets an object and marks it as lazy</span></li>  </ul> </div></div>
 * 
     * @since 8.4
     */
    public function resetAsLazyProxy(object $object, callable $factory, int $options = 0): void {}

    /**
 * <div id="reflectionclass.initializelazyobject" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::initializeLazyObject</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::initializeLazyObject</span> — <span class="dc-title">Forces initialization of a lazy object</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.initializelazyobject-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::initializeLazyObject</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div>  <p class="simpara">   Forces initialization of the specified <span class="parameter" style="color:#3A95FF">object</span>. This   method has no effect if the object is not lazy or has already been   initialized. Otherwise, initialization proceeds as described in the   <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.initialization-sequence" class="link">Initialization   Sequence</a>.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    In most cases, calling this method is unnecessary, as lazy objects    initialize themselves automatically when their state is observed or    modified.   </span>  </p></blockquote> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.initializelazyobject-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object to initialize.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.initializelazyobject-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   If <span class="parameter" style="color:#3A95FF">object</span> is a lazy proxy, returns its real instance.   Otherwise, returns <span class="parameter" style="color:#3A95FF">object</span> itself.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.initializelazyobject-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5467">   <p><strong>示例 #1 Basic usage</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(public </span><span style="color: #9876AA">int \$prop</span><span style="color: #007700">) {<br>    }<br>}<br><br></span><span style="color: #9876AA">\$reflector </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">\$object </span><span style="color: #007700">= </span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">newLazyGhost</span><span style="color: #007700">(function (</span><span style="color: #9876AA">\$object</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"Initializer called\n"</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br>});<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">initializeLazyObject</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">lazy&nbsp;ghost&nbsp;object(Example)#3&nbsp;(0)&nbsp;{<br>&nbsp;&nbsp;["prop"]=&gt;<br>&nbsp;&nbsp;uninitialized(int)<br>}<br>Initializer&nbsp;called<br>object(Example)#3&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;["prop"]=&gt;<br>&nbsp;&nbsp;int(1)<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.initializelazyobject-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()} - Creates a new lazy ghost instance</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::markLazyObjectAsInitialized()} - Marks a lazy object as initialized without calling the initializer or factory</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isUninitializedLazyObject()} - Checks if an object is lazy and uninitialized</span></li>  </ul> </div></div>
 * 
     * @since 8.4
     */
    public function initializeLazyObject(object $object): object {}

    /**
 * <div id="reflectionclass.isuninitializedlazyobject" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::isUninitializedLazyObject</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::isUninitializedLazyObject</span> — <span class="dc-title">Checks if an object is lazy and uninitialized</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.isuninitializedlazyobject-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::isUninitializedLazyObject</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Checks if an object is lazy and uninitialized.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.isuninitializedlazyobject-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object to check.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.isuninitializedlazyobject-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if <span class="parameter" style="color:#3A95FF">object</span> is an uninitialized lazy   object, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.isuninitializedlazyobject-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5479">   <p><strong>示例 #1 Basic usage</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(public </span><span style="color: #9876AA">int \$prop</span><span style="color: #007700">) {<br>    }<br>}<br><br></span><span style="color: #9876AA">\$reflector </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">\$object </span><span style="color: #007700">= </span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">newLazyGhost</span><span style="color: #007700">(function (</span><span style="color: #9876AA">\$object</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"Initializer called\n"</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">__construct</span><span style="color: #007700">(</span><span style="color: #9876AA">1</span><span style="color: #007700">);<br>});<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isUninitializedLazyObject</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">));<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prop</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isUninitializedLazyObject</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>Initializer&nbsp;called<br>int(1)<br>bool(false)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.isuninitializedlazyobject-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()} - Creates a new lazy ghost instance</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::markLazyObjectAsInitialized()} - Marks a lazy object as initialized without calling the initializer or factory</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::initializeLazyObject()} - Forces initialization of a lazy object</span></li>  </ul> </div></div>
 * 
     * @since 8.4
     */
    public function isUninitializedLazyObject(object $object): bool {}

    /**
 * <div id="reflectionclass.marklazyobjectasinitialized" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::markLazyObjectAsInitialized</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::markLazyObjectAsInitialized</span> — <span class="dc-title">Marks a lazy object as initialized without calling the initializer or factory</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.marklazyobjectasinitialized-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::markLazyObjectAsInitialized</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></div>  <p class="simpara">   Marks a lazy object as initialized without calling the initializer or   factory. This has no effect if <span class="parameter" style="color:#3A95FF">object</span> is not lazy or   is already initialized.  </p>  <p class="simpara">   The effect of calling this method is the same as described for Ghost Objects   (regardless of the laziness strategy of <span class="parameter" style="color:#3A95FF">object</span>) in   <a href="https://php.net/manual/zh/language.oop5.lazy-objects.php#language.oop5.lazy-objects.initialization-sequence" class="link">initialization   sequence</a>, except that the initializer is not called.   After that, the object is indistinguishable from an object that was never   lazy and was created with   <span class="methodname" style="color:#CC7832">{@link ReflectionClass::newInstanceWithoutConstructor()}</span>,   except for the value of properties that were already initialized with   <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setRawValueWithoutLazyInitialization()}</span>   or <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::skipLazyInitialization()}</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.marklazyobjectasinitialized-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object to mark as initialized.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.marklazyobjectasinitialized-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns <span class="parameter" style="color:#3A95FF">object</span>.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclass.marklazyobjectasinitialized-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5480">   <p><strong>示例 #1 Marking an uninitialized lazy object as initialized</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string \$prop1</span><span style="color: #007700">;<br>    public </span><span style="color: #9876AA">string \$prop2</span><span style="color: #007700">;<br>    public </span><span style="color: #9876AA">string \$prop3 </span><span style="color: #007700">= </span><span style="color: #DD0000">'default value'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$reflector </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">\$object </span><span style="color: #007700">= </span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">newLazyGhost</span><span style="color: #007700">(function (</span><span style="color: #9876AA">\$object</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"Initializer called\n"</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prop1 </span><span style="color: #007700">= </span><span style="color: #DD0000">'initialized'</span><span style="color: #007700">;<br>});<br><br></span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'prop1'</span><span style="color: #007700">)<br>          -&gt;</span><span style="color: #9876AA">setRawValueWithoutLazyInitialization</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">, </span><span style="color: #DD0000">'prop1 value'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">markLazyObjectAsInitialized</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">lazy&nbsp;ghost&nbsp;object(Example)#3&nbsp;(1)&nbsp;{<br>&nbsp;&nbsp;["prop1"]=&gt;<br>&nbsp;&nbsp;string(11)&nbsp;"prop1&nbsp;value"<br>&nbsp;&nbsp;["prop2"]=&gt;<br>&nbsp;&nbsp;uninitialized(string)<br>&nbsp;&nbsp;["prop3"]=&gt;<br>&nbsp;&nbsp;uninitialized(string)<br>}<br>object(Example)#3&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;["prop1"]=&gt;<br>&nbsp;&nbsp;string(11)&nbsp;"prop1&nbsp;value"<br>&nbsp;&nbsp;["prop2"]=&gt;<br>&nbsp;&nbsp;uninitialized(string)<br>&nbsp;&nbsp;["prop3"]=&gt;<br>&nbsp;&nbsp;string(13)&nbsp;"default&nbsp;value"<br>}</blockquote></div>   </div>  </div>  <div class="example" id="example-5481">   <p><strong>示例 #2 Marking an initialized object as initialized</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string \$prop1</span><span style="color: #007700">;<br>    public </span><span style="color: #9876AA">string \$prop2</span><span style="color: #007700">;<br>    public </span><span style="color: #9876AA">string \$prop3 </span><span style="color: #007700">= </span><span style="color: #DD0000">'default value'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$reflector </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">\$object </span><span style="color: #007700">= </span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">newLazyGhost</span><span style="color: #007700">(function (</span><span style="color: #9876AA">\$object</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"Initializer called\n"</span><span style="color: #007700">;<br>    </span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prop1 </span><span style="color: #007700">= </span><span style="color: #DD0000">'initialized'</span><span style="color: #007700">;<br>});<br><br></span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'prop1'</span><span style="color: #007700">)<br>          -&gt;</span><span style="color: #9876AA">setRawValueWithoutLazyInitialization</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">, </span><span style="color: #DD0000">'prop1 value'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prop3</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">\$reflector</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">markLazyObjectAsInitialized</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$object</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Initializer&nbsp;called<br>string(13)&nbsp;"default&nbsp;value"<br>object(Example)#3&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;["prop1"]=&gt;<br>&nbsp;&nbsp;string(11)&nbsp;"initialized"<br>&nbsp;&nbsp;["prop2"]=&gt;<br>&nbsp;&nbsp;uninitialized(string)<br>&nbsp;&nbsp;["prop3"]=&gt;<br>&nbsp;&nbsp;string(13)&nbsp;"default&nbsp;value"<br>}<br>object(Example)#3&nbsp;(2)&nbsp;{<br>&nbsp;&nbsp;["prop1"]=&gt;<br>&nbsp;&nbsp;string(11)&nbsp;"initialized"<br>&nbsp;&nbsp;["prop2"]=&gt;<br>&nbsp;&nbsp;uninitialized(string)<br>&nbsp;&nbsp;["prop3"]=&gt;<br>&nbsp;&nbsp;string(13)&nbsp;"default&nbsp;value"<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.marklazyobjectasinitialized-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()} - Creates a new lazy ghost instance</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::initializeLazyObject()} - Forces initialization of a lazy object</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::isUninitializedLazyObject()} - Checks if an object is lazy and uninitialized</span></li>  </ul> </div></div>
 * 
     * @since 8.4
     */
    public function markLazyObjectAsInitialized(object $object): object {}

    /**
 * <div id="reflectionclass.getlazyinitializer" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClass::getLazyInitializer</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClass::getLazyInitializer</span> — <span class="dc-title">Gets lazy initializer</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclass.getlazyinitializer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClass::getLazyInitializer</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">\$object</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span></span></div>  <p class="simpara">   Gets the lazy initializer or factory attached to   <span class="parameter" style="color:#3A95FF">object</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclass.getlazyinitializer-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object from which to get the initializer.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclass.getlazyinitializer-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns the initializer if the object is an uninitialized lazy   object, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> otherwise.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclass.getlazyinitializer-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()} - Creates a new lazy ghost instance</span></li>  </ul> </div></div>
 * 
     * @since 8.4
     */
    public function getLazyInitializer(object $object): ?callable {}
}
