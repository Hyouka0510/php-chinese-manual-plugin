<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
* <div id="class.reflectionproperty" class="reference"> <h1 class="title">ReflectionProperty 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="reflectionproperty.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionProperty</strong></span> 类报告有关类属性的信息。   </p>  </div>  <div class="section" id="reflectionproperty.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionProperty</strong></strong>             <span class="modifier">implements</span>      <a href="https://php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-static"><var class="varname">IS_STATIC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-readonly"><var class="varname">IS_READONLY</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-public"><var class="varname">IS_PUBLIC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-protected"><var class="varname">IS_PROTECTED</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-private"><var class="varname">IS_PRIVATE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-abstract"><var class="varname">IS_ABSTRACT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-protected-set"><var class="varname">IS_PROTECTED_SET</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-private-set"><var class="varname">IS_PRIVATE_SET</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-virtual"><var class="varname">IS_VIRTUAL</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.is-final"><var class="varname">IS_FINAL</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.props.class">$<var class="varname">class</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$property</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.clone.php" class="methodname" style="color:#CC7832">__clone</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.export.php" class="methodname" style="color:#CC7832">export</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getattributes.php" class="methodname" style="color:#CC7832">getAttributes</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getdeclaringclass.php" class="methodname" style="color:#CC7832">getDeclaringClass</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getdefaultvalue.php" class="methodname" style="color:#CC7832">getDefaultValue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getdoccomment.php" class="methodname" style="color:#CC7832">getDocComment</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.gethook.php" class="methodname" style="color:#CC7832">getHook</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/enum.propertyhooktype.php" class="type PropertyHookType" style="color:#EAB766">PropertyHookType</a></span> <span class="parameter" style="color:#3A95FF">$type</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.gethooks.php" class="methodname" style="color:#CC7832">getHooks</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getmodifiers.php" class="methodname" style="color:#CC7832">getModifiers</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getrawvalue.php" class="methodname" style="color:#CC7832">getRawValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getsettabletype.php" class="methodname" style="color:#CC7832">getSettableType</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.gettype.php" class="methodname" style="color:#CC7832">getType</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.getvalue.php" class="methodname" style="color:#CC7832">getValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.hasdefaultvalue.php" class="methodname" style="color:#CC7832">hasDefaultValue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.hashook.php" class="methodname" style="color:#CC7832">hasHook</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/enum.propertyhooktype.php" class="type PropertyHookType" style="color:#EAB766">PropertyHookType</a></span> <span class="parameter" style="color:#3A95FF">$type</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.hashooks.php" class="methodname" style="color:#CC7832">hasHooks</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.hastype.php" class="methodname" style="color:#CC7832">hasType</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isabstract.php" class="methodname" style="color:#CC7832">isAbstract</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isdefault.php" class="methodname" style="color:#CC7832">isDefault</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isdynamic.php" class="methodname" style="color:#CC7832">isDynamic</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isfinal.php" class="methodname" style="color:#CC7832">isFinal</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isinitialized.php" class="methodname" style="color:#CC7832">isInitialized</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.islazy.php" class="methodname" style="color:#CC7832">isLazy</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isprivate.php" class="methodname" style="color:#CC7832">isPrivate</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isprivateset.php" class="methodname" style="color:#CC7832">isPrivateSet</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.ispromoted.php" class="methodname" style="color:#CC7832">isPromoted</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isprotected.php" class="methodname" style="color:#CC7832">isProtected</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isprotectedset.php" class="methodname" style="color:#CC7832">isProtectedSet</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.ispublic.php" class="methodname" style="color:#CC7832">isPublic</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isreadonly.php" class="methodname" style="color:#CC7832">isReadOnly</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isstatic.php" class="methodname" style="color:#CC7832">isStatic</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.isvirtual.php" class="methodname" style="color:#CC7832">isVirtual</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.setaccessible.php" class="methodname" style="color:#CC7832">setAccessible</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.setrawvalue.php" class="methodname" style="color:#CC7832">setRawValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.setrawvaluewithoutlazyinitialization.php" class="methodname" style="color:#CC7832">setRawValueWithoutLazyInitialization</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.setvalue.php" class="methodname" style="color:#CC7832">setValue</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.skiplazyinitialization.php" class="methodname" style="color:#CC7832">skipLazyInitialization</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionproperty.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>   }</div>  </div>    <div class="section" id="reflectionproperty.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionproperty.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">       属性名。只读，在尝试赋值的时候抛出 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </p>     </dd>             <dt id="reflectionproperty.props.class"><var class="varname">class</var></dt>     <dd>      <p class="para">       定义的属性所在的类。只读，在尝试赋值的时候抛出 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。      </p>     </dd>       </dl>  </div>    <div class="section" id="reflectionproperty.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="reflectionproperty.constants.modifiers">    <h2 class="title">ReflectionProperty 修饰符</h2>    <dl>           <dt id="reflectionproperty.constants.is-static">       <strong><span>{@link ReflectionProperty::IS_STATIC}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示 <a href="https://php.net/manual/zh/language.oop5.static.php" class="link">static</a> 属性。在 PHP 7.4.0 之前，值为 <span class="literal">1</span>。       </p>      </dd>                <dt id="reflectionproperty.constants.is-readonly">       <strong><span>{@link ReflectionProperty::IS_READONLY}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示 <a href="https://php.net/manual/zh/language.oop5.properties.php#language.oop5.properties.readonly-properties" class="link">readonly</a>        属性。自 PHP 8.1.0 起可用。       </p>      </dd>                <dt id="reflectionproperty.constants.is-public">       <strong><span>{@link ReflectionProperty::IS_PUBLIC}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示 <a href="https://php.net/manual/zh/language.oop5.visibility.php" class="link">public</a> 属性。在 PHP 7.4.0 之前，值为 <span class="literal">256</span>。       </p>      </dd>                <dt id="reflectionproperty.constants.is-protected">       <strong><span>{@link ReflectionProperty::IS_PROTECTED}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示 <a href="https://php.net/manual/zh/language.oop5.visibility.php" class="link">protected</a> 属性。在 PHP 7.4.0 之前，值为 <span class="literal">512</span>。       </p>      </dd>                <dt id="reflectionproperty.constants.is-private">       <strong><span>{@link ReflectionProperty::IS_PRIVATE}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示 <a href="https://php.net/manual/zh/language.oop5.visibility.php" class="link">private</a> 属性。在 PHP 7.4.0 之前，值为 <span class="literal">1024</span>。       </p>      </dd>                <dt id="reflectionproperty.constants.is-abstract">       <strong><span>{@link ReflectionProperty::IS_ABSTRACT}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <span class="simpara">        表示属性是 <a href="https://php.net/manual/zh/language.oop5.abstract.php" class="link">abstract</a>。自 PHP 8.4.0 起可用。       </span>      </dd>                <dt id="reflectionproperty.constants.is-protected-set">       <strong><span>{@link ReflectionProperty::IS_PROTECTED_SET}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <span class="simpara">        自 PHP 8.4.0 起可用。       </span>      </dd>                <dt id="reflectionproperty.constants.is-private-set">       <strong><span>{@link ReflectionProperty::IS_PRIVATE_SET}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <span class="simpara">        自 PHP 8.4.0 起可用。       </span>      </dd>                <dt id="reflectionproperty.constants.is-virtual">       <strong><span>{@link ReflectionProperty::IS_VIRTUAL}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <span class="simpara">        自 PHP 8.4.0 起可用。       </span>      </dd>                <dt id="reflectionproperty.constants.is-final">       <strong><span>{@link ReflectionProperty::IS_FINAL}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <span class="simpara">        表示属性是 <a href="https://php.net/manual/zh/language.oop5.final.php" class="link">final</a>。自 PHP 8.4.0 起可用。       </span>      </dd>         </dl>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      </p><p class="para">      这些常量的值可能会在不同 PHP 版本间发生更改。建议始终使用常量而不直接依赖值。     </p>    </blockquote>   </div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.4.0</td>       <td>        所有类常量现已类型化。       </td>      </tr>      <tr>       <td>8.4.0</td>       <td>        新增 <strong><span>{@link ReflectionProperty::IS_VIRTUAL}</span></strong>、<strong><span>{@link ReflectionProperty::IS_PRIVATE_SET}</span></strong>、<strong><span>{@link ReflectionProperty::IS_PROTECTED_SET}</span></strong>、<strong><span>{@link ReflectionProperty::IS_ABSTRACT}</span></strong>,        和 <strong><span>{@link ReflectionProperty::IS_FINAL}</span></strong>。       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        已移除 <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::export()}</span>。       </td>      </tr>     </tbody>       </table>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionProperty::__clone} — Clone</li><li>{@link ReflectionProperty::__construct} — Construct a ReflectionProperty object</li><li>{@link ReflectionProperty::export} — Export</li><li>{@link ReflectionProperty::getAttributes} — Gets Attributes</li><li>{@link ReflectionProperty::getDeclaringClass} — Gets declaring class</li><li>{@link ReflectionProperty::getDefaultValue} — Returns the default value declared for a property</li><li>{@link ReflectionProperty::getDocComment} — Gets the property doc comment</li><li>{@link ReflectionProperty::getHook} — Returns a reflection object for a specified hook</li><li>{@link ReflectionProperty::getHooks} — Returns an array of all hooks on this property</li><li>{@link ReflectionProperty::getModifiers} — Gets the property modifiers</li><li>{@link ReflectionProperty::getName} — Gets property name</li><li>{@link ReflectionProperty::getRawValue} — Returns the value of a property, bypassing a get hook if defined</li><li>{@link ReflectionProperty::getSettableType} — Returns the parameter type of a setter hook</li><li>{@link ReflectionProperty::getType} — Gets a property's type</li><li>{@link ReflectionProperty::getValue} — Gets value</li><li>{@link ReflectionProperty::hasDefaultValue} — Checks if property has a default value declared</li><li>{@link ReflectionProperty::hasHook} — Returns whether the property has a given hook defined</li><li>{@link ReflectionProperty::hasHooks} — Returns whether the property has any hooks defined</li><li>{@link ReflectionProperty::hasType} — Checks if property has a type</li><li>{@link ReflectionProperty::isAbstract} — Determines if a property is abstract</li><li>{@link ReflectionProperty::isDefault} — Checks if property is a default property</li><li>{@link ReflectionProperty::isDynamic} — Checks if property is a dynamic property</li><li>{@link ReflectionProperty::isFinal} — Determines if this property is final or not</li><li>{@link ReflectionProperty::isInitialized} — Checks whether a property is initialized</li><li>{@link ReflectionProperty::isLazy} — Checks whether a property is lazy</li><li>{@link ReflectionProperty::isPrivate} — Checks if property is private</li><li>{@link ReflectionProperty::isPrivateSet} — Checks if property is private for writing</li><li>{@link ReflectionProperty::isPromoted} — Checks if property is promoted</li><li>{@link ReflectionProperty::isProtected} — Checks if property is protected</li><li>{@link ReflectionProperty::isProtectedSet} — Checks whether the property is protected for writing</li><li>{@link ReflectionProperty::isPublic} — Checks if property is public</li><li>{@link ReflectionProperty::isReadOnly} — 检查属性是否为只读</li><li>{@link ReflectionProperty::isStatic} — Checks if property is static</li><li>{@link ReflectionProperty::isVirtual} — Determines if a property is virtual</li><li>{@link ReflectionProperty::setAccessible} — Set property accessibility</li><li>{@link ReflectionProperty::setRawValue} — Sets the value of a property, bypassing a set hook if defined</li><li>{@link ReflectionProperty::setRawValueWithoutLazyInitialization} — Set raw property value without triggering lazy initialization</li><li>{@link ReflectionProperty::setValue} — Set property value</li><li>{@link ReflectionProperty::skipLazyInitialization} — Marks property as non-lazy</li><li>{@link ReflectionProperty::__toString} — To string</li></ul></div>
*
 * The <b>ReflectionProperty</b> class reports information about a classes
 * properties.
 *
 * @link https://php.net/manual/zh/class.reflectionproperty.php
 
*/
class ReflectionProperty implements Reflector
{
    /**
     * @since 8.4
     */
    public const IS_ABSTRACT = 64;

    /**
     * @since 8.4
     */
    public const IS_VIRTUAL = 512;

    /**
     * @var string Name of the property, same as calling the {@see ReflectionProperty::getName()} method
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    /**
     * @var string Fully qualified class name where this property was defined
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $class;

    /**
     * Indicates that the property is static.
     *
     * @link https://www.php.net/manual/en/class.reflectionproperty.php#reflectionproperty.constants.is-static
     */
    public const IS_STATIC = 16;

    /**
     * Indicates that the property is public.
     *
     * @link https://www.php.net/manual/en/class.reflectionproperty.php#reflectionproperty.constants.is-public
     */
    public const IS_PUBLIC = 1;

    /**
     * Indicates that the property is protected.
     *
     * @link https://www.php.net/manual/en/class.reflectionproperty.php#reflectionproperty.constants.is-protected
     */
    public const IS_PROTECTED = 2;

    /**
     * Indicates that the property is private.
     *
     * @link https://www.php.net/manual/en/class.reflectionproperty.php#reflectionproperty.constants.is-private
     */
    public const IS_PRIVATE = 4;

    /**
     * @since 8.1
     */
    public const IS_READONLY = 128;

    /**
     * @since 8.4
     */
    public const IS_PROTECTED_SET = 2048;

    /**
     * @since 8.4
     */
    public const IS_PRIVATE_SET = 4096;

    /**
     * @since 8.4
     */
    public const IS_FINAL = 32;

    /**
     * Construct a ReflectionProperty object
     *
     * @link https://php.net/manual/en/reflectionproperty.construct.php
     * @param string|object $class The class name, that contains the property.
     * @param string $property The name of the property being reflected.
     * @throws ReflectionException if the class or property does not exist.
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'object|string'], default: '')] $class,
        #[LanguageLevelTypeAware(['8.0' => 'string'], default: '')] $property
    ) {}

/**
* <div id="reflectionproperty.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::export</h1>  <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ReflectionProperty::export</span> — <span class="dc-title">Export</span></p> </div> <div id="reflectionproperty.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   Exports a reflection.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.export-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">argument</span></dt>     <dd>      <p class="para">       导出的反射。             </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       The property name.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 时返回导出结果，设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>（默认值）则忽略返回。                    </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">     </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.export-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::__toString()} - To string</span></li>   </ul>   </div></div>
    *
     * Export
     *
     * @link https://php.net/manual/zh/reflectionproperty.export.php
     * @param mixed $class The reflection to export.
     * @param string $name The property name.
     * @param bool $return Setting to {@see true} will return the export, as
     * opposed to emitting it. Setting to {@see false} (the default) will do the
     * opposite.
     * @return string|null
     * @removed 8.0
     
    #[Deprecated(since: '7.4')]
*/
    public static function export($class, $name, $return = false) {}

    /**
     * To string
     *
     * @link https://php.net/manual/en/reflectionproperty.tostring.php
     * @return string
     */
    #[TentativeType]
    public function __toString(): string {}

/**
* <div id="reflectionproperty.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getName</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getName</span> — <span class="dc-title">Gets property name</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   Gets the properties name.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The name of the reflected property.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>   </ul>   </div></div>
    *
     * Gets property name
     *
     * @link https://php.net/manual/zh/reflectionproperty.getname.php
     * @return string The name of the reflected property.
     
    #[Pure]
    #[TentativeType]
*/
    public function getName(): string {}

/**
* <div id="reflectionproperty.getvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getValue</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getValue</span> — <span class="dc-title">Gets value</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the property's value.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       If the property is non-static an object must be provided to fetch the       property from. If you want to fetch the default property without       providing an object use <span class="methodname" style="color:#CC7832">{@link ReflectionClass::getDefaultProperties()}</span>       instead.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The current value of the property.  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionproperty.getvalue-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       Private and protected properties can be accessed by       <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getValue()</strong></span> right away.       Previously, they needed to be made accessible by calling       <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()}</span>; otherwise       a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> was thrown.      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">object</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.getvalue-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5579">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getValue()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public static </span><span style="color: #9876AA">$staticProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'foobar'</span><span style="color: #007700">;<br>    <br>    public </span><span style="color: #9876AA">$property </span><span style="color: #007700">= </span><span style="color: #DD0000">'barfoo'</span><span style="color: #007700">;<br>    protected </span><span style="color: #9876AA">$privateProperty </span><span style="color: #007700">= </span><span style="color: #DD0000">'foofoo'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$reflectionClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'staticProperty'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'property'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">));<br><br></span><span style="color: #9876AA">$reflectionProperty </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'privateProperty'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">); </span><span style="color: #FF8000">// only required prior to PHP 8.1.0<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(6) "foobar"<br>string(6) "barfoo"<br>string(6) "foofoo"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getvalue-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setValue()} - Set property value</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()} - Set property accessibility</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getDefaultProperties()} - 获取默认属性</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getStaticPropertyValue()} - 获取静态（static）属性的值</span></li>   </ul>   </div></div>
    *
     * Gets value
     *
     * @link https://php.net/manual/zh/reflectionproperty.getvalue.php
     * @param object|null $object If the property is non-static an object must be
     * provided to fetch the property from. If you want to fetch the default
     * property without providing an object use {@see ReflectionClass::getDefaultProperties}
     * instead.
     * @return mixed The current value of the property.
     
    #[Pure]
    #[TentativeType]
*/
    public function getValue(#[LanguageLevelTypeAware(['8.0' => 'object|null'], default: '')] $object = null): mixed {}

/**
* <div id="reflectionproperty.setvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::setValue</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::setValue</span> — <span class="dc-title">Set property value</span></p> </div>  <div class="refsect1 description" id="refsect1-reflectionproperty.setvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   Sets (changes) the property's value.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    To set static property values, use <span class="literal">ReflectionProperty::setValue(null, $value)</span>.   </span>  </p></blockquote> </div>  <div class="refsect1 parameters" id="refsect1-reflectionproperty.setvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       For static properties, pass in <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>.       For non-static properties, pass in the object.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">value</span></dt>     <dd>      <p class="para">       The new value.      </p>     </dd>       </dl>   </div>  <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.setvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div>  <div class="refsect1 changelog" id="refsect1-reflectionproperty.setvalue-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.3.0</td>      <td>       Calling this method with a single argument is deprecated,       instead use <span class="literal">ReflectionProperty::setValue(null, $value)</span>       for static properties.      </td>     </tr>     <tr>      <td>8.1.0</td>      <td>       Private and protected properties can be accessed by       <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setValue()</strong></span> right away.       Previously, they needed to be made accessible by calling       <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()}</span>; otherwise       a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> was thrown.      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.setvalue-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5592">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setValue()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public static </span><span style="color: #9876AA">$staticProperty</span><span style="color: #007700">;<br>    <br>    public </span><span style="color: #9876AA">$property</span><span style="color: #007700">;<br>    protected </span><span style="color: #9876AA">$privateProperty</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$reflectionClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// As of PHP 8.3, passing in null as the first argument is required<br>// to access static properties.<br></span><span style="color: #9876AA">$reflectionProperty </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'staticProperty'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setValue</span><span style="color: #007700">(</span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">Foo</span><span style="color: #007700">::</span><span style="color: #9876AA">$staticProperty</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'property'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">setValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">property</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">$reflectionProperty </span><span style="color: #007700">= </span><span style="color: #9876AA">$reflectionClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'privateProperty'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">); </span><span style="color: #FF8000">// only required prior to PHP 8.1.0<br></span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">, </span><span style="color: #DD0000">'foobar'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionProperty</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(3) "foo"<br>string(3) "bar"<br>string(6) "foobar"</blockquote></div>    </div>   </div>   </div>  <div class="refsect1 seealso" id="refsect1-reflectionproperty.setvalue-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()} - Set property accessibility</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::setStaticPropertyValue()} - 设置 public static 属性的值</span></li>   </ul>   </div> </div>
    *
     * Set property value
     *
     * @link https://php.net/manual/zh/reflectionproperty.setvalue.php
     * @param mixed $objectOrValue If the property is non-static an object must
     * be provided to change the property on. If the property is static this
     * parameter is left out and only $value needs to be provided.
     * @param mixed $value [optional] The new value.
     * @return void No value is returned.
     
    #[TentativeType]
*/
    public function setValue(
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $objectOrValue,
        #[LanguageLevelTypeAware(['8.0' => 'mixed'], default: '')] $value
    ): void {}

/**
* <div id="reflectionproperty.ispublic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isPublic</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isPublic</span> — <span class="dc-title">Checks if property is public</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.ispublic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPublic</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether the property is public.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.ispublic-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.ispublic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is marked public, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    Note this refers only to the main visibility, and not to a <a href="https://php.net/manual/zh/language.oop5.visibility.php#language.oop5.visibility-members-aviz" class="link">set-visibility</a>, if specified.   </span>  </p></blockquote> </div> <div class="refsect1 notes" id="refsect1-reflectionproperty.ispublic-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    Be aware that a property being <span class="literal">public</span> does not always    imply is it publicly writeable.  A property could be virtual with no    <span class="literal">set</span> hook, or it could be <span class="literal">readonly</span>    and already have been written to, or it could have a    <a href="https://php.net/manual/zh/language.oop5.visibility.php#language.oop5.visibility-members-aviz" class="link"><span class="literal">set</span>    visibility defined</a> that is non-public.  In all of those cases,    this method will return <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> but the property will not be writeable.   </span>  </p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.ispublic-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtectedSet()} - Checks whether the property is protected for writing</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivateSet()} - Checks if property is private for writing</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>   </ul>   </div></div>
    *
     * Checks if property is public
     *
     * @link https://php.net/manual/zh/reflectionproperty.ispublic.php
     * @return bool Return {@see true} if the property is public, {@see false} otherwise.
     
    #[Pure]
    #[TentativeType]
*/
    public function isPublic(): bool {}

/**
* <div id="reflectionproperty.isprivate" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isPrivate</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isPrivate</span> — <span class="dc-title">Checks if property is private</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isprivate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPrivate</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether the property is private.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isprivate-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isprivate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is private, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    Note this refers only to the main visibility, and not to a <a href="https://php.net/manual/zh/language.oop5.visibility.php#language.oop5.visibility-members-aviz" class="link">set-visibility</a>, if specified.   </span>  </p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isprivate-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>   </ul>   </div></div>
    *
     * Checks if property is private
     *
     * @link https://php.net/manual/zh/reflectionproperty.isprivate.php
     * @return bool Return {@see true} if the property is private, {@see false} otherwise.
     
    #[Pure]
    #[TentativeType]
*/
    public function isPrivate(): bool {}

/**
* <div id="reflectionproperty.isprotected" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isProtected</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isProtected</span> — <span class="dc-title">Checks if property is protected</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isprotected-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isProtected</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether the property is protected.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isprotected-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isprotected-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is protected, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    Note this refers only to the main visibility, and not to a <a href="https://php.net/manual/zh/language.oop5.visibility.php#language.oop5.visibility-members-aviz" class="link">set-visibility</a>, if specified.   </span>  </p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isprotected-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>   </ul>   </div></div>
    *
     * Checks if property is protected
     *
     * @link https://php.net/manual/zh/reflectionproperty.isprotected.php
     * @return bool Returns {@see true} if the property is protected, {@see false} otherwise.
     
    #[Pure]
    #[TentativeType]
*/
    public function isProtected(): bool {}

/**
* <div id="reflectionproperty.isstatic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isStatic</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isStatic</span> — <span class="dc-title">Checks if property is static</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isstatic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isStatic</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether the property is static.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isstatic-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isstatic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is static, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isstatic-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>   </ul>   </div></div>
    *
     * Checks if property is static
     *
     * @link https://php.net/manual/zh/reflectionproperty.isstatic.php
     * @return bool Returns {@see true} if the property is static, {@see false} otherwise.
     
    #[Pure]
    #[TentativeType]
*/
    public function isStatic(): bool {}

/**
* <div id="reflectionproperty.isdefault" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isDefault</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isDefault</span> — <span class="dc-title">Checks if property is a default property</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isdefault-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isDefault</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether the property was declared at compile-time, or whether the   property was dynamically declared at run-time.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isdefault-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isdefault-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property was declared at compile-time, or <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> if   it was created at run-time.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.isdefault-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5584">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isDefault()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">#[</span><span style="color: #9876AA">\AllowDynamicProperties</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">$bar</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bar </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br></span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">baz </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isDefault</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isDefault</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isdefault-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>   </ul>   </div></div>
    *
     * Checks if default value
     *
     * @link https://php.net/manual/zh/reflectionproperty.isdefault.php
     * @return bool Returns {@see true} if the property was declared at
     * compile-time, or {@see false} if it was created at run-time.
     
    #[Pure]
    #[TentativeType]
*/
    public function isDefault(): bool {}

/**
* <div id="reflectionproperty.getmodifiers" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getModifiers</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getModifiers</span> — <span class="dc-title">Gets the property modifiers</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getmodifiers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getModifiers</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   Gets the modifiers.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getmodifiers-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getmodifiers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A numeric representation of the modifiers.   The actual meaning of these modifiers are described under   <a href="https://php.net/manual/zh/class.reflectionproperty.php#reflectionproperty.constants.modifiers" class="link">predefined constants</a>.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getmodifiers-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link Reflection::getModifierNames()} - 获取修饰符的名称</span></li>   </ul>   </div></div>
    *
     * Gets modifiers
     *
     * @link https://php.net/manual/zh/reflectionproperty.getmodifiers.php
     * @return int A numeric representation of the modifiers.
     
    #[Pure]
    #[TentativeType]
*/
    public function getModifiers(): int {}

/**
* <div id="reflectionproperty.getdeclaringclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getDeclaringClass</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getDeclaringClass</span> — <span class="dc-title">Gets declaring class</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getdeclaringclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDeclaringClass</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div>  <p class="para rdfs-comment">   Gets the declaring class.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getdeclaringclass-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getdeclaringclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> object.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getdeclaringclass-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getName()} - Gets property name</span></li>   </ul>   </div></div>
    *
     * Gets declaring class
     *
     * @link https://php.net/manual/zh/reflectionproperty.getdeclaringclass.php
     * @return ReflectionClass A {@see ReflectionClass} object.
     
    #[Pure]
    #[TentativeType]
*/
    public function getDeclaringClass(): ReflectionClass {}

/**
* <div id="reflectionproperty.getdoccomment" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getDocComment</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getDocComment</span> — <span class="dc-title">Gets the property doc comment</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getdoccomment-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDocComment</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   Gets the doc comment for a property.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getdoccomment-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getdoccomment-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The doc comment if it exists, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.getdoccomment-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5572">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDocComment()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Str<br></span><span style="color: #007700">{<br>    </span><span style="color: #FF8000">//*<br>     * @var int  The length of the string<br>     <br>    </span><span style="color: #007700">public </span><span style="color: #9876AA">$length </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$prop </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'Str'</span><span style="color: #007700">, </span><span style="color: #DD0000">'length'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$prop</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDocComment</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(53) "//*<br>     * @var int  The length of the string<br>     "</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5573">    <p><strong>示例 #2 Multiple property declarations</strong></p>    <div class="example-contents"><p>     If multiple property declarations are preceeded by a single doc comment,     the doc comment refers to the first property only.    </p></div>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo<br></span><span style="color: #007700">{<br>    </span><span style="color: #FF8000">//* @var string <br>    </span><span style="color: #007700">public </span><span style="color: #9876AA">$a</span><span style="color: #007700">, </span><span style="color: #9876AA">$b</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">$class </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo'</span><span style="color: #007700">);<br>foreach (</span><span style="color: #9876AA">$class</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperties</span><span style="color: #007700">() as </span><span style="color: #9876AA">$property</span><span style="color: #007700">) {<br>    echo </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">() . </span><span style="color: #DD0000">': ' </span><span style="color: #007700">. </span><span style="color: #9876AA">var_export</span><span style="color: #007700">(</span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDocComment</span><span style="color: #007700">(), </span><span style="color: #9876AA">true</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">a: '//* @var string '<br>b: false</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getdoccomment-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getModifiers()} - Gets the property modifiers</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getName()} - Gets property name</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>   </ul>   </div></div>
    *
     * Gets doc comment
     *
     * @link https://php.net/manual/zh/reflectionproperty.getdoccomment.php
     * @return string|false The doc comment if it exists, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function getDocComment(): string|false {}

/**
* <div id="reflectionproperty.setaccessible" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::setAccessible</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::setAccessible</span> — <span class="dc-title">Set property accessibility</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.setaccessible-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setAccessible</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   Enables access to a protected or private property via the <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()}</span> and   <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setValue()}</span> methods.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    As of PHP 8.1.0, calling this method has no effect; all properties are accessible by default.   </span>  </p></blockquote> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.setaccessible-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">accessible</span></dt>     <dd>      <p class="para">       <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> to allow accessibility, or <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.setaccessible-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.setaccessible-examples"> <h3 class="title">示例</h3>  <div class="example" id="example-5590">   <p><strong>示例 #1 Simple Class definition</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">MyClass<br></span><span style="color: #007700">{<br>    private </span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"MyClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br>echo </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bar<br>Fatal error: Uncaught Error: Cannot access private property MyClass::$foo in /in/WJqTv:12</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.setaccessible-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>   </ul>   </div></div>
    *
     * Set property accessibility
     *
     * @link https://php.net/manual/zh/reflectionproperty.setaccessible.php
     * @param bool $accessible A boolean {@see true} to allow accessibility, or {@see false}
     * @return void No value is returned.
     
    #[PhpStormStubsElementAvailable(to: "8.0")]
    #[TentativeType]
*/
    public function setAccessible(#[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $accessible): void {}

/**
* <div id="reflectionproperty.setaccessible" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::setAccessible</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::setAccessible</span> — <span class="dc-title">Set property accessibility</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.setaccessible-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setAccessible</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   Enables access to a protected or private property via the <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()}</span> and   <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setValue()}</span> methods.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    As of PHP 8.1.0, calling this method has no effect; all properties are accessible by default.   </span>  </p></blockquote> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.setaccessible-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">accessible</span></dt>     <dd>      <p class="para">       <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> to allow accessibility, or <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.setaccessible-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.setaccessible-examples"> <h3 class="title">示例</h3>  <div class="example" id="example-5590">   <p><strong>示例 #1 Simple Class definition</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">MyClass<br></span><span style="color: #007700">{<br>    private </span><span style="color: #9876AA">$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">"MyClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br>echo </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bar<br>Fatal error: Uncaught Error: Cannot access private property MyClass::$foo in /in/WJqTv:12</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.setaccessible-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>   </ul>   </div></div>
    *
     * Set property accessibility
     * This method is no-op starting from PHP 8.1
     *
     * @link https://php.net/manual/zh/reflectionproperty.setaccessible.php
     * @param bool $accessible A boolean {@see true} to allow accessibility, or {@see false}
     * @return void No value is returned.
     
    #[Pure]
    #[PhpStormStubsElementAvailable(from: "8.1")]
    #[TentativeType]
*/
    public function setAccessible(bool $accessible): void {}

    /**
     * Gets property type
     *
     * @link https://php.net/manual/en/reflectionproperty.gettype.php
     * @return ReflectionNamedType|ReflectionUnionType|null Returns a {@see ReflectionType} if the
     * property has a type, and {@see null} otherwise.
     * @since 7.4
     */
    #[Pure]
    #[LanguageLevelTypeAware(
        [
            '8.0' => 'ReflectionNamedType|ReflectionUnionType|null',
            '8.1' => 'ReflectionNamedType|ReflectionUnionType|ReflectionIntersectionType|null'
        ],
        default: 'ReflectionNamedType|null'
    )]
/**
* <div id="reflectionproperty.gettype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getType</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getType</span> — <span class="dc-title">Gets a property's type</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.gettype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getType</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div>  <p class="para rdfs-comment">   Gets the associated type of a property.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.gettype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.gettype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span> if the property has a type,   and <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.gettype-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.gettype.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getType()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">User<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $name</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rp </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'User'</span><span style="color: #007700">, </span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$rp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getType</span><span style="color: #007700">()-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.gettype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasType()} - Checks if property has a type</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isInitialized()} - Checks whether a property is initialized</span></li>  </ul> </div></div>
    #[TentativeType]
*/
    public function getType(): ?ReflectionType {}

/**
* <div id="reflectionproperty.hastype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::hasType</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::hasType</span> — <span class="dc-title">Checks if property has a type</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.hastype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasType</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if the property has a type associated with it.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.hastype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.hastype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if a type is specified, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.hastype-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.hastype.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasType()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">User<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $name</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rp </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'User'</span><span style="color: #007700">, </span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasType</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.hastype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getType()} - Gets a property's type</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isInitialized()} - Checks whether a property is initialized</span></li>  </ul> </div></div>
    *
     * Checks if property has type
     *
     * @link https://php.net/manual/zh/reflectionproperty.hastype.php
     * @return bool Returns {@see true} if a type is specified, {@see false} otherwise.
     * @since 7.4
     
    #[TentativeType]
*/
    public function hasType(): bool {}

/**
* <div id="reflectionproperty.isinitialized" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isInitialized</h1>  <p class="verinfo">(PHP 7 &gt;= 7.4.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isInitialized</span> — <span class="dc-title">Checks whether a property is initialized</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isinitialized-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isInitialized</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether a property is initialized.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isinitialized-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <p class="para">      If the property is non-static an object must be provided to fetch the      property from.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isinitialized-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> for typed properties prior to initialization,   and for properties that have been explicitly <span class="function">{@link unset()}</span>.   For all other properties <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> will be returned.  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionproperty.isinitialized-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   Throws a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> if the property is inaccessible.   You can make a protected or private property accessible using   <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setAccessible()}</span>.  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionproperty.isinitialized-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">object</span> is nullable now.      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.isinitialized-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.isinitialized.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isInitialized()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">User<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $name</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rp </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'User'</span><span style="color: #007700">, </span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$user </span><span style="color: #007700">= new </span><span style="color: #9876AA">User</span><span style="color: #007700">;<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInitialized</span><span style="color: #007700">(</span><span style="color: #9876AA">$user</span><span style="color: #007700">));<br></span><span style="color: #9876AA">$user</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name </span><span style="color: #007700">= </span><span style="color: #DD0000">'Nikita'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isInitialized</span><span style="color: #007700">(</span><span style="color: #9876AA">$user</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isinitialized-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasType()} - Checks if property has a type</span></li>  </ul> </div></div>
    *
     * Checks if property is initialized
     *
     * @link https://php.net/manual/zh/reflectionproperty.isinitialized.php
     * @param object|null $object If the property is non-static an object must be provided to fetch the property from.
     * @return bool Returns {@see false} for typed properties prior to initialization, and for properties that have
     * been explicitly {@see unset()}. For all other properties {@see true} will be returned.
     * @since 7.4
     
    #[Pure]
    #[TentativeType]
*/
    public function isInitialized(?object $object = null): bool {}

/**
* <div id="reflectionproperty.ispromoted" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isPromoted</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isPromoted</span> — <span class="dc-title">Checks if property is promoted</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.ispromoted-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPromoted</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether the property is <a href="https://php.net/manual/zh/language.oop5.decon.php#language.oop5.decon.constructor.promotion" class="link">promoted</a>  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.ispromoted-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.ispromoted-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is promoted, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.ispromoted-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5588">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPromoted()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">$baz</span><span style="color: #007700">;<br><br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(public </span><span style="color: #9876AA">$bar</span><span style="color: #007700">) {}<br>}<br><br></span><span style="color: #9876AA">$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">(</span><span style="color: #9876AA">42</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">baz </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isPromoted</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isPromoted</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.ispromoted-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isDefault()} - Checks if property is a default property</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isInitialized()} - Checks whether a property is initialized</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>   </ul>   </div></div>
    *
     * Returns information about whether the property was promoted.
     *
     * @return bool Returns {@see true} if the property was promoted or {@see false} instead.
     * @since 8.0
     
    #[Pure]
*/
    public function isPromoted(): bool {}

    /**
     * Clone
     *
     * @link https://php.net/manual/en/reflectionproperty.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * Clone
     *
     * @link https://php.net/manual/en/reflectionproperty.clone.php
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "8.1")]
    private function __clone(): void {}

/**
* <div id="reflectionproperty.hasdefaultvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::hasDefaultValue</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::hasDefaultValue</span> — <span class="dc-title">Checks if property has a default value declared</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.hasdefaultvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasDefaultValue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks whether the property was declared with a default value, including an implicit   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> default value. Only returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> for typed properties without default value (or   dynamic properties).  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.hasdefaultvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.hasdefaultvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   If the property has any default value (including <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>) <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> is returned;   if the property is typed without a default value declared or is a dynamic property, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> is returned.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.hasdefaultvalue-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5580"> <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasDefaultValue()</strong></span> example</strong></p> <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">$bar</span><span style="color: #007700">;<br>    public ?</span><span style="color: #9876AA">int $baz</span><span style="color: #007700">;<br>    public ?</span><span style="color: #9876AA">int $foo </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br>    public </span><span style="color: #9876AA">int $boing</span><span style="color: #007700">;<br>    <br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">()<br>    {<br>        </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">ping </span><span style="color: #007700">= </span><span style="color: #DD0000">''</span><span style="color: #007700">;<br>    }<br>}<br><br></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'boing'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'ping'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Dynamic property<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'pong'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasDefaultValue</span><span style="color: #007700">()); </span><span style="color: #FF8000">// Not defined property<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div> </div> <div class="example-contents"><p>以上示例会输出：</p></div> <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)<br>bool(true)<br>bool(false)<br>bool(false)<br><br>Fatal error: Uncaught ReflectionException: Property Foo::$pong does not exist in example.php</blockquote></div> </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.hasdefaultvalue-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist"> <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getDefaultValue()} - Returns the default value declared for a property</span></li>   </ul>   </div></div>
    *
     * @return bool
     * @since 8.0
     
*/
    public function hasDefaultValue(): bool {}

/**
* <div id="reflectionproperty.getdefaultvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getDefaultValue</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getDefaultValue</span> — <span class="dc-title">Returns the default value declared for a property</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getdefaultvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDefaultValue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the implicit or explicitly declared default value for a property.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getdefaultvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getdefaultvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The default value if the property has any default value (including <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>).   If there is no default value, then <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> is returned. It is not possible to differentiate   between a <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> default value and an unitialized typed property.   Use <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasDefaultValue()}</span> to detect the difference.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.getdefaultvalue-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5571"> <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getDefaultValue()</strong></span> example</strong></p> <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">$bar </span><span style="color: #007700">= </span><span style="color: #9876AA">1</span><span style="color: #007700">;<br>    public ?</span><span style="color: #9876AA">int $baz</span><span style="color: #007700">;<br>    public </span><span style="color: #9876AA">int $boing </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(public </span><span style="color: #9876AA">string $bak </span><span style="color: #007700">= </span><span style="color: #DD0000">"default"</span><span style="color: #007700">) { }<br>}<br><br></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Foo</span><span style="color: #007700">::class);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'boing'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bak'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getDefaultValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div> </div> <div class="example-contents"><p>以上示例会输出：</p></div> <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">int(1)<br>NULL<br>int(0)<br>NULL</blockquote></div> </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getdefaultvalue-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasDefaultValue()} - Checks if property has a default value declared</span></li>   </ul>   </div></div>
    *
     * @return mixed
     * @since 8.0
     
    #[Pure]
    #[TentativeType]
*/
    public function getDefaultValue(): mixed {}

/**
* <div id="reflectionproperty.getattributes" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getAttributes</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getAttributes</span> — <span class="dc-title">Gets Attributes</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getattributes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getAttributes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   Returns all attributes declared on this class property as an array of <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="type ReflectionAttribute" style="color:#EAB766">ReflectionAttribute</a></span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getattributes-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">name</span></dt><dd> <p class="para">  过滤结果，匹配此类名，仅包含 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 实例的属性。 </p></dd>   <dt><span class="parameter" style="color:#3A95FF">flags</span></dt><dd> <p class="para">  如果提供了 <span class="parameter" style="color:#3A95FF">name</span>，则用于确定如何过滤结果的 flag。 </p> <p class="para">  默认值为 <span class="literal">0</span>，这将导致返回的结果只属于类 <span class="parameter" style="color:#3A95FF">name</span> 的属性。 </p> <p class="para">  唯一可用的其他选项是使用 <strong><span>{@link ReflectionAttribute::IS_INSTANCEOF}</span></strong>，它将改为使用 <span class="literal">instanceof</span> 进行过滤。 </p></dd>  </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getattributes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Array of attributes, as a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> object.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.getattributes-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5568">    <p><strong>示例 #1 Basic usage</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br>    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>    public </span><span style="color: #9876AA">string $apple </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">();<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;">     <div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>    [0] =&gt; Fruit<br>    [1] =&gt; Red<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5569">    <p><strong>示例 #2 Filtering results by class name</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br>    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>    public </span><span style="color: #9876AA">string $apple </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fruit'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;">     <div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>    [0] =&gt; Fruit<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5570">    <p><strong>示例 #3 Filtering results by class name, with inheritance</strong></p>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">interface </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">implements </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br>}<br><br>class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br>    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>    public </span><span style="color: #9876AA">string $apple </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$property </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">$property</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Color'</span><span style="color: #007700">, </span><span style="color: #9876AA">ReflectionAttribute</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_INSTANCEOF</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;">     <div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>    [0] =&gt; Red<br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getattributes-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getAttributes()} - 获取所有属性</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getAttributes()} - Gets Attributes</span></li>   </ul>   </div></div>
    *
     * @template T
     *
     * Returns an array of property attributes.
     *
     * @param class-string<T>|null $name Name of an attribute class
     * @param int $flags Сriteria by which the attribute is searched.
     * @return ReflectionAttribute<T>[]
     * @since 8.0
     
    #[Pure]
*/
    public function getAttributes(?string $name = null, int $flags = 0): array {}

/**
* <div id="reflectionproperty.isreadonly" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isReadOnly</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isReadOnly</span> — <span class="dc-title">检查属性是否为只读</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isreadonly-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isReadOnly</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   检查<a href="https://php.net/manual/zh/language.oop5.properties.php#language.oop5.properties.readonly-properties" class="link">属性是否为只读</a>。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isreadonly-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isreadonly-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果属性是只读的，则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isreadonly-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>   </ul>   </div></div>
    *
     * @return bool
     * @since 8.1
     
*/
    public function isReadOnly(): bool {}

/**
* <div id="reflectionproperty.getrawvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getRawValue</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getRawValue</span> — <span class="dc-title">Returns the value of a property, bypassing a get hook if defined</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getrawvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getRawValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="simpara">   Returns the value of a property, bypassing a <span class="literal">get</span> hook if defined.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getrawvalue-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object from which to retrieve a value.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getrawvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   The stored value of the property, bypassing a <span class="literal">get</span> hook if defined.  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionproperty.getrawvalue-errors">  <h3 class="title">错误／异常</h3>  <p class="simpara">   If the property is virtual, an <span class="classname"><a href="https://php.net/manual/zh/class.error.php" class="classname">Error</a></span> will be thrown,   as there is no raw value to retrieve.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.getrawvalue-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.getrawvalue.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getRawValue()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $tag </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">get </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">tag</span><span style="color: #007700">);<br>    }<br>}<br><br></span><span style="color: #9876AA">$example </span><span style="color: #007700">= new </span><span style="color: #9876AA">Example</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$example</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">tag </span><span style="color: #007700">= </span><span style="color: #DD0000">'PHP'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br></span><span style="color: #9876AA">$rProp </span><span style="color: #007700">= </span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'tag'</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// These would go through the get hook, so would produce "php"<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">$example</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">tag</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$example</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br><br></span><span style="color: #FF8000">// But this would bypass the hook and produce "PHP"<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getRawValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$example</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">php<br>php<br>PHP</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getrawvalue-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.visibility.php#language.oop5.visibility-members-aviz" class="link">Asymmetric property visibility</a></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function getRawValue(object $object): mixed {}

/**
* <div id="reflectionproperty.setrawvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::setRawValue</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::setRawValue</span> — <span class="dc-title">Sets the value of a property, bypassing a set hook if defined</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.setrawvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setRawValue</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="simpara">   Sets the value of a property, bypassing a <span class="literal">set</span> hook if defined.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.setrawvalue-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object on which to set the property value.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <span class="simpara">      The value to write.  It must still be valid according to the property's type.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.setrawvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   没有返回值。  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionproperty.setrawvalue-errors">  <h3 class="title">错误／异常</h3>  <p class="simpara">   If the property is virtual, an <span class="classname"><a href="https://php.net/manual/zh/class.error.php" class="classname">Error</a></span> will be thrown,   as there is no raw value to set.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.setrawvalue-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.setrawvalue.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setRawValue()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">int $age </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">set </span><span style="color: #007700">{<br>            if (</span><span style="color: #9876AA">$value </span><span style="color: #007700">&lt;= </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br>               throw new </span><span style="color: #9876AA">\InvalidArgumentException</span><span style="color: #007700">();<br>            }<br>            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">age </span><span style="color: #007700">= </span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br>        }<br>    }<br>}<br><br></span><span style="color: #9876AA">$example </span><span style="color: #007700">= new </span><span style="color: #9876AA">Example</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br></span><span style="color: #9876AA">$rProp </span><span style="color: #007700">= </span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'age'</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// These would go through the set hook, and throw an exception.<br></span><span style="color: #007700">try {<br>    </span><span style="color: #9876AA">$example</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">age </span><span style="color: #007700">= -</span><span style="color: #9876AA">2</span><span style="color: #007700">;<br>} catch (</span><span style="color: #9876AA">InvalidArgumentException</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"InvalidArgumentException for setting property to -2\n"</span><span style="color: #007700">;<br>}<br>try {<br>    </span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$example</span><span style="color: #007700">, -</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br>} catch (</span><span style="color: #9876AA">InvalidArgumentException</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"InvalidArgumentException for using ReflectionProperty::setValue() with -2\n"</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #FF8000">// But this would set the $age to -2 without error.<br></span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setRawValue</span><span style="color: #007700">(</span><span style="color: #9876AA">$example</span><span style="color: #007700">, -</span><span style="color: #9876AA">2</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$example</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">age</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">InvalidArgumentException for setting property to -2<br>InvalidArgumentException for using ReflectionProperty::setValue() with -2<br>-2</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.setrawvalue-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.visibility.php#language.oop5.visibility-members-aviz" class="link">Asymmetric property visibility</a></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function setRawValue(object $object, mixed $value): void {}

/**
* <div id="reflectionproperty.isabstract" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isAbstract</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isAbstract</span> — <span class="dc-title">Determines if a property is abstract</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isabstract-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isAbstract</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Determines if a property is   <a href="https://php.net/manual/zh/language.oop5.abstract.php" class="link">abstract</a>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isabstract-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isabstract-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is marked <span class="literal">abstract</span>, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isabstract-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.abstract.php" class="link">Abstract properties</a></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function isAbstract(): bool {}

/**
* <div id="reflectionproperty.isvirtual" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isVirtual</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isVirtual</span> — <span class="dc-title">Determines if a property is virtual</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isvirtual-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isVirtual</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Determines if a property is virtual.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isvirtual-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isvirtual-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is virtual, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.isvirtual-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.isvirtual.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isVirtual()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    </span><span style="color: #FF8000">// None of the hooks reference the property,<br>    // so this is virtual.<br>    </span><span style="color: #007700">public </span><span style="color: #9876AA">string $name </span><span style="color: #007700">{ </span><span style="color: #9876AA">get </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"Name here"</span><span style="color: #007700">; }<br><br>    </span><span style="color: #FF8000">// This hook references the property by name,<br>    // so it is not virtual.<br>    </span><span style="color: #007700">public </span><span style="color: #9876AA">int $age </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">set </span><span style="color: #007700">{<br>            if (</span><span style="color: #9876AA">$value </span><span style="color: #007700">&lt;= </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br>               throw new </span><span style="color: #9876AA">\InvalidArgumentException</span><span style="color: #007700">();<br>            }<br>            </span><span style="color: #9876AA">$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">age </span><span style="color: #007700">= </span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br>        }<br>    }<br><br>    </span><span style="color: #FF8000">// Non-hooked properties are always not-virtual.<br>    </span><span style="color: #007700">public </span><span style="color: #9876AA">string $job</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isVirtual</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'age'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isVirtual</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'job'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isVirtual</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)<br>bool(false)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isvirtual-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.property-hooks.php#language.oop5.property-hooks.virtual" class="link">Virtual properties</a></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function isVirtual(): bool {}

/**
* <div id="reflectionproperty.getsettabletype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getSettableType</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getSettableType</span> — <span class="dc-title">Returns the parameter type of a setter hook</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.getsettabletype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getSettableType</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div>  <p class="simpara">   Returns the parameter type of a <span class="literal">set</span> hook.   If no <span class="literal">set</span> hook is defined, it behaves identically   to <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getType()}</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.getsettabletype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.getsettabletype-returnvalues">  <h3 class="title">返回值</h3>  <ul class="simplelist">   <li>    This method returns an instance of <span class="classname"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span> that matches    the settable type for the property.   </li>   <li>    If there is a <span class="literal">set</span> hook that defines an explicit type, that will be returned.   </li>   <li>    If the hook does not specify a type, or it does not exist, the property type will be    returned, identically to <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getType()}</span>.  This value may be <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>    if the property is untyped.   </li>   <li>    If the property is virtual and has no <span class="literal">set</span> hook, a <span class="classname"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span>    instance for <span class="literal">never</span> will be returned.   </li>  </ul> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.getsettabletype-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.getsettabletype.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getSettableType()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $basic </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">set </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">strtolower</span><span style="color: #007700">(</span><span style="color: #9876AA">$value</span><span style="color: #007700">);<br>    }<br><br>    public </span><span style="color: #9876AA">string $wider </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">set</span><span style="color: #007700">(</span><span style="color: #9876AA">string</span><span style="color: #007700">|</span><span style="color: #9876AA">Stringable $value</span><span style="color: #007700">) =&gt; (string) </span><span style="color: #9876AA">$value</span><span style="color: #007700">;<br>    }<br><br>    public </span><span style="color: #9876AA">string $virtual </span><span style="color: #007700">{<br>        </span><span style="color: #9876AA">get </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Do not change this'</span><span style="color: #007700">;<br>    }<br><br>    public </span><span style="color: #9876AA">$untyped </span><span style="color: #007700">= </span><span style="color: #DD0000">'silly'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'basic'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getSettableType</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'wider'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getSettableType</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'virtual'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getSettableType</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'untyped'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">getSettableType</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionNamedType)#3 (0) {<br>}<br>object(ReflectionUnionType)#2 (0) {<br>}<br>object(ReflectionNamedType)#3 (0) {<br>}<br>NULL</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.getsettabletype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getType()} - Gets a property's type</span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function getSettableType(): ?ReflectionType {}

/**
* <div id="reflectionproperty.hashooks" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::hasHooks</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::hasHooks</span> — <span class="dc-title">Returns whether the property has any hooks defined</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.hashooks-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasHooks</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="simpara">   Returns whether the property has any hooks defined.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.hashooks-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.hashooks-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property has at least one hook defined, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.hashooks-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.hashooks.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasHooks()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $name </span><span style="color: #007700">{ </span><span style="color: #9876AA">get </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"Name here"</span><span style="color: #007700">; }<br><br>    public </span><span style="color: #9876AA">string $none</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasHooks</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'none'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">hasHooks</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)</blockquote></div>   </div>  </div> </div> <div class="refsect1 notes" id="refsect1-reflectionproperty.hashooks-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    This method is equivalent to checking <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getHooks()}</span>    against an empty array.   </span>  </p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.hashooks-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getHooks()} - Returns an array of all hooks on this property</span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function hasHooks(): bool {}

/**
* <div id="reflectionproperty.gethooks" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getHooks</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getHooks</span> — <span class="dc-title">Returns an array of all hooks on this property</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.gethooks-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getHooks</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="simpara">   Returns a list of all hooks on this property.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.gethooks-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.gethooks-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   An array of <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> objects keyed by the hook they are for.   For example, a property with both <span class="literal">get</span> and <span class="literal">set</span> hooks will return   a 2 element array with string keys <span class="literal">get</span> and <span class="literal">set</span>,   each of which are a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> object.   The order in which they are returned is explicitly undefined.   If no hooks are defined, an empty array is returned.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.gethooks-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.gethooks.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getHooks()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $name </span><span style="color: #007700">{ </span><span style="color: #9876AA">get </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"Name here"</span><span style="color: #007700">; }<br><br>    public </span><span style="color: #9876AA">int $count</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">$rProp </span><span style="color: #007700">= </span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getHooks</span><span style="color: #007700">());<br><br></span><span style="color: #9876AA">$rProp </span><span style="color: #007700">= </span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'count'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getHooks</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(1) {<br>  ["get"]=&gt;<br>  object(ReflectionMethod)#3 (2) {<br>    ["name"]=&gt;<br>    string(10) "$name::get"<br>    ["class"]=&gt;<br>    string(7) "Example"<br>  }<br>}<br>array(0) {<br>}</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.gethooks-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::hasHooks()} - Returns whether the property has any hooks defined</span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function getHooks(): array {}

/**
* <div id="reflectionproperty.hashook" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::hasHook</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::hasHook</span> — <span class="dc-title">Returns whether the property has a given hook defined</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.hashook-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasHook</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/enum.propertyhooktype.php" class="type PropertyHookType" style="color:#EAB766">PropertyHookType</a></span> <span class="parameter" style="color:#3A95FF">$type</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Returns whether the property has a given hook defined.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.hashook-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">PropertyHookType</span></dt>    <dd>     <span class="simpara">      The type of hook to check for.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.hashook-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the hook is defined on this property, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> if not.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.hashook-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.hashook.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::hasHook()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $name </span><span style="color: #007700">{ </span><span style="color: #9876AA">get </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"Name here"</span><span style="color: #007700">; }<br>}<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br></span><span style="color: #9876AA">$rProp </span><span style="color: #007700">= </span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasHook</span><span style="color: #007700">(</span><span style="color: #9876AA">PropertyHookType</span><span style="color: #007700">::</span><span style="color: #9876AA">Get</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasHook</span><span style="color: #007700">(</span><span style="color: #9876AA">PropertyHookType</span><span style="color: #007700">::</span><span style="color: #9876AA">Set</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)<br>bool(false)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.hashook-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span></li>   <li><span class="classname"><a href="https://php.net/manual/zh/enum.propertyhooktype.php" class="classname">PropertyHookType</a></span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function hasHook(PropertyHookType $type): bool {}

/**
* <div id="reflectionproperty.gethook" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::getHook</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::getHook</span> — <span class="dc-title">Returns a reflection object for a specified hook</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.gethook-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getHook</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/enum.propertyhooktype.php" class="type PropertyHookType" style="color:#EAB766">PropertyHookType</a></span> <span class="parameter" style="color:#3A95FF">$type</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></span></div>  <p class="simpara">   Gets the reflection of the property's hook, if any.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.gethook-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">PropertyHookType</span></dt>    <dd>     <span class="simpara">      The type of hook to request.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.gethook-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   If the requested hook is defined, a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> instance will be returned.   If not, the method will return <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.gethook-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.gethook.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::getHook()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $name </span><span style="color: #007700">{ </span><span style="color: #9876AA">get </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">"Name here"</span><span style="color: #007700">; }<br>}<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br></span><span style="color: #9876AA">$rProp </span><span style="color: #007700">= </span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getHook</span><span style="color: #007700">(</span><span style="color: #9876AA">PropertyHookType</span><span style="color: #007700">::</span><span style="color: #9876AA">Get</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rProp</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getHook</span><span style="color: #007700">(</span><span style="color: #9876AA">PropertyHookType</span><span style="color: #007700">::</span><span style="color: #9876AA">Set</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionMethod)#4 (2) {<br>  ["name"]=&gt;<br>  string(10) "$name::get"<br>  ["class"]=&gt;<br>  string(7) "Example"<br>}<br>NULL</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.gethook-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span></li>   <li><span class="classname"><a href="https://php.net/manual/zh/enum.propertyhooktype.php" class="classname">PropertyHookType</a></span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function getHook(PropertyHookType $type): ?ReflectionMethod {}

/**
* <div id="reflectionproperty.isprivateset" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isPrivateSet</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isPrivateSet</span> — <span class="dc-title">Checks if property is private for writing</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isprivateset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isPrivateSet</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Checks whether the property is private for writing.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isprivateset-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isprivateset-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is <span class="literal">private(set)</span>, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isprivateset-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtectedSet()} - Checks whether the property is protected for writing</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function isPrivateSet(): bool {}

/**
* <div id="reflectionproperty.isprotectedset" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isProtectedSet</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isProtectedSet</span> — <span class="dc-title">Checks whether the property is protected for writing</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isprotectedset-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isProtectedSet</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Checks whether the property is protected for writing.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isprotectedset-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isprotectedset-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is <span class="literal">protected(set)</span>, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isprotectedset-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPublic()} - Checks if property is public</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isProtected()} - Checks if property is protected</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivate()} - Checks if property is private</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isPrivateSet()} - Checks if property is private for writing</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isReadOnly()} - 检查属性是否为只读</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::isStatic()} - Checks if property is static</span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function isProtectedSet(): bool {}

/**
* <div id="reflectionproperty.setrawvaluewithoutlazyinitialization" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::setRawValueWithoutLazyInitialization</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::setRawValueWithoutLazyInitialization</span> — <span class="dc-title">Set raw property value without triggering lazy initialization</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.setrawvaluewithoutlazyinitialization-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::setRawValueWithoutLazyInitialization</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$value</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="simpara">   Sets (changes) the property's value without triggering lazy initialization   and without calling hook functions.   The property is marked as non-lazy and can be accessed afterwards without   triggering lazy initialization.   The property must not be dynamic, static, or virtual, and the object must be   an instance of a user defined class or <span class="classname"><a href="https://php.net/manual/zh/class.stdclass.php" class="classname">stdClass</a></span>.  </p>  <p class="simpara">   If this was the last lazy property, the object is marked as non-lazy and the   initializer or factory function is detached.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.setrawvaluewithoutlazyinitialization-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object to change the property on.     </span>    </dd>          <dt><span class="parameter" style="color:#3A95FF">value</span></dt>    <dd>     <span class="simpara">      The new value.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.setrawvaluewithoutlazyinitialization-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   没有返回值。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.setrawvaluewithoutlazyinitialization-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::skipLazyInitialization()} - Marks property as non-lazy</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()} - Creates a new lazy ghost instance</span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function setRawValueWithoutLazyInitialization(object $object, mixed $value): void {}

/**
* <div id="reflectionproperty.skiplazyinitialization" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::skipLazyInitialization</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::skipLazyInitialization</span> — <span class="dc-title">Marks property as non-lazy</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.skiplazyinitialization-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::skipLazyInitialization</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="simpara">   Marks a property as non-lazy such that it can be accessed directly without   triggering lazy initialization. The property is initialized to its default   value, if any.   The property must not be dynamic, static, or virtual, and the object must be   an instance of a user defined class or <span class="classname"><a href="https://php.net/manual/zh/class.stdclass.php" class="classname">stdClass</a></span>.  </p>  <p class="simpara">   If this was the last lazy property, the object is marked as non-lazy and the   initializer or factory function is detached.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.skiplazyinitialization-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object to mark the property on.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.skiplazyinitialization-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   没有返回值。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.skiplazyinitialization-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::setRawValueWithoutLazyInitialization()} - Set raw property value without triggering lazy initialization</span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::newLazyGhost()} - Creates a new lazy ghost instance</span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function skipLazyInitialization(object $object): void {}

/**
* <div id="reflectionproperty.isdynamic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isDynamic</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isDynamic</span> — <span class="dc-title">Checks if property is a dynamic property</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isdynamic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isDynamic</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Checks whether the property was declared at run-time, or whether the   property was declared at compile-time.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isdynamic-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isdynamic-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property was declared at run-time, or <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> if   it was created at compile-time.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.isdynamic-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5585">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isDynamic()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">#[</span><span style="color: #9876AA">\AllowDynamicProperties</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">$bar</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$o </span><span style="color: #007700">= new </span><span style="color: #9876AA">Foo</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">bar </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br></span><span style="color: #9876AA">$o</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">baz </span><span style="color: #007700">= </span><span style="color: #9876AA">42</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">$ro </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionObject</span><span style="color: #007700">(</span><span style="color: #9876AA">$o</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'bar'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isDynamic</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$ro</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'baz'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isDynamic</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isdynamic-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()} - Gets value</span></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function isDynamic(): bool {}

/**
* <div id="reflectionproperty.isfinal" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isFinal</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isFinal</span> — <span class="dc-title">Determines if this property is final or not</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.isfinal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isFinal</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div>  <p class="simpara">   Returns whether the property is   <a href="https://php.net/manual/zh/language.oop5.final.php" class="link"><span class="literal">final</span></a>.   If the property is marked <span class="literal">private(set)</span>,   then it will also be implicitly <span class="literal">final</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.isfinal-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.isfinal-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is explicitly marked <span class="literal">final</span>,   or if it is implicitly <span class="literal">final</span> due to being <span class="literal">private(set)</span>.   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionproperty.isfinal-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionproperty.isfinal.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isFinal()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Example<br></span><span style="color: #007700">{<br>    public </span><span style="color: #9876AA">string $name</span><span style="color: #007700">;<br><br>    final protected </span><span style="color: #9876AA">int $age</span><span style="color: #007700">;<br><br>    public private(</span><span style="color: #9876AA">set</span><span style="color: #007700">) </span><span style="color: #9876AA">string $job</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rClass </span><span style="color: #007700">= new </span><span style="color: #9876AA">\ReflectionClass</span><span style="color: #007700">(</span><span style="color: #9876AA">Example</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'name'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isFinal</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'age'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isFinal</span><span style="color: #007700">());<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rClass</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProperty</span><span style="color: #007700">(</span><span style="color: #DD0000">'job'</span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">isFinal</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(false)<br>bool(true)<br>bool(true)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.isfinal-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.final.php" class="link"><span class="literal">final</span> class elements</a></li>   <li><a href="https://php.net/manual/zh/language.oop5.visibility.php#language.oop5.visibility-members-aviz" class="link">Asymmetric property visibility</a></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function isFinal(): bool {}

/**
* <div id="reflectionproperty.islazy" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionProperty::isLazy</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionProperty::isLazy</span> — <span class="dc-title">Checks whether a property is lazy</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionproperty.islazy-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionProperty::isLazy</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span> <span class="parameter" style="color:#3A95FF">$object</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Checks whether a property is lazy.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionproperty.islazy-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <span class="simpara">      The object to check the property on.     </span>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionproperty.islazy-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the property is lazy, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionproperty.islazy-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/language.oop5.lazy-objects.php" class="link">Lazy objects</a></li>  </ul> </div></div>
    *
     * @since 8.4
     
*/
    public function isLazy(object $object): bool {}
}
