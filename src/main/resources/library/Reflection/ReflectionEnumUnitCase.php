<?php

use JetBrains\PhpStorm\Pure;

/**
* <div id="class.reflectionenumunitcase" class="reference"> <h1 class="title">ReflectionEnumUnitCase 类</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.1.0)</p>  <div class="section" id="reflectionenumunitcase.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionEnumUnitCase</strong></span> 类报告了 Enum 单元条目，    不包含对应的标量。   </p>  </div>  <div class="section" id="reflectionenumunitcase.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionEnumUnitCase</strong></strong>             <span class="modifier">extends</span>      <a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname">{@link ReflectionClassConstant::IS_PUBLIC}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname">{@link ReflectionClassConstant::IS_PROTECTED}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname">{@link ReflectionClassConstant::IS_PRIVATE}</var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname">{@link ReflectionClassConstant::IS_FINAL}</var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.props.name">$<var class="varname">name</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.props.class">$<var class="varname">class</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionenumunitcase.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$constant</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionenumunitcase.getenum.php" class="methodname" style="color:#CC7832">getEnum</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionenum.php" class="type ReflectionEnum" style="color:#EAB766">ReflectionEnum</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionenumunitcase.getvalue.php" class="methodname" style="color:#CC7832">getValue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.unitenum.php" class="type UnitEnum" style="color:#EAB766">UnitEnum</a></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::export}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getAttributes}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getDeclaringClass}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getDocComment}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getModifiers}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getName}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getValue}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::hasType}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isDeprecated}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isEnumCase}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isFinal}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isPrivate}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isProtected}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isPublic}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>   }</div>  </div>  <div class="section" id="reflectionenumunitcase.seealso">   <h2 class="title">参见</h2>   <p class="para">    </p><ul class="simplelist">     <li><a href="https://php.net/manual/zh/language.enumerations.php" class="link">枚举</a></li>     <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionenumbackedcase.php" class="classname">ReflectionEnumBackedCase</a></span></li>    </ul>     </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionEnumUnitCase::__construct} — Instantiates a ReflectionEnumUnitCase object</li><li>{@link ReflectionEnumUnitCase::getEnum} — 获取该枚举条目的反射</li><li>{@link ReflectionEnumUnitCase::getValue} — 获取反射对象描述的枚举条目对象</li></ul></div>
*
 * @link https://php.net/manual/zh/class.reflectionenumunitcase.php
 * @since 8.1
 
*/
class ReflectionEnumUnitCase extends ReflectionClassConstant
{
    public function __construct(object|string $class, string $constant) {}

/**
* <div id="reflectionenumunitcase.getvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionEnumUnitCase::getValue</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionEnumUnitCase::getValue</span> — <span class="dc-title">获取反射对象描述的枚举条目对象</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionenumunitcase.getvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionEnumUnitCase::getValue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.unitenum.php" class="type UnitEnum" style="color:#EAB766">UnitEnum</a></span></div>  <p class="para rdfs-comment">  获取该反射对象描述的枚举条目对象。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionenumunitcase.getvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionenumunitcase.getvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  反射对象描述的枚举条目对象。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionenumunitcase.getvalue-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5503">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionEnum::getValue()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">enum </span><span style="color: #9876AA">Suit<br></span><span style="color: #007700">{<br>    case </span><span style="color: #9876AA">Hearts</span><span style="color: #007700">;<br>    case </span><span style="color: #9876AA">Diamonds</span><span style="color: #007700">;<br>    case </span><span style="color: #9876AA">Clubs</span><span style="color: #007700">;<br>    case </span><span style="color: #9876AA">Spades</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">$rEnum </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionEnum</span><span style="color: #007700">(</span><span style="color: #9876AA">Suit</span><span style="color: #007700">::class);<br><br></span><span style="color: #9876AA">$rCase </span><span style="color: #007700">= </span><span style="color: #9876AA">$rEnum</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getCase</span><span style="color: #007700">(</span><span style="color: #DD0000">'Diamonds'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$rCase</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">enum(Suit::Diamonds)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionenumunitcase.getvalue-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/language.enumerations.php" class="link">枚举</a></li>   </ul>   </div></div>
    #[Pure]
*/
    public function getValue(): UnitEnum {}

/**
* <div id="reflectionenumunitcase.getenum" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionEnumUnitCase::getEnum</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionEnumUnitCase::getEnum</span> — <span class="dc-title">获取该枚举条目的反射</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionenumunitcase.getenum-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionEnumUnitCase::getEnum</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionenum.php" class="type ReflectionEnum" style="color:#EAB766">ReflectionEnum</a></span></div>  <p class="para rdfs-comment">  获取该枚举条目的反射。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionenumunitcase.getenum-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionenumunitcase.getenum-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">  描述属于该枚举条目的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionenum.php" class="classname">ReflectionEnum</a></span> 实例。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionenumunitcase.getenum-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><a href="https://php.net/manual/zh/language.enumerations.php" class="link">枚举</a></li>   </ul>   </div></div>
    *
     * @return ReflectionEnum
     
    #[Pure]
*/
    public function getEnum(): ReflectionEnum {}
}
