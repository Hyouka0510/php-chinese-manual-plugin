<?php
/**
* <div id="class.reflectionconstant" class="reference"> <h1 class="title">The ReflectionConstant class</h1>  <div class="partintro"><p class="verinfo">(PHP 8 &gt;= 8.4.0)</p>  <div class="section" id="reflectionconstant.intro">   <h2 class="title">简介</h2>   <p class="simpara">    The <span class="classname"><strong class="classname">ReflectionConstant</strong></span> class reports    information about a global constant.   </p>  </div>  <div class="section" id="reflectionconstant.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">final</span>     <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionConstant</strong></strong>             <span class="modifier">implements</span>      <a href="https://php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionconstant.php#reflectionconstant.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$name</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.getextension.php" class="methodname" style="color:#CC7832">getExtension</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.getextensionname.php" class="methodname" style="color:#CC7832">getExtensionName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.getfilename.php" class="methodname" style="color:#CC7832">getFileName</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.getnamespacename.php" class="methodname" style="color:#CC7832">getNamespaceName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.getshortname.php" class="methodname" style="color:#CC7832">getShortName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.getvalue.php" class="methodname" style="color:#CC7832">getValue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.isdeprecated.php" class="methodname" style="color:#CC7832">isDeprecated</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionconstant.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>   }</div>  </div>  <div class="section" id="reflectionconstant.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionconstant.props.name"><var class="varname">name</var></dt>     <dd>      <span class="simpara">       Name of the constant. Read-only, throws       <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> in attempt to write.      </span>     </dd>       </dl>  </div>  <div class="section" id="reflectionconstant.seealso">   <h2 class="title">参见</h2>   <ul class="simplelist">    <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php" class="classname">ReflectionClassConstant</a></span></li>   </ul>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionConstant::__construct} — Constructs a ReflectionConstant</li><li>{@link ReflectionConstant::getExtension} — Gets ReflectionExtension of the defining extension</li><li>{@link ReflectionConstant::getExtensionName} — Gets name of the defining extension</li><li>{@link ReflectionConstant::getFileName} — Gets name of the defining file</li><li>{@link ReflectionConstant::getName} — Gets name</li><li>{@link ReflectionConstant::getNamespaceName} — Gets namespace name</li><li>{@link ReflectionConstant::getShortName} — Gets short name</li><li>{@link ReflectionConstant::getValue} — Gets value</li><li>{@link ReflectionConstant::isDeprecated} — Checks if deprecated</li><li>{@link ReflectionConstant::__toString} — Returns string representation</li></ul></div>
*
 * @since 8.4
 
*/
final class ReflectionConstant implements Reflector
{
    public string $name;

    public function __construct(string $name) {}

/**
* <div id="reflectionconstant.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionConstant::getName</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionConstant::getName</span> — <span class="dc-title">Gets name</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionconstant.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::getName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="simpara">   Gets the name of the constant.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionconstant.getname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionconstant.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   The constants name, which is composed of its namespace and name.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionconstant.getname-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5493">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::getName()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">namespace </span><span style="color: #9876AA">Foo</span><span style="color: #007700">;<br><br>const </span><span style="color: #9876AA">BAR </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br><br>echo (new </span><span style="color: #9876AA">\ReflectionConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo\BAR'</span><span style="color: #007700">))-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Foo\BAR</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionconstant.getname-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionConstant::getNamespaceName()} - Gets namespace name</span></li>  </ul> </div></div>
*/
    public function getName(): string {}

/**
* <div id="reflectionconstant.getnamespacename" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionConstant::getNamespaceName</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionConstant::getNamespaceName</span> — <span class="dc-title">Gets namespace name</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionconstant.getnamespacename-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::getNamespaceName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="simpara">   Gets the namespace name of the constant.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionconstant.getnamespacename-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionconstant.getnamespacename-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   The namespace name, or an empty string for the global namespace.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionconstant.getnamespacename-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5494">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::getNamespaceName()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">namespace </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>   const </span><span style="color: #9876AA">BAR </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br>   </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">((new </span><span style="color: #9876AA">\ReflectionConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo\BAR'</span><span style="color: #007700">))-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br>}<br><br>namespace {<br>   const </span><span style="color: #9876AA">BAR </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br>   </span><span style="color: #9876AA">var_dump</span><span style="color: #007700">((new </span><span style="color: #9876AA">\ReflectionConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'BAR'</span><span style="color: #007700">))-&gt;</span><span style="color: #9876AA">getNamespaceName</span><span style="color: #007700">());<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(3) "Foo"<br>string(0) ""</blockquote></div>   </div>  </div> </div></div>
*/
    public function getNamespaceName(): string {}

/**
* <div id="reflectionconstant.getshortname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionConstant::getShortName</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionConstant::getShortName</span> — <span class="dc-title">Gets short name</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionconstant.getshortname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::getShortName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="simpara">   Gets the short name of the constant, the part without the namespace.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionconstant.getshortname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionconstant.getshortname-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   The short name of the constant.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionconstant.getshortname-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5495">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::getShortName()</strong></span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">namespace </span><span style="color: #9876AA">Foo</span><span style="color: #007700">;<br><br>const </span><span style="color: #9876AA">BAR </span><span style="color: #007700">= </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br><br>echo (new </span><span style="color: #9876AA">\ReflectionConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'Foo\BAR'</span><span style="color: #007700">))-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">BAR</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionconstant.getshortname-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionConstant::getName()} - Gets name</span></li>  </ul> </div></div>
*/
    public function getShortName(): string {}

/**
* <div id="reflectionconstant.getvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionConstant::getValue</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionConstant::getValue</span> — <span class="dc-title">Gets value</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionconstant.getvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::getValue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="simpara">   Gets the value of the constant.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionconstant.getvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionconstant.getvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   The value of the constant.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionconstant.getvalue-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5496">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getValue()}</span> example</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">const </span><span style="color: #9876AA">FOO </span><span style="color: #007700">= </span><span style="color: #DD0000">'foo'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">((new </span><span style="color: #9876AA">\ReflectionConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'FOO'</span><span style="color: #007700">))-&gt;</span><span style="color: #9876AA">getValue</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">string(3) "foo"</blockquote></div>   </div>  </div> </div></div>
*/
    public function getValue(): mixed {}

/**
* <div id="reflectionconstant.isdeprecated" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionConstant::isDeprecated</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionConstant::isDeprecated</span> — <span class="dc-title">Checks if deprecated</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionconstant.isdeprecated-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::isDeprecated</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Checks whether the constant is deprecated.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionconstant.isdeprecated-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionconstant.isdeprecated-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if it's deprecated, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionconstant.isdeprecated-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5497">   <p><strong>示例 #1     <span class="methodname" style="color:#CC7832"><strong>ReflectionConstant::isDeprecated()</strong></span> example   </strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// E_STRICT is deprecated as of PHP 8.4<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">((new </span><span style="color: #9876AA">ReflectionConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'E_STRICT'</span><span style="color: #007700">))-&gt;</span><span style="color: #9876AA">isDeprecated</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例在 PHP 8.4 中的输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>   </div>  </div> </div></div>
*/
    public function isDeprecated(): bool {}

    public function __toString(): string {}
}
