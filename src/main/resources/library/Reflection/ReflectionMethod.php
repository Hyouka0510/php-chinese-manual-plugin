<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
* <div id="class.reflectionmethod" class="reference"> <h1 class="title">ReflectionMethod 类</h1>  <div class="partintro"><p class="verinfo">(PHP 5, PHP 7, PHP 8)</p>  <div class="section" id="reflectionmethod.intro">   <h2 class="title">简介</h2>   <p class="para">    <span class="classname"><strong class="classname">ReflectionMethod</strong></span> 类报告有关方法的信息。   </p>  </div>  <div class="section" id="reflectionmethod.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionMethod</strong></strong>             <span class="modifier">extends</span>      <a href="https://php.net/manual/zh/class.reflectionfunctionabstract.php" class="classname">ReflectionFunctionAbstract</a>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionmethod.php#reflectionmethod.constants.is-static"><var class="varname">IS_STATIC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionmethod.php#reflectionmethod.constants.is-public"><var class="varname">IS_PUBLIC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionmethod.php#reflectionmethod.constants.is-protected"><var class="varname">IS_PROTECTED</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionmethod.php#reflectionmethod.constants.is-private"><var class="varname">IS_PRIVATE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionmethod.php#reflectionmethod.constants.is-abstract"><var class="varname">IS_ABSTRACT</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionmethod.php#reflectionmethod.constants.is-final"><var class="varname">IS_FINAL</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionmethod.php#reflectionmethod.props.class">$<var class="varname">class</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionfunctionabstract.php#reflectionfunctionabstract.props.name">$<var class="varname">name</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$objectOrMethod</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$method</span></span>)</div><div class="constructorsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$classMethod</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.createfrommethodname.php" class="methodname" style="color:#CC7832">createFromMethodName</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$method</span></span>): <span class="type" style="color:#EAB766">static</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.export.php" class="methodname" style="color:#CC7832">export</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.getclosure.php" class="methodname" style="color:#CC7832">getClosure</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.getdeclaringclass.php" class="methodname" style="color:#CC7832">getDeclaringClass</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.getmodifiers.php" class="methodname" style="color:#CC7832">getModifiers</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.getprototype.php" class="methodname" style="color:#CC7832">getPrototype</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.hasprototype.php" class="methodname" style="color:#CC7832">hasPrototype</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.invoke.php" class="methodname" style="color:#CC7832">invoke</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.invokeargs.php" class="methodname" style="color:#CC7832">invokeArgs</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.isabstract.php" class="methodname" style="color:#CC7832">isAbstract</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.isconstructor.php" class="methodname" style="color:#CC7832">isConstructor</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.isdestructor.php" class="methodname" style="color:#CC7832">isDestructor</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.isfinal.php" class="methodname" style="color:#CC7832">isFinal</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.isprivate.php" class="methodname" style="color:#CC7832">isPrivate</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.isprotected.php" class="methodname" style="color:#CC7832">isProtected</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.ispublic.php" class="methodname" style="color:#CC7832">isPublic</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.setaccessible.php" class="methodname" style="color:#CC7832">setAccessible</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionmethod.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::__clone}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getAttributes}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureCalledClass}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureScopeClass}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureThis}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getClosureUsedVariables}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getDocComment}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getEndLine}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getExtension}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionextension.php" class="type ReflectionExtension" style="color:#EAB766">ReflectionExtension</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getExtensionName}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getFileName}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getName}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNamespaceName}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfParameters}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getNumberOfRequiredParameters}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getParameters}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getReturnType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getShortName}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getStartLine}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getStaticVariables}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getTentativeReturnType}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::hasReturnType}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::hasTentativeReturnType}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::inNamespace}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isClosure}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isDeprecated}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isGenerator}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isInternal}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isStatic}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isUserDefined}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::isVariadic}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::returnsReference}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">abstract</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div>    <div class="section" id="reflectionmethod.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionmethod.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">方法名</p>     </dd>             <dt id="reflectionmethod.props.class"><var class="varname">class</var></dt>     <dd>      <p class="para">类名</p>     </dd>       </dl>  </div>  <div class="section" id="reflectionmethod.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="reflectionmethod.constants.modifiers">    <h2 class="title">ReflectionMethod 修饰符</h2>    <dl>           <dt id="reflectionmethod.constants.is-static">       <strong><span>{@link ReflectionMethod::IS_STATIC}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该方法是 static。在 PHP 7.4.0 之前，值为 <span class="literal">1</span>。       </p>      </dd>                <dt id="reflectionmethod.constants.is-public">       <strong><span>{@link ReflectionMethod::IS_PUBLIC}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该方法是 public。在 PHP 7.4.0 之前，值为 <span class="literal">256</span>。       </p>      </dd>                <dt id="reflectionmethod.constants.is-protected">       <strong><span>{@link ReflectionMethod::IS_PROTECTED}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该方法是 protected。在 PHP 7.4.0 之前，值为 <span class="literal">512</span>。       </p>      </dd>                <dt id="reflectionmethod.constants.is-private">       <strong><span>{@link ReflectionMethod::IS_PRIVATE}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该方法是 private。在 PHP 7.4.0 之前，值为 <span class="literal">1024</span>。       </p>      </dd>                <dt id="reflectionmethod.constants.is-abstract">       <strong><span>{@link ReflectionMethod::IS_ABSTRACT}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该方法是 abstract。PHP 7.4.0 之前，值为 <span class="literal">2</span>。       </p>      </dd>                <dt id="reflectionmethod.constants.is-final">       <strong><span>{@link ReflectionMethod::IS_FINAL}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        表示该方法是 final。PHP 7.4.0 之前，值为 <span class="literal">4</span>。       </p>      </dd>         </dl>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      </p><p class="para">      这些常量的值可能会在不同 PHP 版本间发生更改。建议始终使用常量而不直接依赖值。     </p>    </blockquote>   </div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.4.0</td>       <td>        所有类常量现已类型化。       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        已移除 <span class="methodname" style="color:#CC7832">{@link ReflectionMethod::export()}</span>。       </td>      </tr>     </tbody>       </table>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionMethod::__construct} — 构造 ReflectionMethod</li><li>{@link ReflectionMethod::createFromMethodName} — Creates a new ReflectionMethod</li><li>{@link ReflectionMethod::export} — 导出 reflection 方法</li><li>{@link ReflectionMethod::getClosure} — 返回动态建立的方法调用接口（译者注：可以使用这个返回值直接调用非公开方法）</li><li>{@link ReflectionMethod::getDeclaringClass} — 获取被反射的方法所在类的反射实例</li><li>{@link ReflectionMethod::getModifiers} — 获取方法的修饰符</li><li>{@link ReflectionMethod::getPrototype} — 返回方法原型 (如果存在)</li><li>{@link ReflectionMethod::hasPrototype} — Returns whether a method has a prototype</li><li>{@link ReflectionMethod::invoke} — Invoke</li><li>{@link ReflectionMethod::invokeArgs} — 带参数执行</li><li>{@link ReflectionMethod::isAbstract} — 判断方法是否是抽象方法</li><li>{@link ReflectionMethod::isConstructor} — 判断方法是否是构造方法</li><li>{@link ReflectionMethod::isDestructor} — 判断方法是否是析构方法</li><li>{@link ReflectionMethod::isFinal} — 判断方法是否定义 final</li><li>{@link ReflectionMethod::isPrivate} — 判断方法是否是私有</li><li>{@link ReflectionMethod::isProtected} — 判断方法是否是 protected</li><li>{@link ReflectionMethod::isPublic} — 判断方法是否是 public</li><li>{@link ReflectionMethod::setAccessible} — 设置方法是否可访问</li><li>{@link ReflectionMethod::__toString} — 返回反射方法对象的字符串表达</li></ul></div>
*
 * The <b>ReflectionMethod</b> class reports
 * information about a method.
 *
 * @link https://php.net/manual/zh/class.reflectionmethod.php
 
*/
class ReflectionMethod extends ReflectionFunctionAbstract
{
    /**
     * @var string Name of the method, same as calling the {@see ReflectionMethod::getName()} method
     */
    #[Immutable]
    public $name;

    /**
     * @var string Fully qualified class name where this method was defined
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $class;

    /**
     * Indicates that the method is static.
     */
    public const IS_STATIC = 16;

    /**
     * Indicates that the method is public.
     */
    public const IS_PUBLIC = 1;

    /**
     * Indicates that the method is protected.
     */
    public const IS_PROTECTED = 2;

    /**
     * Indicates that the method is private.
     */
    public const IS_PRIVATE = 4;

    /**
     * Indicates that the method is abstract.
     */
    public const IS_ABSTRACT = 64;

    /**
     * Indicates that the method is final.
     */
    public const IS_FINAL = 32;

    /**
     * Constructs a ReflectionMethod
     *
     * <code>
     * $reflection = new ReflectionMethod(new Example(), 'method');
     * $reflection = new ReflectionMethod(Example::class, 'method');
     * $reflection = new ReflectionMethod('Example::method');
     * </code>
     *
     * @link https://php.net/manual/en/reflectionmethod.construct.php
     * @param string|object $objectOrMethod Classname, object
     * (instance of the class) that contains the method or class name and
     * method name delimited by ::.
     * @param string|null $method Name of the method if the first argument is a
     * classname or an object.
     * @throws ReflectionException if the class or method does not exist.
     */
    public function __construct(
        #[LanguageLevelTypeAware(['8.0' => 'object|string'], default: '')] $objectOrMethod,
        #[LanguageLevelTypeAware(['8.0' => 'string|null'], default: '')] $method = null
    ) {}

/**
* <div id="reflectionmethod.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::export</h1>  <p class="verinfo">(PHP 5, PHP 7)</p><p class="refpurpose"><span class="refname">ReflectionMethod::export</span> — <span class="dc-title">导出 reflection 方法</span></p> </div> <div id="reflectionmethod.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$return</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   导出 ReflectionMethod。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.export-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       类名称。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       方法名称。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 时返回导出结果，设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>（默认值）则忽略返回。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果参数 <span class="parameter" style="color:#3A95FF">return</span> 设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，导出结果将作为 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>返回，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionmethod.export-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数已移除。      </td>     </tr>     <tr>      <td>7.4.0</td>      <td>       此函数已废弃。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.export-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::__construct()} - 构造 ReflectionMethod</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::__toString()} - 返回反射方法对象的字符串表达</span></li>   </ul>   </div></div>
    *
     * Export a reflection method.
     *
     * @link https://php.net/manual/zh/reflectionmethod.export.php
     * @param string $class The class name.
     * @param string $name The name of the method.
     * @param bool $return Setting to {@see true} will return the export,
     * as opposed to emitting it. Setting to {@see false} (the default) will do the
     * opposite.
     * @return string|null If the $return parameter is set to {@see true}, then
     * the export is returned as a string, otherwise {@see null} is returned.
     * @removed 8.0
     
    #[Deprecated(since: '7.4')]
*/
    public static function export($class, $name, $return = false) {}

    /**
     * Returns the string representation of the ReflectionMethod object.
     *
     * @link https://php.net/manual/en/reflectionmethod.tostring.php
     * @return string A string representation of this {@see ReflectionMethod} instance.
     */
    #[TentativeType]
    public function __toString(): string {}

/**
* <div id="reflectionmethod.ispublic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::isPublic</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::isPublic</span> — <span class="dc-title">判断方法是否是 public</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.ispublic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::isPublic</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   判断方法是否是 public。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.ispublic-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.ispublic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   方法是 public，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.ispublic-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isPrivate()} - 判断方法是否是私有</span></li>   </ul>   </div></div>
    *
     * Checks if method is public
     *
     * @link https://php.net/manual/zh/reflectionmethod.ispublic.php
     * @return bool Returns {@see true} if the method is public, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isPublic(): bool {}

/**
* <div id="reflectionmethod.isprivate" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::isPrivate</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::isPrivate</span> — <span class="dc-title">判断方法是否是私有</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.isprivate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::isPrivate</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   判断方法是否是私有。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.isprivate-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.isprivate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   方法私有为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.isprivate-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isPublic()} - 判断方法是否是 public</span></li>   </ul>   </div></div>
    *
     * Checks if method is private
     *
     * @link https://php.net/manual/zh/reflectionmethod.isprivate.php
     * @return bool Returns {@see true} if the method is private, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isPrivate(): bool {}

/**
* <div id="reflectionmethod.isprotected" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::isProtected</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::isProtected</span> — <span class="dc-title">判断方法是否是 protected</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.isprotected-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::isProtected</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   判断方法是否是 protected。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.isprotected-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.isprotected-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   方法是 protected，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.isprotected-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isPrivate()} - 判断方法是否是私有</span></li>   </ul>   </div></div>
    *
     * Checks if method is protected
     *
     * @link https://php.net/manual/zh/reflectionmethod.isprotected.php
     * @return bool Returns {@see true} if the method is protected, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isProtected(): bool {}

/**
* <div id="reflectionmethod.isabstract" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::isAbstract</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::isAbstract</span> — <span class="dc-title">判断方法是否是抽象方法</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.isabstract-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::isAbstract</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   判断方法是否是抽象方法  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.isabstract-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.isabstract-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果是抽象方法返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.isabstract-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::getDeclaringClass()} - 获取被反射的方法所在类的反射实例</span></li>   </ul>   </div></div>
    *
     * Checks if method is abstract
     *
     * @link https://php.net/manual/zh/reflectionmethod.isabstract.php
     * @return bool Returns {@see true} if the method is abstract, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isAbstract(): bool {}

/**
* <div id="reflectionmethod.isfinal" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::isFinal</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::isFinal</span> — <span class="dc-title">判断方法是否定义 final</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.isfinal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::isFinal</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   判断方法是否定义 final。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.isfinal-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.isfinal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果是 final 返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.isfinal-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::isStatic()</strong></span></li>   </ul>   </div></div>
    *
     * Checks if method is final
     *
     * @link https://php.net/manual/zh/reflectionmethod.isfinal.php
     * @return bool Returns {@see true} if the method is final, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isFinal(): bool {}

    /**
     * Checks if method is static
     *
     * @link https://php.net/manual/en/reflectionmethod.isstatic.php
     * @return bool Returns {@see true} if the method is static, otherwise {@see false}
     */
    #[Pure]
    #[TentativeType]
    public function isStatic(): bool {}

/**
* <div id="reflectionmethod.isconstructor" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::isConstructor</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::isConstructor</span> — <span class="dc-title">判断方法是否是构造方法</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.isconstructor-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::isConstructor</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   判断方法是否是构造方法  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.isconstructor-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.isconstructor-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果是构造方法返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.isconstructor-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::__construct()} - 构造 ReflectionMethod</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isAbstract()} - 判断方法是否是抽象方法</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isDestructor()} - 判断方法是否是析构方法</span></li>   </ul>   </div></div>
    *
     * Checks if method is a constructor
     *
     * @link https://php.net/manual/zh/reflectionmethod.isconstructor.php
     * @return bool Returns {@see true} if the method is a constructor, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isConstructor(): bool {}

/**
* <div id="reflectionmethod.isdestructor" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::isDestructor</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::isDestructor</span> — <span class="dc-title">判断方法是否是析构方法</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.isdestructor-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::isDestructor</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   判断方法是否是析构方法  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.isdestructor-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.isdestructor-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果是析构方法返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.isdestructor-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isConstructor()} - 判断方法是否是构造方法</span></li>   </ul>   </div></div>
    *
     * Checks if method is a destructor
     *
     * @link https://php.net/manual/zh/reflectionmethod.isdestructor.php
     * @return bool Returns {@see true} if the method is a destructor, otherwise {@see false}
     
    #[Pure]
    #[TentativeType]
*/
    public function isDestructor(): bool {}

/**
* <div id="reflectionmethod.getclosure" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::getClosure</h1>  <p class="verinfo">(PHP 5 &gt;= 5.4.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::getClosure</span> — <span class="dc-title">返回动态建立的方法调用接口（译者注：可以使用这个返回值直接调用非公开方法）</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.getclosure-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::getClosure</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.closure.php" class="type Closure" style="color:#EAB766">Closure</a></span></div>  <p class="para rdfs-comment">   调用方法创建闭包。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.getclosure-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">object</span></dt>    <dd>     <p class="para">      不可以用于静态方法，可以用于其他类型的方法。     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.getclosure-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回新创建的 <span class="classname"><a href="https://php.net/manual/zh/class.closure.php" class="classname">Closure</a></span>。  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionmethod.getclosure-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">object</span> 为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>，但该方法是非静态方法，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">object</span> 不是该方法声明的类实例，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionmethod.getclosure-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">object</span> 现在可以为 null。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.getclosure-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><a href="https://php.net/manual/zh/functions.first_class_callable_syntax.php" class="link">头等可调用语法</a></li>  </ul> </div></div>
    *
     * Returns a dynamically created closure for the method
     *
     * @link https://php.net/manual/zh/reflectionmethod.getclosure.php
     * @param object|null $object Forbidden for static methods, required for other methods or nothing.
     * @return Closure Returns the newly created {@see Closure}.
     * @throws ValueError if object is null but the method is non-static.
     * @throws ReflectionException if object is not an instance of the class this method was declared in.
     * @since 5.4
     
    #[Pure]
    #[TentativeType]
*/
    public function getClosure(
        #[PhpStormStubsElementAvailable(from: '5.3', to: '7.3')] $object,
        #[PhpStormStubsElementAvailable(from: '7.4')] #[LanguageLevelTypeAware(['8.0' => 'object|null'], default: '')] $object = null
    ): Closure {}

/**
* <div id="reflectionmethod.getmodifiers" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::getModifiers</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::getModifiers</span> — <span class="dc-title">获取方法的修饰符</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.getmodifiers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::getModifiers</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   返回一个方法的修饰符，返回值是一个位标。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.getmodifiers-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.getmodifiers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   使用数字表示方法修饰符。这些修饰符的实际含义可以参考<a href="https://php.net/manual/zh/class.reflectionmethod.php#reflectionmethod.constants.modifiers" class="link">预定义常量</a>中的说明。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.getmodifiers-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5543">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::getModifiers()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Testing<br></span><span style="color: #007700">{<br>    final public static function </span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br>    {<br>        return;<br>    }<br>    public function </span><span style="color: #9876AA">bar</span><span style="color: #007700">()<br>    {<br>        return;<br>    }<br>}<br><br></span><span style="color: #9876AA">$foo </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'Testing'</span><span style="color: #007700">, </span><span style="color: #DD0000">'foo'</span><span style="color: #007700">);<br><br>echo </span><span style="color: #DD0000">"Modifiers for method foo():\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getModifiers</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">' '</span><span style="color: #007700">, </span><span style="color: #9876AA">Reflection</span><span style="color: #007700">::</span><span style="color: #9876AA">getModifierNames</span><span style="color: #007700">(</span><span style="color: #9876AA">$foo</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getModifiers</span><span style="color: #007700">())) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">$bar </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'Testing'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">);<br><br>echo </span><span style="color: #DD0000">"Modifiers for method bar():\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">$bar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getModifiers</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">implode</span><span style="color: #007700">(</span><span style="color: #DD0000">' '</span><span style="color: #007700">, </span><span style="color: #9876AA">Reflection</span><span style="color: #007700">::</span><span style="color: #9876AA">getModifierNames</span><span style="color: #007700">(</span><span style="color: #9876AA">$bar</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getModifiers</span><span style="color: #007700">()));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Modifiers for method foo():<br>49<br>final public static<br>Modifiers for method bar():<br>1<br>public</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.getmodifiers-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link Reflection::getModifierNames()} - 获取修饰符的名称</span></li>   </ul>   </div></div>
    *
     * Gets the method modifiers
     *
     * @link https://php.net/manual/zh/reflectionmethod.getmodifiers.php
     * @return int A numeric representation of the modifiers. The modifiers are
     * listed below. The actual meanings of these modifiers are described in the
     * predefined constants.
     *
     * ReflectionMethod modifiers:
     *
     *  - {@see ReflectionMethod::IS_STATIC} - Indicates that the method is static.
     *  - {@see ReflectionMethod::IS_PUBLIC} - Indicates that the method is public.
     *  - {@see ReflectionMethod::IS_PROTECTED} - Indicates that the method is protected.
     *  - {@see ReflectionMethod::IS_PRIVATE} - Indicates that the method is private.
     *  - {@see ReflectionMethod::IS_ABSTRACT} - Indicates that the method is abstract.
     *  - {@see ReflectionMethod::IS_FINAL} - Indicates that the method is final.
     
    #[Pure]
    #[TentativeType]
*/
    public function getModifiers(): int {}

/**
* <div id="reflectionmethod.invoke" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::invoke</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::invoke</span> — <span class="dc-title">Invoke</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.invoke-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::invoke</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   执行反射的方法。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.invoke-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       如果执行的方法是静态类，那么这个参数传送 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       0，或者传送给方法的参数列表。可以通过这个参数，给方法传送大量的参数。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.invoke-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回方法的返回值  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionmethod.invoke-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">object</span> 并没有包含一个可以使用的类实例，那么将产生   一个 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p>  <p class="para">   如果方法调用失败，也会产生一个 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.invoke-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5546">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::invoke()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">HelloWorld </span><span style="color: #007700">{<br><br>    public function </span><span style="color: #9876AA">sayHelloTo</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">) {<br>        return </span><span style="color: #DD0000">'Hello ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br>    }<br><br>}<br><br></span><span style="color: #9876AA">$reflectionMethod </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'HelloWorld'</span><span style="color: #007700">, </span><span style="color: #DD0000">'sayHelloTo'</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$reflectionMethod</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">invoke</span><span style="color: #007700">(new </span><span style="color: #9876AA">HelloWorld</span><span style="color: #007700">(), </span><span style="color: #DD0000">'Mike'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Hello Mike</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-reflectionmethod.invoke-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    当需要引用参数时，不能使用 <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::invoke()</strong></span>。必须使用    <span class="methodname" style="color:#CC7832">{@link ReflectionMethod::invokeArgs()}</span> 代替（在参数列表传递引用）。   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.invoke-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::invokeArgs()} - 带参数执行</span></li>    <li><a href="https://php.net/manual/zh/language.oop5.magic.php#object.invoke" class="link">__invoke()</a></li>    <li><span class="function">{@link call_user_func()} - 把第一个参数作为回调函数调用</span></li>   </ul>   </div></div>
    *
     * Invokes a reflected method.
     *
     * @link https://php.net/manual/zh/reflectionmethod.invoke.php
     * @param object|null $object The object to invoke the method on. For static
     * methods, pass {@see null} to this parameter.
     * @param mixed ...$args Zero or more parameters to be passed to the
     * method. It accepts a variable number of parameters which are passed to
     * the method.
     * @return mixed Returns the method result.
     * @throws ReflectionException if the object parameter does not contain an
     * instance of the class that this method was declared in or the method
     * invocation failed.
     
*/
    public function invoke($object, ...$args) {}

/**
* <div id="reflectionmethod.invokeargs" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::invokeArgs</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::invokeArgs</span> — <span class="dc-title">带参数执行</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.invokeargs-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::invokeArgs</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">$object</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">$args</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   使用数组给方法传送参数，并执行他。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.invokeargs-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">object</span></dt>     <dd>      <p class="para">       调用方法的对象，如果是静态对象，设置为 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span>      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">args</span></dt>     <dd>      <p class="para">       使用 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 传送的方法参数。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.invokeargs-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回方法返回值。  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionmethod.invokeargs-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">object</span> 指定的实例无法执行方法，那么产生   <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> 异常。  </p>  <p class="para">   如果方法调用失败，产生 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionmethod.invokeargs-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.0.0</td>       <td>        <span class="parameter" style="color:#3A95FF">args</span> 的键现在将解释为参数的名称，而不是默默忽略。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.invokeargs-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5547">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::invokeArgs()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">HelloWorld </span><span style="color: #007700">{<br><br>    public function </span><span style="color: #9876AA">sayHelloTo</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">) {<br>        return </span><span style="color: #DD0000">'Hello ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br>    }<br><br>}<br><br></span><span style="color: #9876AA">$reflectionMethod </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'HelloWorld'</span><span style="color: #007700">, </span><span style="color: #DD0000">'sayHelloTo'</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$reflectionMethod</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">invokeArgs</span><span style="color: #007700">(new </span><span style="color: #9876AA">HelloWorld</span><span style="color: #007700">(), array(</span><span style="color: #DD0000">'Mike'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Hello Mike</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-reflectionmethod.invokeargs-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    如果函数有参数需为引用，那么它们必须以引用方式传入。   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.invokeargs-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::invoke()} - Invoke</span></li>    <li><a href="https://php.net/manual/zh/language.oop5.magic.php#object.invoke" class="link">__invoke()</a></li>    <li><span class="function">{@link call_user_func_array()} - 调用回调函数，并把一个数组参数作为回调函数的参数</span></li>   </ul>   </div></div>
    *
     * Invokes the reflected method and pass its arguments as array.
     *
     * @link https://php.net/manual/zh/reflectionmethod.invokeargs.php
     * @param object|null $object The object to invoke the method on. In case
     * of static methods, you can pass {@see null} to this parameter.
     * @param array $args The parameters to be passed to the function, as an {@see array}.
     * @return mixed the method result.
     * @throws ReflectionException if the object parameter does not contain an
     * instance of the class that this method was declared in or the method
     * invocation failed.
     
    #[TentativeType]
*/
    public function invokeArgs(#[LanguageLevelTypeAware(['8.0' => 'object|null'], default: '')] $object, array $args): mixed {}

/**
* <div id="reflectionmethod.getdeclaringclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::getDeclaringClass</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::getDeclaringClass</span> — <span class="dc-title">获取被反射的方法所在类的反射实例</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.getdeclaringclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::getDeclaringClass</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div>  <p class="para rdfs-comment">   获取被反射的方法所在的类的反射实例。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.getdeclaringclass-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.getdeclaringclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回类的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> 反射对象，被反射的方法是这个类的一部分。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.getdeclaringclass-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5542">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::getDeclaringClass()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">HelloWorld </span><span style="color: #007700">{<br><br>    protected function </span><span style="color: #9876AA">sayHelloTo</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">) {<br>        return </span><span style="color: #DD0000">'Hello ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br>    }<br><br>}<br><br></span><span style="color: #9876AA">$reflectionMethod </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(new </span><span style="color: #9876AA">HelloWorld</span><span style="color: #007700">(), </span><span style="color: #DD0000">'sayHelloTo'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionMethod</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getDeclaringClass</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionClass)#2 (1) {<br>  ["name"]=&gt;<br>  string(10) "HelloWorld"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.getdeclaringclass-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isAbstract()} - 判断方法是否是抽象方法</span></li>   </ul>   </div></div>
    *
     * Gets declaring class for the reflected method.
     *
     * @link https://php.net/manual/zh/reflectionmethod.getdeclaringclass.php
     * @return ReflectionClass A {@see ReflectionClass} object of the class that the
     * reflected method is part of.
     
    #[Pure]
    #[TentativeType]
*/
    public function getDeclaringClass(): ReflectionClass {}

/**
* <div id="reflectionmethod.getprototype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::getPrototype</h1>  <p class="verinfo">(PHP 5 &gt;= 5.1.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::getPrototype</span> — <span class="dc-title">返回方法原型 (如果存在)</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.getprototype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::getPrototype</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="type ReflectionMethod" style="color:#EAB766">ReflectionMethod</a></span></div>  <p class="para rdfs-comment">   返回方法原型。  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.getprototype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.getprototype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   方法原型的 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> 实例。  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionmethod.getprototype-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果方法没有原型，抛出 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span>。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.getprototype-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5544">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::getPrototype()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Hello </span><span style="color: #007700">{<br><br>    public function </span><span style="color: #9876AA">sayHelloTo</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">) {<br>        return </span><span style="color: #DD0000">'Hello ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br>    }<br><br>}<br>class </span><span style="color: #9876AA">HelloWorld </span><span style="color: #007700">extends </span><span style="color: #9876AA">Hello </span><span style="color: #007700">{<br><br>    public function </span><span style="color: #9876AA">sayHelloTo</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">) {<br>        return </span><span style="color: #DD0000">'Hello world: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br>    }<br><br>}<br><br></span><span style="color: #9876AA">$reflectionMethod </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'HelloWorld'</span><span style="color: #007700">, </span><span style="color: #DD0000">'sayHelloTo'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionMethod</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getPrototype</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionMethod)#2 (2) {<br>  ["name"]=&gt;<br>  string(10) "sayHelloTo"<br>  ["class"]=&gt;<br>  string(5) "Hello"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.getprototype-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::getModifiers()} - 获取方法的修饰符</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::hasPrototype()} - Returns whether a method has a prototype</span></li>   </ul>   </div></div>
    *
     * Gets the method prototype (if there is one).
     *
     * @link https://php.net/manual/zh/reflectionmethod.getprototype.php
     * @return ReflectionMethod A {@see ReflectionMethod} instance of the method prototype.
     * @throws ReflectionException if the method does not have a prototype
     
    #[Pure]
    #[TentativeType]
*/
    public function getPrototype(): ReflectionMethod {}

/**
* <div id="reflectionmethod.setaccessible" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::setAccessible</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::setAccessible</span> — <span class="dc-title">设置方法是否可访问</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.setaccessible-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::setAccessible</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   通过 <span class="methodname" style="color:#CC7832">{@link ReflectionMethod::invoke()}</span> 方法启用对 protected 或 private 方法的调用。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    自 PHP 8.1.0 起，调用此方法无效；默认情况下，所有方法都可调用。   </span>  </p></blockquote> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.setaccessible-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">accessible</span></dt>     <dd>      <p class="para">       可以访问设置 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则设置 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.setaccessible-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.setaccessible-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5548">   <p><strong>示例 #1 简单类定义</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">MyClass<br></span><span style="color: #007700">{<br>    private function </span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br>    {<br>        return </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br>    }<br>}<br><br></span><span style="color: #9876AA">$method </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">"MyClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$method</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br>echo </span><span style="color: #9876AA">$method</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">invoke</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bar<br>Fatal error: Uncaught Error: Call to private method MyClass::foo() from global scope in /in/qdaZS:16</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.setaccessible-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isPrivate()} - 判断方法是否是私有</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isProtected()} - 判断方法是否是 protected</span></li>   </ul>   </div></div>
    *
     * Set method accessibility
     *
     * @link https://php.net/manual/zh/reflectionmethod.setaccessible.php
     * @param bool $accessible {@see true} to allow accessibility, or {@see false}
     * @return void No value is returned.
     
    #[PhpStormStubsElementAvailable(from: "5.3", to: "8.0")]
    #[TentativeType]
*/
    public function setAccessible(#[LanguageLevelTypeAware(['8.0' => 'bool'], default: '')] $accessible): void {}

/**
* <div id="reflectionmethod.setaccessible" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::setAccessible</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.2, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionMethod::setAccessible</span> — <span class="dc-title">设置方法是否可访问</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.setaccessible-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::setAccessible</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">$accessible</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   通过 <span class="methodname" style="color:#CC7832">{@link ReflectionMethod::invoke()}</span> 方法启用对 protected 或 private 方法的调用。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    自 PHP 8.1.0 起，调用此方法无效；默认情况下，所有方法都可调用。   </span>  </p></blockquote> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.setaccessible-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">accessible</span></dt>     <dd>      <p class="para">       可以访问设置 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>，否则设置 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.setaccessible-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.setaccessible-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5548">   <p><strong>示例 #1 简单类定义</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">MyClass<br></span><span style="color: #007700">{<br>    private function </span><span style="color: #9876AA">foo</span><span style="color: #007700">()<br>    {<br>        return </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">;<br>    }<br>}<br><br></span><span style="color: #9876AA">$method </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">"MyClass"</span><span style="color: #007700">, </span><span style="color: #DD0000">"foo"</span><span style="color: #007700">);<br></span><span style="color: #9876AA">$method</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setAccessible</span><span style="color: #007700">(</span><span style="color: #9876AA">true</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">$obj </span><span style="color: #007700">= new </span><span style="color: #9876AA">MyClass</span><span style="color: #007700">();<br>echo </span><span style="color: #9876AA">$method</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">invoke</span><span style="color: #007700">(</span><span style="color: #9876AA">$obj</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">$obj</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">foo</span><span style="color: #007700">();<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例的输出类似于：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bar<br>Fatal error: Uncaught Error: Call to private method MyClass::foo() from global scope in /in/qdaZS:16</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.setaccessible-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isPrivate()} - 判断方法是否是私有</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::isProtected()} - 判断方法是否是 protected</span></li>   </ul>   </div></div>
    *
     * Set method accessibility
     * This method is no-op starting from PHP 8.1
     *
     * @link https://php.net/manual/zh/reflectionmethod.setaccessible.php
     * @param bool $accessible {@see true} to allow accessibility, or {@see false}
     * @return void No value is returned.
     
    #[Pure]
    #[PhpStormStubsElementAvailable(from: "8.1")]
    #[TentativeType]
*/
    public function setAccessible(bool $accessible): void {}

/**
* <div id="reflectionmethod.hasprototype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::hasPrototype</h1>  <p class="verinfo">(PHP 8 &gt;= 8.2.0)</p><p class="refpurpose"><span class="refname">ReflectionMethod::hasPrototype</span> — <span class="dc-title">Returns whether a method has a prototype</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.hasprototype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::hasPrototype</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Returns whether a method has a prototype.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.hasprototype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.hasprototype-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the method has a prototype, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.hasprototype-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5545">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::hasPrototype()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">Hello<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">sayHelloTo</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">)<br>    {<br>        return </span><span style="color: #DD0000">'Hello '</span><span style="color: #007700">.</span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br>    }<br>}<br><br>class </span><span style="color: #9876AA">HelloWorld </span><span style="color: #007700">extends </span><span style="color: #9876AA">Hello<br></span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">sayHelloTo</span><span style="color: #007700">(</span><span style="color: #9876AA">$name</span><span style="color: #007700">)<br>    {<br>        return </span><span style="color: #DD0000">'Hello world: '</span><span style="color: #007700">.</span><span style="color: #9876AA">$name</span><span style="color: #007700">;<br>    }<br>}<br></span><span style="color: #9876AA">$reflectionMethod </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">(</span><span style="color: #DD0000">'HelloWorld'</span><span style="color: #007700">, </span><span style="color: #DD0000">'sayHelloTo'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$reflectionMethod</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">hasPrototype</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionmethod.hasprototype-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionMethod::getPrototype()} - 返回方法原型 (如果存在)</span></li>   </ul>   </div></div>
    #[PhpStormStubsElementAvailable(from: '8.2')]
*/
    public function hasPrototype(): bool {}

/**
* <div id="reflectionmethod.createfrommethodname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionMethod::createFromMethodName</h1>  <p class="verinfo">(PHP 8 &gt;= 8.3.0)</p><p class="refpurpose"><span class="refname">ReflectionMethod::createFromMethodName</span> — <span class="dc-title">Creates a new ReflectionMethod</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionmethod.createfrommethodname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::createFromMethodName</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$method</span></span>): <span class="type" style="color:#EAB766">static</span></div>  <p class="para rdfs-comment">   Creates a new <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionmethod.createfrommethodname-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">method</span></dt>     <dd>      <p class="para">       Class name and method name delimited by <span class="literal">::</span>.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionmethod.createfrommethodname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a new <span class="classname"><a href="https://php.net/manual/zh/class.reflectionmethod.php" class="classname">ReflectionMethod</a></span> on success.  </p> </div> <div class="refsect1 errors" id="refsect1-reflectionmethod.createfrommethodname-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   A <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> is thrown if the given method does not exist.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionmethod.createfrommethodname-examples">  <h3 class="title">示例</h3>   <div class="example" id="example-5541">    <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionMethod::createFromMethodName()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">class </span><span style="color: #9876AA">Foo </span><span style="color: #007700">{<br>    public function </span><span style="color: #9876AA">bar</span><span style="color: #007700">() {<br><br>    }<br>}<br><br></span><span style="color: #9876AA">$methodInfo </span><span style="color: #007700">= </span><span style="color: #9876AA">ReflectionMethod</span><span style="color: #007700">::</span><span style="color: #9876AA">createFromMethodName</span><span style="color: #007700">(</span><span style="color: #DD0000">"Foo::bar"</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">$methodInfo</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">object(ReflectionMethod)#1 (2) {<br>  ["name"]=&gt;<br>  string(3) "bar"<br>  ["class"]=&gt;<br>  string(3) "Foo"<br>}</blockquote></div>    </div>   </div> </div></div>
    *
     * @since 8.3
     
*/
    public static function createFromMethodName(string $method): static {}
}
