<?php

use JetBrains\PhpStorm\Deprecated;
use JetBrains\PhpStorm\Immutable;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\TentativeType;
use JetBrains\PhpStorm\Pure;

/**
 * <div id="class.reflectionclassconstant" class="reference"> <h1 class="title">The ReflectionClassConstant class</h1>  <div class="partintro"><p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p>  <div class="section" id="reflectionclassconstant.intro">   <h2 class="title">简介</h2>   <p class="para">    The <span class="classname"><strong class="classname">ReflectionClassConstant</strong></span> class reports    information about a class constant.   </p>  </div>  <div class="section" id="reflectionclassconstant.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis"><div class="classsynopsisinfo">         <span class="modifier">class</span> <strong class="classname"><strong class="classname">ReflectionClassConstant</strong></strong>             <span class="modifier">implements</span>      <a href="https://php.net/manual/zh/class.reflector.php" class="interfacename">Reflector</a> {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.is-public"><var class="varname">IS_PUBLIC</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.is-protected"><var class="varname">IS_PROTECTED</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.is-private"><var class="varname">IS_PRIVATE</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.is-final"><var class="varname">IS_FINAL</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 属性 </div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.props.name">\$<var class="varname">name</var></a></var>;</div>    <div class="fieldsynopsis"><span class="modifier">public</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.props.class">\$<var class="varname">class</var></a></var>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="constructorsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.construct.php" class="methodname" style="color:#CC7832">__construct</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$constant</span></span>)</div>    <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.export.php" class="methodname" style="color:#CC7832">export</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.getattributes.php" class="methodname" style="color:#CC7832">getAttributes</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.getdeclaringclass.php" class="methodname" style="color:#CC7832">getDeclaringClass</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.getdoccomment.php" class="methodname" style="color:#CC7832">getDocComment</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.getmodifiers.php" class="methodname" style="color:#CC7832">getModifiers</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.getname.php" class="methodname" style="color:#CC7832">getName</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.gettype.php" class="methodname" style="color:#CC7832">getType</a></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.getvalue.php" class="methodname" style="color:#CC7832">getValue</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.hastype.php" class="methodname" style="color:#CC7832">hasType</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.isdeprecated.php" class="methodname" style="color:#CC7832">isDeprecated</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.isenumcase.php" class="methodname" style="color:#CC7832">isEnumCase</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.isfinal.php" class="methodname" style="color:#CC7832">isFinal</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.isprivate.php" class="methodname" style="color:#CC7832">isPrivate</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.isprotected.php" class="methodname" style="color:#CC7832">isProtected</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.ispublic.php" class="methodname" style="color:#CC7832">isPublic</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/reflectionclassconstant.tostring.php" class="methodname" style="color:#CC7832">__toString</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>   }</div>  </div>    <div class="section" id="reflectionclassconstant.props">   <h2 class="title">属性</h2>   <dl>         <dt id="reflectionclassconstant.props.name"><var class="varname">name</var></dt>     <dd>      <p class="para">       Name of the class constant. Read-only, throws       <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> in attempt to write.      </p>     </dd>             <dt id="reflectionclassconstant.props.class"><var class="varname">class</var></dt>     <dd>      <p class="para">       Name of the class where the class constant is defined. Read-only, throws       <span class="classname"><a href="https://php.net/manual/zh/class.reflectionexception.php" class="classname">ReflectionException</a></span> in attempt to write.      </p>     </dd>       </dl>  </div>  <div class="section" id="reflectionclassconstant.constants">   <h2 class="title">预定义常量</h2>   <div class="section" id="reflectionclassconstant.constants.modifiers">    <h2 class="title">ReflectionClassConstant Modifiers</h2>    <dl>           <dt id="reflectionclassconstant.constants.is-public">       <strong><span>{@link ReflectionClassConstant::IS_PUBLIC}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        Indicates <a href="https://php.net/manual/zh/language.oop5.visibility.php" class="link">public</a>        constants.        Prior to PHP 7.4.0, the value was <span class="literal">256</span>.       </p>      </dd>                <dt id="reflectionclassconstant.constants.is-protected">       <strong><span>{@link ReflectionClassConstant::IS_PROTECTED}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        Indicates <a href="https://php.net/manual/zh/language.oop5.visibility.php" class="link">protected</a>        constants.        Prior to PHP 7.4.0, the value was <span class="literal">512</span>.       </p>      </dd>                <dt id="reflectionclassconstant.constants.is-private">       <strong><span>{@link ReflectionClassConstant::IS_PRIVATE}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        Indicates <a href="https://php.net/manual/zh/language.oop5.visibility.php" class="link">private</a>        constants.        Prior to PHP 7.4.0, the value was <span class="literal">1024</span>.       </p>      </dd>                <dt id="reflectionclassconstant.constants.is-final">       <strong><span>{@link ReflectionClassConstant::IS_FINAL}</span></strong>       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      </dt>      <dd>       <p class="para">        Indicates <a href="https://php.net/manual/zh/language.oop5.final.php" class="link">final</a>        constants. Available as of PHP 8.1.0.       </p>      </dd>         </dl>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      </p><p class="para">      The values of these constants may change between PHP versions.      It is recommended to always use the constants      and not rely on the values directly.     </p>    </blockquote>   </div>  </div>  <div class="section">   <h2 class="title">更新日志</h2>   <table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.4.0</td>       <td>        The class constants are now typed.       </td>      </tr>      <tr>       <td>8.0.0</td>       <td>        <span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::export()}</span> was removed.       </td>      </tr>     </tbody>       </table>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link ReflectionClassConstant::__construct} — Constructs a ReflectionClassConstant</li><li>{@link ReflectionClassConstant::export} — Export</li><li>{@link ReflectionClassConstant::getAttributes} — Gets Attributes</li><li>{@link ReflectionClassConstant::getDeclaringClass} — Gets declaring class</li><li>{@link ReflectionClassConstant::getDocComment} — Gets doc comments</li><li>{@link ReflectionClassConstant::getModifiers} — Gets the class constant modifiers</li><li>{@link ReflectionClassConstant::getName} — Get name of the constant</li><li>{@link ReflectionClassConstant::getType} — Gets a class constant's type</li><li>{@link ReflectionClassConstant::getValue} — Gets value</li><li>{@link ReflectionClassConstant::hasType} — Checks if class constant has a type</li><li>{@link ReflectionClassConstant::isDeprecated} — Checks if deprecated</li><li>{@link ReflectionClassConstant::isEnumCase} — Checks if class constant is an Enum case</li><li>{@link ReflectionClassConstant::isFinal} — Checks if class constant is final</li><li>{@link ReflectionClassConstant::isPrivate} — Checks if class constant is private</li><li>{@link ReflectionClassConstant::isProtected} — Checks if class constant is protected</li><li>{@link ReflectionClassConstant::isPublic} — Checks if class constant is public</li><li>{@link ReflectionClassConstant::__toString} — Returns the string representation of the ReflectionClassConstant object</li></ul></div>
 * 
 * The ReflectionClassConstant class reports information about a class constant.
 *
 * @link https://www.php.net/manual/en/class.reflectionclassconstant.php
 * @since 7.1
 */
class ReflectionClassConstant implements Reflector
{
    /**
     * @var string Constant name, same as calling the {@see ReflectionClassConstant::getName()} method
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $name;

    /**
     * @var string Fully qualified class name where this constant was defined
     */
    #[Immutable]
    #[LanguageLevelTypeAware(['8.1' => 'string'], default: '')]
    public $class;

    /**
     * @var bool
     * @since 8.1
     */
    #[Immutable]
    public bool $isFinal;

    /**
     * Indicates that the constant is public.
     *
     * @since 8.0
     */
    public const IS_PUBLIC = 1;

    /**
     * Indicates that the constant is protected.
     *
     * @since 8.0
     */
    public const IS_PROTECTED = 2;

    /**
     * Indicates that the constant is private.
     *
     * @since 8.0
     */
    public const IS_PRIVATE = 4;

    /**
     * @since 8.1
     */
    public const IS_FINAL = 5;

    /**
     * ReflectionClassConstant constructor.
     *
     * @param string|object $class Either a string containing the name of the class to reflect, or an object.
     * @param string $constant The name of the class constant.
     * @since 7.1
     * @link https://php.net/manual/en/reflectionclassconstant.construct.php
     */
    public function __construct(#[LanguageLevelTypeAware(['8.0' => 'string|object'], default: '')] $class, string $constant) {}

    /**
 * <div id="reflectionclassconstant.export" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::export</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::export</span> — <span class="dc-title">Export</span></p> </div> <div id="reflectionclassconstant.export-refsynopsisdiv">   <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数已自 PHP 7.4.0起<em>弃用</em>，自 PHP 8.0.0 起<em>移除</em>。强烈建议不要依赖本函数。</p></div> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.export-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::export</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">\$class</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> <span class="parameter" style="color:#3A95FF">\$return</span><span class="initializer"> = ?</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   Exports a reflection.  </p>  <div class="warning"><strong class="warning">警告</strong><p class="simpara">本函数还未编写文档，仅有参数列表。</p></div> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.export-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">class</span></dt>     <dd>      <p class="para">       导出的反射。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">name</span></dt>     <dd>      <p class="para">       The class constant name.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">return</span></dt>     <dd>      <p class="para">       设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 时返回导出结果，设为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>（默认值）则忽略返回。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.export-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">     </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.export-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::__toString()} - Returns the string representation of the ReflectionClassConstant object</span></li>   </ul>   </div></div>
 * 
     * @link https://php.net/manual/zh/reflectionclassconstant.export.php
     * @param string|object $class The reflection to export.
     * @param string $name The class constant name.
     * @param bool $return Setting to {@see true} will return the export, as opposed to emitting it. Setting
     * to {@see false} (the default) will do the opposite.
     * @return string|null
     * @since 7.1
     * @removed 8.0
     */
    #[Deprecated(since: '7.4')]
    public static function export($class, $name, $return = false) {}

    /**
 * <div id="reflectionclassconstant.getdeclaringclass" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::getDeclaringClass</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::getDeclaringClass</span> — <span class="dc-title">Gets declaring class</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.getdeclaringclass-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::getDeclaringClass</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="type ReflectionClass" style="color:#EAB766">ReflectionClass</a></span></div>  <p class="para rdfs-comment">   Gets the declaring class.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.getdeclaringclass-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.getdeclaringclass-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A <span class="classname"><a href="https://php.net/manual/zh/class.reflectionclass.php" class="classname">ReflectionClass</a></span> object.  </p> </div></div>
 * 
     * Gets declaring class
     *
     * @return ReflectionClass
     * @link https://php.net/manual/zh/reflectionclassconstant.getdeclaringclass.php
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function getDeclaringClass(): ReflectionClass {}

    /**
 * <div id="reflectionclassconstant.getdoccomment" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::getDocComment</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::getDocComment</span> — <span class="dc-title">Gets doc comments</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.getdoccomment-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::getDocComment</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   Gets doc comments from a class constant.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.getdoccomment-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.getdoccomment-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The doc comment if it exists, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div></div>
 * 
     * Gets doc comments
     *
     * @return string|false The doc comment if it exists, otherwise {@see false}
     * @link https://php.net/manual/zh/reflectionclassconstant.getdoccomment.php
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function getDocComment(): string|false {}

    /**
 * <div id="reflectionclassconstant.getmodifiers" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::getModifiers</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::getModifiers</span> — <span class="dc-title">Gets the class constant modifiers</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.getmodifiers-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::getModifiers</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   Returns a bitfield of the access modifiers for this class constant.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.getmodifiers-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.getmodifiers-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   A numeric representation of the modifiers.   The actual meaning of these modifiers are described under   <a href="https://php.net/manual/zh/class.reflectionclassconstant.php#reflectionclassconstant.constants.modifiers" class="link">predefined constants</a>.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.getmodifiers-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link Reflection::getModifierNames()} - 获取修饰符的名称</span></li>   </ul>   </div></div>
 * 
     * Gets the class constant modifiers
     *
     * @return int A numeric representation of the modifiers. The actual meanings of these modifiers are described in
     * the predefined constants.
     * @link https://php.net/manual/zh/reflectionclassconstant.getmodifiers.php
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function getModifiers(): int {}

    /**
 * <div id="reflectionclassconstant.getname" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::getName</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::getName</span> — <span class="dc-title">Get name of the constant</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.getname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::getName</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.getname-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.getname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the constant's name.  </p> </div> <div class="refsect1 changelog" id="refsect1-reflectionclassconstant.getname-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.1.0</td>      <td>       Throws an <span class="classname"><a href="https://php.net/manual/zh/class.error.php" class="classname">Error</a></span> in case the <span class="property">name</span> property has not been initialized.       Previously, the method returned <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> on failure.      </td>     </tr>    </tbody>     </table> </div></div>
 * 
     * Get name of the constant
     *
     * @link https://php.net/manual/zh/reflectionclassconstant.getname.php
     * @return string Returns the constant's name.
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function getName(): string {}

    /**
 * <div id="reflectionclassconstant.getvalue" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::getValue</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::getValue</span> — <span class="dc-title">Gets value</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.getvalue-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::getValue</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span></div>  <p class="para rdfs-comment">   Gets the class constant's value.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.getvalue-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.getvalue-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   The value of the class constant.  </p> </div></div>
 * 
     * Gets value
     *
     * @link https://php.net/manual/zh/reflectionclassconstant.getvalue.php
     * @return mixed The value of the class constant.
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function getValue(): mixed {}

    /**
 * <div id="reflectionclassconstant.isprivate" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::isPrivate</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::isPrivate</span> — <span class="dc-title">Checks if class constant is private</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.isprivate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::isPrivate</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if the class constant is private.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.isprivate-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.isprivate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the class constant is private, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.isprivate-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isFinal()} - Checks if class constant is final</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isPublic()} - Checks if class constant is public</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isProtected()} - Checks if class constant is protected</span></li>   </ul>   </div></div>
 * 
     * Checks if class constant is private
     *
     * @link https://php.net/manual/zh/reflectionclassconstant.isprivate.php
     * @return bool
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function isPrivate(): bool {}

    /**
 * <div id="reflectionclassconstant.isprotected" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::isProtected</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::isProtected</span> — <span class="dc-title">Checks if class constant is protected</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.isprotected-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::isProtected</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if the class constant is protected.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.isprotected-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.isprotected-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the class constant is protected, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.isprotected-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isFinal()} - Checks if class constant is final</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isPublic()} - Checks if class constant is public</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isPrivate()} - Checks if class constant is private</span></li>   </ul>   </div></div>
 * 
     * Checks if class constant is protected
     *
     * @link https://php.net/manual/zh/reflectionclassconstant.isprotected.php
     * @return bool
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function isProtected(): bool {}

    /**
 * <div id="reflectionclassconstant.ispublic" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::isPublic</h1>  <p class="verinfo">(PHP 7 &gt;= 7.1.0, PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::isPublic</span> — <span class="dc-title">Checks if class constant is public</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.ispublic-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::isPublic</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if the class constant is public.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.ispublic-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.ispublic-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the class constant is public, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.ispublic-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isFinal()} - Checks if class constant is final</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isPrivate()} - Checks if class constant is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isProtected()} - Checks if class constant is protected</span></li>   </ul>   </div></div>
 * 
     * Checks if class constant is public
     *
     * @link https://php.net/manual/zh/reflectionclassconstant.ispublic.php
     * @return bool
     * @since 7.1
     */
    #[Pure]
    #[TentativeType]
    public function isPublic(): bool {}

    /**
     * Returns the string representation of the ReflectionClassConstant object.
     *
     * @link https://php.net/manual/en/reflectionclassconstant.tostring.php
     * @return string
     * @since 7.1
     */
    public function __toString(): string {}

    /**
 * <div id="reflectionclassconstant.getattributes" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::getAttributes</h1>  <p class="verinfo">(PHP 8)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::getAttributes</span> — <span class="dc-title">Gets Attributes</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.getattributes-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::getAttributes</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$name</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$flags</span><span class="initializer"> = 0</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   Returns all attributes declared on this class constant as an array of <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="type ReflectionAttribute" style="color:#EAB766">ReflectionAttribute</a></span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.getattributes-parameters">  <h3 class="title">参数</h3>  <dl>   <dt><span class="parameter" style="color:#3A95FF">name</span></dt><dd> <p class="para">  过滤结果，匹配此类名，仅包含 <span class="classname"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> 实例的属性。 </p></dd>   <dt><span class="parameter" style="color:#3A95FF">flags</span></dt><dd> <p class="para">  如果提供了 <span class="parameter" style="color:#3A95FF">name</span>，则用于确定如何过滤结果的 flag。 </p> <p class="para">  默认值为 <span class="literal">0</span>，这将导致返回的结果只属于类 <span class="parameter" style="color:#3A95FF">name</span> 的属性。 </p> <p class="para">  唯一可用的其他选项是使用 <strong><span>{@link ReflectionAttribute::IS_INSTANCEOF}</span></strong>，它将改为使用 <span class="literal">instanceof</span> 进行过滤。 </p></dd>  </dl> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.getattributes-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Array of attributes, as a <span class="classname"><a href="https://php.net/manual/zh/class.reflectionattribute.php" class="classname">ReflectionAttribute</a></span> object.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclassconstant.getattributes-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5486">    <p><strong>示例 #1 Basic usage</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br>    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>    public const </span><span style="color: #9876AA">APPLE </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$classConstant </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClassConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'APPLE'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">\$classConstant</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">();<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">\$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Fruit<br>&nbsp;&nbsp;&nbsp;&nbsp;[1]&nbsp;=&gt;&nbsp;Red<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5487">    <p><strong>示例 #2 Filtering results by class name</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">{<br>}<br><br>class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br>    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>    public const </span><span style="color: #9876AA">APPLE </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$classConstant </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClassConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'APPLE'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">\$classConstant</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Fruit'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">\$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Fruit<br>)</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5488">    <p><strong>示例 #3 Filtering results by class name, with inheritance</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">interface </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Fruit </span><span style="color: #007700">{<br>}<br><br>#[</span><span style="color: #9876AA">Attribute</span><span style="color: #007700">]<br>class </span><span style="color: #9876AA">Red </span><span style="color: #007700">implements </span><span style="color: #9876AA">Color </span><span style="color: #007700">{<br>}<br><br>class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br>    #[</span><span style="color: #9876AA">Fruit</span><span style="color: #007700">]<br>    #[</span><span style="color: #9876AA">Red</span><span style="color: #007700">]<br>    public const </span><span style="color: #9876AA">APPLE </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$classConstant </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClassConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'APPLE'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">\$attributes </span><span style="color: #007700">= </span><span style="color: #9876AA">\$classConstant</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getAttributes</span><span style="color: #007700">(</span><span style="color: #DD0000">'Color'</span><span style="color: #007700">, </span><span style="color: #9876AA">ReflectionAttribute</span><span style="color: #007700">::</span><span style="color: #9876AA">IS_INSTANCEOF</span><span style="color: #007700">);<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">array_map</span><span style="color: #007700">(fn(</span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">) =&gt; </span><span style="color: #9876AA">\$attribute</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getName</span><span style="color: #007700">(), </span><span style="color: #9876AA">\$attributes</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;Red<br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.getattributes-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClass::getAttributes()} - 获取所有属性</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionFunctionAbstract::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionParameter::getAttributes()} - Gets Attributes</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionProperty::getAttributes()} - Gets Attributes</span></li>   </ul>   </div></div>
 * 
     * @template T
     *
     * Returns an array of constant attributes.
     *
     * @param class-string<T>|null $name Name of an attribute class
     * @param int $flags Сriteria by which the attribute is searched.
     * @return ReflectionAttribute<T>[]
     * @since 8.0
     */
    #[Pure]
    public function getAttributes(?string $name = null, int $flags = 0): array {}

    /**
     * ReflectionClassConstant cannot be cloned
     *
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "5.4", to: "8.0")]
    final private function __clone(): void {}

    /**
     * ReflectionClassConstant cannot be cloned
     *
     * @return void
     */
    #[PhpStormStubsElementAvailable(from: "8.1")]
    private function __clone(): void {}

/**
 * <div id="reflectionclassconstant.isenumcase" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::isEnumCase</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::isEnumCase</span> — <span class="dc-title">Checks if class constant is an Enum case</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.isenumcase-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::isEnumCase</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if the class constant is an <a href="https://php.net/manual/zh/language.enumerations.php" class="link">Enum</a> case.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.isenumcase-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.isenumcase-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the class constant is an Enum case; <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclassconstant.isenumcase-examples">  <h3 class="title">示例</h3>  <div class="example" id="reflectionclassconstant.isenumcase.example.basic">   <p><strong>示例 #1 <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::isEnumCase()</strong></span> example</strong></p>   <div class="example-contents"><p>     Distinguish between Enum cases and regular class constants.   </p></div>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">enum </span><span style="color: #9876AA">Status<br></span><span style="color: #007700">{<br>    const </span><span style="color: #9876AA">BORING_CONSTANT </span><span style="color: #007700">= </span><span style="color: #DD0000">'test'</span><span style="color: #007700">;<br>    const </span><span style="color: #9876AA">ENUM_VALUE </span><span style="color: #007700">= </span><span style="color: #9876AA">Status</span><span style="color: #007700">::</span><span style="color: #9876AA">PUBLISHED</span><span style="color: #007700">;<br><br>    case </span><span style="color: #9876AA">DRAFT</span><span style="color: #007700">;<br>    case </span><span style="color: #9876AA">PUBLISHED</span><span style="color: #007700">;<br>    case </span><span style="color: #9876AA">ARCHIVED</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$reflection </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionEnum</span><span style="color: #007700">(</span><span style="color: #9876AA">Status</span><span style="color: #007700">::class);<br>foreach (</span><span style="color: #9876AA">\$reflection</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getReflectionConstants</span><span style="color: #007700">() as </span><span style="color: #9876AA">\$constant</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"</span><span style="color: #007700">{</span><span style="color: #9876AA">\$constant</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">name</span><span style="color: #007700">}</span><span style="color: #DD0000"> is "</span><span style="color: #007700">,<br>        </span><span style="color: #9876AA">\$constant</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isEnumCase</span><span style="color: #007700">() ? </span><span style="color: #DD0000">"an enum case" </span><span style="color: #007700">: </span><span style="color: #DD0000">"a regular class constant"</span><span style="color: #007700">,<br>        </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">BORING_CONSTANT&nbsp;is&nbsp;a&nbsp;regular&nbsp;class&nbsp;constant<br>ENUM_VALUE&nbsp;is&nbsp;a&nbsp;regular&nbsp;class&nbsp;constant<br>DRAFT&nbsp;is&nbsp;an&nbsp;enum&nbsp;case<br>PUBLISHED&nbsp;is&nbsp;an&nbsp;enum&nbsp;case<br>ARCHIVED&nbsp;is&nbsp;an&nbsp;enum&nbsp;case</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.isenumcase-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectionenum.php" class="classname">ReflectionEnum</a></span></li>  </ul> </div></div>
 */
    public function isEnumCase(): bool {}

    /**
 * <div id="reflectionclassconstant.isfinal" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::isFinal</h1>  <p class="verinfo">(PHP 8 &gt;= 8.1.0)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::isFinal</span> — <span class="dc-title">Checks if class constant is final</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.isfinal-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::isFinal</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Checks if the class constant is final.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.isfinal-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.isfinal-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if the class constant is final, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.isfinal-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isPublic()} - Checks if class constant is public</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isPrivate()} - Checks if class constant is private</span></li>    <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::isProtected()} - Checks if class constant is protected</span></li>   </ul>   </div></div>
 * 
     * @return bool
     * @since 8.1
     */
    public function isFinal(): bool {}

    /**
 * <div id="reflectionclassconstant.hastype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::hasType</h1>  <p class="verinfo">(PHP 8 &gt;= 8.3.0)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::hasType</span> — <span class="dc-title">Checks if class constant has a type</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.hastype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::hasType</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Checks if the class constant has a type associated with it.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.hastype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.hastype-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if a type is specified, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> otherwise.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.hastype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getType()} - Gets a class constant's type</span></li>   <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span></li>  </ul> </div></div>
 * 
     * @since 8.3
     */
    public function hasType(): bool {}

    /**
 * <div id="reflectionclassconstant.gettype" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::getType</h1>  <p class="verinfo">(PHP 8 &gt;= 8.3.0)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::getType</span> — <span class="dc-title">Gets a class constant's type</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.gettype-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::getType</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="type ReflectionType" style="color:#EAB766">ReflectionType</a></span></span></div>  <p class="simpara">   Gets the associated type of a class constant.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.gettype-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.gettype-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   Returns a <span class="classname"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span> object if a constant type is   specified, <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> otherwise.  </p> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.gettype-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::hasType()} - Checks if class constant has a type</span></li>   <li><span class="classname"><a href="https://php.net/manual/zh/class.reflectiontype.php" class="classname">ReflectionType</a></span></li>  </ul> </div></div>
 * 
     * @since 8.3
     */
    public function getType(): ?ReflectionType {}

    /**
 * <div id="reflectionclassconstant.isdeprecated" class="refentry"> <div class="refnamediv">  <h1 class="refname">ReflectionClassConstant::isDeprecated</h1>  <p class="verinfo">(PHP 8 &gt;= 8.4.0)</p><p class="refpurpose"><span class="refname">ReflectionClassConstant::isDeprecated</span> — <span class="dc-title">Checks if deprecated</span></p> </div> <div class="refsect1 description" id="refsect1-reflectionclassconstant.isdeprecated-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::isDeprecated</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="simpara">   Checks whether the class constant is deprecated.  </p> </div> <div class="refsect1 parameters" id="refsect1-reflectionclassconstant.isdeprecated-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-reflectionclassconstant.isdeprecated-returnvalues">  <h3 class="title">返回值</h3>  <p class="simpara">   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> if it's deprecated, otherwise <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 examples" id="refsect1-reflectionclassconstant.isdeprecated-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5489">   <p><strong>示例 #1     <span class="methodname" style="color:#CC7832"><strong>ReflectionClassConstant::isDeprecated()</strong></span> example   </strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">Basket </span><span style="color: #007700">{<br>    #[</span><span style="color: #9876AA">\Deprecated</span><span style="color: #007700">(</span><span style="color: #9876AA">message</span><span style="color: #007700">: </span><span style="color: #DD0000">'use Basket::APPLE instead'</span><span style="color: #007700">)]<br>    public const </span><span style="color: #9876AA">APLE </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br><br>    public const </span><span style="color: #9876AA">APPLE </span><span style="color: #007700">= </span><span style="color: #DD0000">'apple'</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">\$classConstant </span><span style="color: #007700">= new </span><span style="color: #9876AA">ReflectionClassConstant</span><span style="color: #007700">(</span><span style="color: #DD0000">'Basket'</span><span style="color: #007700">, </span><span style="color: #DD0000">'APLE'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$classConstant</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">isDeprecated</span><span style="color: #007700">());<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">bool(true)</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-reflectionclassconstant.isdeprecated-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="classname"><a href="https://php.net/manual/zh/class.deprecated.php" class="classname">Deprecated</a></span></li>   <li><span class="methodname" style="color:#CC7832">{@link ReflectionClassConstant::getDocComment()} - Gets doc comments</span></li>  </ul> </div></div>
 * 
     * @since 8.4
     */
    public function isDeprecated(): bool {}
}
