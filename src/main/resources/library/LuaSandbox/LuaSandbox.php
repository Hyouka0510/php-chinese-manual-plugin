<?php

/**
 * Stubs for the LuaSandbox PECL extension.
 *
 * <p><i>LuaSandbox</i> is an extension for PHP 5, PHP 7, and HHVM to allow safely running
 * untrusted Lua 5.1 code from within PHP.</p>
 *
 * @link https://www.php.net/manual/en/book.luasandbox.php
 * @package luasandbox
 * @version 3.0.3
 */

/**
* <div id="class.luasandbox" class="reference"> <h1 class="title">The LuaSandbox class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandbox.intro">   <h2 class="title">简介</h2>   <p class="para">    The LuaSandbox class creates a Lua environment and allows for execution of    Lua code.   </p>  </div>  <div class="section" id="luasandbox.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandbox</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.luasandbox.php#luasandbox.constants.samples"><var class="varname">SAMPLES</var></a></var><span class="initializer"> = 0</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.luasandbox.php#luasandbox.constants.seconds"><var class="varname">SECONDS</var></a></var><span class="initializer"> = 1</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.luasandbox.php#luasandbox.constants.percent"><var class="varname">PERCENT</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link callFunction}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.disableprofiler.php" class="methodname" style="color:#CC7832">disableProfiler</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.enableprofiler.php" class="methodname" style="color:#CC7832">enableProfiler</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span> <span class="parameter" style="color:#3A95FF">$period</span><span class="initializer"> = 0.02</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.getcpuusage.php" class="methodname" style="color:#CC7832">getCPUUsage</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.getmemoryusage.php" class="methodname" style="color:#CC7832">getMemoryUsage</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.getpeakmemoryusage.php" class="methodname" style="color:#CC7832">getPeakMemoryUsage</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.getprofilerfunctionreport.php" class="methodname" style="color:#CC7832">getProfilerFunctionReport</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$units</span><span class="initializer"> = LuaSandbox::SECONDS</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.getversioninfo.php" class="methodname" style="color:#CC7832">getVersionInfo</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.loadbinary.php" class="methodname" style="color:#CC7832">loadBinary</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$code</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$chunkName</span><span class="initializer"> = ''</span></span>): <span class="type" style="color:#EAB766">{@link LuaSandboxFunction}</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.loadstring.php" class="methodname" style="color:#CC7832">loadString</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$code</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$chunkName</span><span class="initializer"> = ''</span></span>): <span class="type" style="color:#EAB766">{@link LuaSandboxFunction}</span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.pauseusagetimer.php" class="methodname" style="color:#CC7832">pauseUsageTimer</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.registerlibrary.php" class="methodname" style="color:#CC7832">registerLibrary</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$libname</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">$functions</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.setcpulimit.php" class="methodname" style="color:#CC7832">setCPULimit</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></span> <span class="parameter" style="color:#3A95FF">$limit</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.setmemorylimit.php" class="methodname" style="color:#CC7832">setMemoryLimit</a></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$limit</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><a href="https://php.net/manual/zh/luasandbox.unpauseusagetimer.php" class="methodname" style="color:#CC7832">unpauseUsageTimer</a></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link wrapPhpFunction}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$function</span></span>): <span class="type" style="color:#EAB766">{@link LuaSandboxFunction}</span></div>   }</div>  </div>  <div class="section" id="luasandbox.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="luasandbox.constants.samples"><strong><span>{@link LuaSandbox::SAMPLES}</span></strong></dt>     <dd>      <p class="para">       Used with <span class="methodname" style="color:#CC7832">{@link LuaSandbox::getProfilerFunctionReport()}</span> to return timings in samples.      </p>     </dd>             <dt id="luasandbox.constants.seconds"><strong><span>{@link LuaSandbox::SECONDS}</span></strong></dt>     <dd>      <p class="para">       Used with <span class="methodname" style="color:#CC7832">{@link LuaSandbox::getProfilerFunctionReport()}</span> to return timings in seconds.      </p>     </dd>             <dt id="luasandbox.constants.percent"><strong><span>{@link LuaSandbox::PERCENT}</span></strong></dt>     <dd>      <p class="para">       Used with <span class="methodname" style="color:#CC7832">{@link LuaSandbox::getProfilerFunctionReport()}</span> to return timings in percentages of the total.      </p>     </dd>       </dl>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link LuaSandbox::callFunction} — Call a function in a Lua global variable</li><li>{@link LuaSandbox::disableProfiler} — Disable the profiler</li><li>{@link LuaSandbox::enableProfiler} — Enable the profiler.</li><li>{@link LuaSandbox::getCPUUsage} — Fetch the current CPU time usage of the Lua environment</li><li>{@link LuaSandbox::getMemoryUsage} — Fetch the current memory usage of the Lua environment</li><li>{@link LuaSandbox::getPeakMemoryUsage} — Fetch the peak memory usage of the Lua environment</li><li>{@link LuaSandbox::getProfilerFunctionReport} — Fetch profiler data</li><li>{@link LuaSandbox::getVersionInfo} — Return the versions of LuaSandbox and Lua</li><li>{@link LuaSandbox::loadBinary} — Load a precompiled binary chunk into the Lua environment</li><li>{@link LuaSandbox::loadString} — Load Lua code into the Lua environment</li><li>{@link LuaSandbox::pauseUsageTimer} — Pause the CPU usage timer</li><li>{@link LuaSandbox::registerLibrary} — Register a set of PHP functions as a Lua library</li><li>{@link LuaSandbox::setCPULimit} — Set the CPU time limit for the Lua environment</li><li>{@link LuaSandbox::setMemoryLimit} — Set the memory limit for the Lua environment</li><li>{@link LuaSandbox::unpauseUsageTimer} — Unpause the timer paused by LuaSandbox::pauseUsageTimer</li><li>{@link LuaSandbox::wrapPhpFunction} — Wrap a PHP callable in a LuaSandboxFunction</li></ul></div>
*
 * The <i>LuaSandbox</i> class creates a Lua environment and allows for execution of Lua code.
 *
 * @link https://www.php.net/manual/en/class.luasandbox.php
 * @since luasandbox >= 1.0.0
 
*/
class LuaSandbox
{
    /**
     * Used with <code>LuaSandbox::getProfilerFunctionReport()</code>
     * to return timings in samples.
     */
    public const SAMPLES = 0;

    /**
     * Used with <code>LuaSandbox::getProfilerFunctionReport()</code>
     * to return timings in seconds.
     */
    public const SECONDS = 1;

    /**
     * Used with <code>LuaSandbox::getProfilerFunctionReport()</code>
     * to return timings in percentages of the total.
     */
    public const PERCENT = 2;

/**
* <div id="luasandbox.callfunction" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::callFunction</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::callFunction</span> — <span class="dc-title">Call a function in a Lua global variable</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.callfunction-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::callFunction</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$name</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></span></div>  <p class="para rdfs-comment">   Calls a function in a Lua global variable.  </p>  <p class="para">   If the name contains "." characters, the function is located via   recursive table accesses, as if the name were a Lua expression.  </p>  <p class="para">   If the variable does not exist, or is not a function, false will be   returned and a warning issued.  </p>  <p class="para">   For more information about calling Lua functions and the return values,   see <span class="methodname" style="color:#CC7832">{@link LuaSandboxFunction::call()}</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.callfunction-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">name</span></dt>    <dd>     <p class="para">      Lua variable name.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">args</span></dt>    <dd>     <p class="para">      Arguments to the function.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.callfunction-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> of values returned by the Lua function, which may be empty,  或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div> <div class="refsect1 examples" id="refsect1-luasandbox.callfunction-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3704">    <p><strong>示例 #1 Calling a Lua function</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// create a new LuaSandbox<br></span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">= new </span><span style="color: #9876AA">LuaSandbox</span><span style="color: #007700">();<br><br></span><span style="color: #FF8000">// Call Lua's string.match<br></span><span style="color: #9876AA">$captures </span><span style="color: #007700">= </span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">callFunction</span><span style="color: #007700">( </span><span style="color: #DD0000">'string.match'</span><span style="color: #007700">, </span><span style="color: #9876AA">$string</span><span style="color: #007700">, </span><span style="color: #9876AA">$pattern </span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div></div>
    *
     * Call a function in a Lua global variable.
     *
     * <p>If the name contains "." characters, the function is located via recursive table accesses,
     * as if the name were a Lua expression.</p>
     *
     * <p>If the variable does not exist, or is not a function,
     * false will be returned and a warning issued.</p>
     *
     * <p>For more information about calling Lua functions and the return values,
     * see <code>LuaSandboxFunction::call()</code>.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.callFunction.php
     * @param string $name <p>Lua variable name.</p>
     * @param mixed[] $arguments <p>Arguments to the function.</p>
     * @return array|bool <p>Returns an array of values returned by the Lua function,
     * which may be empty, or false in case of failure.</p>
     * @see LuaSandboxFunction::call()
     * @since luasandbox >= 1.0.0
     
*/
    public function callFunction($name, array $arguments) {}

/**
* <div id="luasandbox.disableprofiler" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::disableProfiler</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.1.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::disableProfiler</span> — <span class="dc-title">Disable the profiler</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.disableprofiler-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::disableProfiler</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   Disables the profiler.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.disableprofiler-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.disableprofiler-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 seealso" id="refsect1-luasandbox.disableprofiler-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::enableProfiler()} - Enable the profiler.</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getProfilerFunctionReport()} - Fetch profiler data</span></li>   </ul>   </div></div>
    *
     * Disable the profiler.
     *
     * @link https://www.php.net/manual/en/luasandbox.disableProfiler.php
     * @since luasandbox >= 1.1.0
     * @see LuaSandbox::enableProfiler()
     * @see LuaSandbox::getProfilerFunctionReport()
     
*/
    public function disableProfiler() {}

/**
* <div id="luasandbox.enableprofiler" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::enableProfiler</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.1.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::enableProfiler</span> — <span class="dc-title">Enable the profiler.</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.enableprofiler-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::enableProfiler</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span> <span class="parameter" style="color:#3A95FF">$period</span><span class="initializer"> = 0.02</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Enables the profiler. Profiling will begin when Lua code is entered.  </p>  <p class="para">   The profiler periodically samples the Lua environment to record the   running function. Testing indicates that at least on Linux, setting a   period less than 1ms will lead to a high overrun count but no   performance problems.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.enableprofiler-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">period</span></dt>    <dd>     <p class="para">      Sampling period in seconds.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.enableprofiler-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a boolean indicating whether the profiler is enabled.  </p> </div> <div class="refsect1 seealso" id="refsect1-luasandbox.enableprofiler-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::disableProfiler()} - Disable the profiler</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getProfilerFunctionReport()} - Fetch profiler data</span></li>   </ul>   </div></div>
    *
     * Enable the profiler.
     *
     * <p>The profiler periodically samples the Lua environment
     * to record the running function. Testing indicates that
     * at least on Linux, setting a period less than 1ms will
     * lead to a high overrun count but no performance problems.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.enableprofiler.php
     * @param float $period [optional] <p>Sampling period in seconds.</p>
     * @return bool <p>Returns a boolean indicating whether the profiler is enabled.</p>
     * @since luasandbox >= 1.1.0
     * @see LuaSandbox::disableProfiler()
     * @see LuaSandbox::getProfilerFunctionReport()
     
*/
    public function enableProfiler($period = 0.02) {}

/**
* <div id="luasandbox.getcpuusage" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::getCPUUsage</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::getCPUUsage</span> — <span class="dc-title">Fetch the current CPU time usage of the Lua environment</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.getcpuusage-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::getCPUUsage</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span></div>  <p class="para rdfs-comment">   Fetches the current CPU time usage of the Lua environment.  </p>  <p class="para">   This includes time spent in PHP callbacks.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.getcpuusage-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.getcpuusage-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current CPU time usage in seconds.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    On Windows, this function always returns zero. On operating systems that do    not support <strong><span>CLOCK_THREAD_CPUTIME_ID</span></strong>, such as FreeBSD    and Mac OS X, this function will return the elapsed wall-clock time, not    CPU time.   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-luasandbox.getcpuusage-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getMemoryUsage()} - Fetch the current memory usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getPeakMemoryUsage()} - Fetch the peak memory usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setCPULimit()} - Set the CPU time limit for the Lua environment</span></li>   </ul>   </div></div>
    *
     * Fetch the current CPU time usage of the Lua environment.
     *
     * <p>This includes time spent in PHP callbacks.</p>
     *
     * <p>Note: On Windows, this function always returns zero.
     * On operating systems that do not support <i>CLOCK_THREAD_CPUTIME_ID</i>,
     * such as FreeBSD and Mac OS X, this function will return the
     * elapsed wall-clock time, not CPU time.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.getcpuusage.php
     * @return float <p>Returns the current CPU time usage in seconds.</p>
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::getMemoryUsage()
     * @see LuaSandbox::getPeakMemoryUsage()
     * @see LuaSandbox::setCPULimit()
     
*/
    public function getCPUUsage() {}

/**
* <div id="luasandbox.getmemoryusage" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::getMemoryUsage</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::getMemoryUsage</span> — <span class="dc-title">Fetch the current memory usage of the Lua environment</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.getmemoryusage-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::getMemoryUsage</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   Fetches the current memory usage of the Lua environment.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.getmemoryusage-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.getmemoryusage-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the current memory usage in bytes.  </p> </div> <div class="refsect1 seealso" id="refsect1-luasandbox.getmemoryusage-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getPeakMemoryUsage()} - Fetch the peak memory usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getCPUUsage()} - Fetch the current CPU time usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setMemoryLimit()} - Set the memory limit for the Lua environment</span></li>   </ul>   </div></div>
    *
     * Fetch the current memory usage of the Lua environment.
     *
     * @link https://www.php.net/manual/en/luasandbox.getmemoryusage.php
     * @return int
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::getMemoryUsage()
     * @see LuaSandbox::getCPUUsage()
     * @see LuaSandbox::setMemoryLimit()
     
*/
    public function getMemoryUsage() {}

/**
* <div id="luasandbox.getpeakmemoryusage" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::getPeakMemoryUsage</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::getPeakMemoryUsage</span> — <span class="dc-title">Fetch the peak memory usage of the Lua environment</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.getpeakmemoryusage-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::getPeakMemoryUsage</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   Fetches the peak memory usage of the Lua environment.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.getpeakmemoryusage-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.getpeakmemoryusage-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the peak memory usage in bytes.  </p> </div> <div class="refsect1 seealso" id="refsect1-luasandbox.getpeakmemoryusage-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getMemoryUsage()} - Fetch the current memory usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getCPUUsage()} - Fetch the current CPU time usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setMemoryLimit()} - Set the memory limit for the Lua environment</span></li>   </ul>   </div></div>
    *
     * Fetch the peak memory usage of the Lua environment.
     *
     * @link https://www.php.net/manual/en/luasandbox.getpeakmemoryusage.php
     * @return int <p>Returns the current memory usage in bytes.</p>
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::getMemoryUsage()
     * @see LuaSandbox::getCPUUsage()
     * @see LuaSandbox::setMemoryLimit()
     
*/
    public function getPeakMemoryUsage() {}

/**
* <div id="luasandbox.getprofilerfunctionreport" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::getProfilerFunctionReport</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.1.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::getProfilerFunctionReport</span> — <span class="dc-title">Fetch profiler data</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.getprofilerfunctionreport-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::getProfilerFunctionReport</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$units</span><span class="initializer"> = LuaSandbox::SECONDS</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   For a profiling instance previously started by   <span class="methodname" style="color:#CC7832">{@link LuaSandbox::enableProfiler()}</span>, get a   report of the cost of each function.  </p>  <p class="para">   The measurement unit used for the cost is determined by the   <var class="varname">$units</var> parameter:  </p>  <p class="para">   </p><dl>         <dt><strong><span>{@link LuaSandbox::SAMPLES}</span></strong></dt>     <dd><p class="para">Measure in number of samples.</p></dd>             <dt><strong><span>{@link LuaSandbox::SECONDS}</span></strong></dt>     <dd><p class="para">Measure in seconds of CPU time.</p></dd>             <dt><strong><span>{@link LuaSandbox::PERCENT}</span></strong></dt>     <dd><p class="para">Measure percentage of CPU time.</p></dd>       </dl>   </div> <div class="refsect1 parameters" id="refsect1-luasandbox.getprofilerfunctionreport-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">units</span></dt>    <dd>     <p class="para">      Measurement unit constant.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.getprofilerfunctionreport-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns profiler measurements, sorted in descending order, as an associative   <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>. Keys are the Lua function names (with source file and line   defined in angle brackets), values are the measurements as <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>   or <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span>.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    On Windows, this function always returns an empty array. On operating systems that do    not support <strong><span>CLOCK_THREAD_CPUTIME_ID</span></strong>, such as FreeBSD    and Mac OS X, this function will report the elapsed wall-clock time, not    CPU time.   </p>  </blockquote> </div> <div class="refsect1 examples" id="refsect1-luasandbox.getprofilerfunctionreport-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3705">    <p><strong>示例 #1 Profiling Lua code</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// create a new LuaSandbox<br></span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">= new </span><span style="color: #9876AA">LuaSandbox</span><span style="color: #007700">();<br><br></span><span style="color: #FF8000">// Start the profiler<br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">enableProfiler</span><span style="color: #007700">( </span><span style="color: #9876AA">0.01 </span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// ... Execute some Lua code here ...<br><br>// Fetch the profiler data<br></span><span style="color: #9876AA">$data </span><span style="color: #007700">= </span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getProfilerFunctionReport</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div></div>
    *
     * Fetch profiler data.
     *
     * <p>For a profiling instance previously started by <code>LuaSandbox::enableProfiler()</code>,
     * get a report of the cost of each function.</p>
     *
     * <p>The measurement unit used for the cost is determined by the $units parameter:</p>
     * <li><code>LuaSandbox::SAMPLES</code> Measure in number of samples.</li>
     * <li><code>LuaSandbox::SECONDS</code> Measure in seconds of CPU time.</li>
     * <li><code>LuaSandbox::PERCENT</code> Measure percentage of CPU time.</li>
     *
     * <p>Note: On Windows, this function always returns an empty array.
     * On operating systems that do not support <i>CLOCK_THREAD_CPUTIME_ID</i>,
     * such as FreeBSD and Mac OS X, this function will report the
     * elapsed wall-clock time, not CPU time.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.getprofilerfunctionreport.php
     * @param int $units Measurement unit constant.
     * @return array <p>Returns profiler measurements, sorted in descending order, as an associative array.
     * Keys are the Lua function names (with source file and line defined in angle brackets), values are the
     * measurements as integer or float.</p>
     * @since luasandbox >= 1.1.0
     * @see LuaSandbox::SAMPLES
     * @see LuaSandbox::SECONDS
     * @see LuaSandbox::PERCENT
     
*/
    public function getProfilerFunctionReport($units = LuaSandbox::SECONDS) {}

/**
* <div id="luasandbox.getversioninfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::getVersionInfo</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.6.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::getVersionInfo</span> — <span class="dc-title">Return the versions of LuaSandbox and Lua</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.getversioninfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="modifier">static</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::getVersionInfo</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   Returns the versions of LuaSandbox and Lua.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.getversioninfo-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.getversioninfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an array with two keys:  </p>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr><th>element</th><th>type</th><th>description</th></tr>     </thead>     <tbody class="tbody">      <tr>       <td>LuaSandbox</td>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>       <td>The version of the LuaSandbox extension.</td>      </tr>      <tr>       <td>Lua</td>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>       <td>The library name and version as defined by the LUA_RELEASE macro, for example, "Lua 5.1.5".</td>      </tr>     </tbody>       </table>   </div></div>
    *
     * Return the versions of LuaSandbox and Lua.
     *
     * @link https://www.php.net/manual/en/luasandbox.getversioninfo.php
     * @return array <p>Returns an array with two keys:</p>
     * <li>LuaSandbox (string), the version of the LuaSandbox extension.</li>
     * <li>Lua (string), the library name and version as defined by the LUA_RELEASE macro, for example, "Lua 5.1.5".</li>
     * @since luasandbox >= 1.6.0
     
*/
    public static function getVersionInfo() {}

/**
* <div id="luasandbox.loadbinary" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::loadBinary</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::loadBinary</span> — <span class="dc-title">Load a precompiled binary chunk into the Lua environment</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.loadbinary-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::loadBinary</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$code</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$chunkName</span><span class="initializer"> = ''</span></span>): <span class="type" style="color:#EAB766">{@link LuaSandboxFunction}</span></div>  <p class="para rdfs-comment">   Loads data generated by <span class="methodname" style="color:#CC7832">{@link LuaSandboxFunction::dump()}</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.loadbinary-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">code</span></dt>    <dd>     <p class="para">      Data from <span class="methodname" style="color:#CC7832">{@link LuaSandboxFunction::dump()}</span>.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">chunkName</span></dt>    <dd>     <p class="para">      Name for the loaded function.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.loadbinary-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname">{@link LuaSandboxFunction}</span>.  </p> </div> <div class="refsect1 seealso" id="refsect1-luasandbox.loadbinary-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::loadString()} - Load Lua code into the Lua environment</span></li>   </ul>   </div></div>
    *
     * Load a precompiled binary chunk into the Lua environment.
     *
     * <p>Loads data generated by <code>LuaSandboxFunction::dump()</code>.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.loadbinary.php
     * @param string $code <p>Data from <code>LuaSandboxFunction::dump()</code>.</p>
     * @param string $chunkName [optional] <p>Name for the loaded function.</p>
     * @return LuaSandboxFunction
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::loadString()
     
*/
    public function loadBinary($code, $chunkName = '') {}

/**
* <div id="luasandbox.loadstring" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::loadString</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::loadString</span> — <span class="dc-title">Load Lua code into the Lua environment</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.loadstring-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::loadString</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$code</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$chunkName</span><span class="initializer"> = ''</span></span>): <span class="type" style="color:#EAB766">{@link LuaSandboxFunction}</span></div>  <p class="para rdfs-comment">   Loads Lua code into the Lua environment.  </p>  <p class="para">   This is the equivalent of standard Lua's <span class="literal">loadstring()</span> function.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.loadstring-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">code</span></dt>    <dd>     <p class="para">      Lua code.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">chunkName</span></dt>    <dd>     <p class="para">      Name for the loaded chunk, for use in error traces.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.loadstring-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname">{@link LuaSandboxFunction}</span> which, when executed, will execute the passed <var class="varname">$code</var>.  </p> </div> <div class="refsect1 examples" id="refsect1-luasandbox.loadstring-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3706">    <p><strong>示例 #1 Loading code into Lua</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// create a new LuaSandbox<br></span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">= new </span><span style="color: #9876AA">LuaSandbox</span><span style="color: #007700">();<br><br></span><span style="color: #FF8000">// Load the code<br></span><span style="color: #9876AA">$function </span><span style="color: #007700">= </span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loadString</span><span style="color: #007700">(<br>&lt;&lt;&lt;CODE<br></span><span style="color: #DD0000">    return "Hello, world"<br></span><span style="color: #007700">CODE<br>);<br><br></span><span style="color: #FF8000">// Execute the loaded code<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">( </span><span style="color: #9876AA">$function</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">() );<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(1) {<br>  [0]=&gt;<br>  string(12) "Hello, world"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-luasandbox.loadstring-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::registerLibrary()} - Register a set of PHP functions as a Lua library</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::wrapPhpFunction()} - Wrap a PHP callable in a LuaSandboxFunction</span></li>   </ul>   </div></div>
    *
     * Load Lua code into the Lua environment.
     *
     * <p>This is the equivalent of standard Lua's <code>loadstring()</code> function.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.loadString.php
     * @param string $code <p>Lua code.</p>
     * @param string $chunkName [optional] <p>Name for the loaded chunk, for use in error traces.</p>
     * @return LuaSandboxFunction <p>Returns a <code>LuaSandboxFunction</code> which, when executed,
     * will execute the passed <code>$code</code>.</p>
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::registerLibrary()
     * @see LuaSandbox::wrapPhpFunction()
     
*/
    public function loadString($code, $chunkName = '') {}

/**
* <div id="luasandbox.pauseusagetimer" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::pauseUsageTimer</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.4.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::pauseUsageTimer</span> — <span class="dc-title">Pause the CPU usage timer</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.pauseusagetimer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::pauseUsageTimer</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   Pauses the CPU usage timer.  </p>  <p class="para">   This only has effect when called from within a callback from Lua. When   execution returns to Lua, the timer will be automatically unpaused. If   a new call into Lua is made, the timer will be unpaused for the   duration of that call.  </p>  <p class="para">   If a PHP callback calls into Lua again with timer not paused, and then   that Lua function calls into PHP again, the second PHP call will not be   able to pause the timer. The logic is that even though the second PHP   call would avoid counting the CPU usage against the limit, the first   call still counts it.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.pauseusagetimer-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.pauseusagetimer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span> indicating whether the timer is now paused.  </p> </div> <div class="refsect1 examples" id="refsect1-luasandbox.pauseusagetimer-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3707">    <p><strong>示例 #1 Manipulating the usage timer</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// create a new LuaSandbox and set a CPU limit<br></span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">= new </span><span style="color: #9876AA">LuaSandbox</span><span style="color: #007700">();<br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCPULimit</span><span style="color: #007700">( </span><span style="color: #9876AA">1 </span><span style="color: #007700">);<br><br>function </span><span style="color: #9876AA">doWait</span><span style="color: #007700">( </span><span style="color: #9876AA">$t </span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">$end </span><span style="color: #007700">= </span><span style="color: #9876AA">microtime</span><span style="color: #007700">( </span><span style="color: #9876AA">true </span><span style="color: #007700">) + </span><span style="color: #9876AA">$t</span><span style="color: #007700">;<br>    while ( </span><span style="color: #9876AA">microtime</span><span style="color: #007700">( </span><span style="color: #9876AA">true </span><span style="color: #007700">) &lt; </span><span style="color: #9876AA">$end </span><span style="color: #007700">) {<br>        </span><span style="color: #FF8000">// waste CPU cycles<br>    </span><span style="color: #007700">}<br>}<br><br></span><span style="color: #FF8000">// Register a PHP callback<br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">registerLibrary</span><span style="color: #007700">( </span><span style="color: #DD0000">'php'</span><span style="color: #007700">, [<br>    </span><span style="color: #DD0000">'test' </span><span style="color: #007700">=&gt; function () use ( </span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">) {<br>        </span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pauseUsageTimer</span><span style="color: #007700">();<br>        </span><span style="color: #9876AA">doWait</span><span style="color: #007700">( </span><span style="color: #9876AA">5 </span><span style="color: #007700">);<br><br>        </span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">unpauseUsageTimer</span><span style="color: #007700">();<br>        </span><span style="color: #9876AA">doWait</span><span style="color: #007700">( </span><span style="color: #9876AA">0.1 </span><span style="color: #007700">);<br>    },<br>    </span><span style="color: #DD0000">'test2' </span><span style="color: #007700">=&gt; function () use ( </span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">) {<br>        </span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pauseUsageTimer</span><span style="color: #007700">();<br>        </span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">unpauseUsageTimer</span><span style="color: #007700">();<br>        </span><span style="color: #9876AA">doWait</span><span style="color: #007700">( </span><span style="color: #9876AA">1.1 </span><span style="color: #007700">);<br>    }<br>] );<br><br>echo </span><span style="color: #DD0000">"This should not time out...\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loadString</span><span style="color: #007700">( </span><span style="color: #DD0000">'php.test()' </span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">();<br><br>echo </span><span style="color: #DD0000">"This should time out.\n"</span><span style="color: #007700">;<br>try {<br>    </span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loadString</span><span style="color: #007700">( </span><span style="color: #DD0000">'php.test2()' </span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">();<br>    echo </span><span style="color: #DD0000">"It did not?\n"</span><span style="color: #007700">;<br>} catch ( </span><span style="color: #9876AA">LuaSandboxTimeoutError $ex </span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"It did! " </span><span style="color: #007700">. </span><span style="color: #9876AA">$ex</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">getMessage</span><span style="color: #007700">() . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">This should not time out...<br>This should time out.<br>It did! The maximum execution time for this script was exceeded</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-luasandbox.pauseusagetimer-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setCPULimit()} - Set the CPU time limit for the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::unpauseUsageTimer()} - Unpause the timer paused by LuaSandbox::pauseUsageTimer</span></li>   </ul>   </div></div>
    *
     * Pause the CPU usage timer.
     *
     * <p>This only has effect when called from within a callback from Lua.
     * When execution returns to Lua, the timer will be automatically unpaused.
     * If a new call into Lua is made, the timer will be unpaused
     * for the duration of that call.</p>
     *
     * <p>If a PHP callback calls into Lua again with timer not paused,
     * and then that Lua function calls into PHP again,
     * the second PHP call will not be able to pause the timer.
     * The logic is that even though the second PHP call would
     * avoid counting the CPU usage against the limit,
     * the first call still counts it.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.pauseusagetimer.php
     * @return bool <p>Returns a boolean indicating whether the timer is now paused.</p>
     * @since luasandbox >= 1.4.0
     * @see LuaSandbox::setCPULimit()
     * @see LuaSandbox::unpauseUsageTimer()
     
*/
    public function pauseUsageTimer() {}

/**
* <div id="luasandbox.registerlibrary" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::registerLibrary</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::registerLibrary</span> — <span class="dc-title">Register a set of PHP functions as a Lua library</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.registerlibrary-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::registerLibrary</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">$libname</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">$functions</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   Registers a set of PHP functions as a Lua library, so that Lua can call   the relevant PHP code.  </p>  <p class="para">   For more information about calling Lua functions and the return values,   see <span class="methodname" style="color:#CC7832">{@link LuaSandboxFunction::call()}</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.registerlibrary-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">libname</span></dt>    <dd>     <p class="para">      The name of the library. In the Lua state, the global variable of this      name will be set to the table of functions. If the table already exists,      the new functions will be added to it.     </p>    </dd>          <dt><span class="parameter" style="color:#3A95FF">functions</span></dt>    <dd>     <p class="para">      An <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>, where each key is a function name, and each value is a      corresponding PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.registerlibrary-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 examples" id="refsect1-luasandbox.registerlibrary-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3708">    <p><strong>示例 #1 Registering PHP functions to call from Lua</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// create a new LuaSandbox<br></span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">= new </span><span style="color: #9876AA">LuaSandbox</span><span style="color: #007700">();<br><br></span><span style="color: #FF8000">// Register some functions in the Lua environment<br><br></span><span style="color: #007700">function </span><span style="color: #9876AA">frobnosticate</span><span style="color: #007700">( </span><span style="color: #9876AA">$v </span><span style="color: #007700">) {<br>    return [ </span><span style="color: #9876AA">$v </span><span style="color: #007700">+ </span><span style="color: #9876AA">42 </span><span style="color: #007700">];<br>}<br><br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">registerLibrary</span><span style="color: #007700">( </span><span style="color: #DD0000">'php'</span><span style="color: #007700">, [<br>    </span><span style="color: #DD0000">'frobnosticate' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'frobnosticate'</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">'output' </span><span style="color: #007700">=&gt; function ( </span><span style="color: #9876AA">$string </span><span style="color: #007700">) {<br>        echo </span><span style="color: #DD0000">"</span><span style="color: #9876AA">$string</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br>    },<br>    </span><span style="color: #DD0000">'error' </span><span style="color: #007700">=&gt; function () {<br>        throw new </span><span style="color: #9876AA">LuaSandboxRuntimeError</span><span style="color: #007700">( </span><span style="color: #DD0000">"Something is wrong" </span><span style="color: #007700">);<br>    }<br>] );<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-luasandbox.registerlibrary-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::loadString()} - Load Lua code into the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::wrapPhpFunction()} - Wrap a PHP callable in a LuaSandboxFunction</span></li>   </ul>   </div></div>
    *
     * Register a set of PHP functions as a Lua library.
     *
     * <p>Registers a set of PHP functions as a Lua library,
     * so that Lua can call the relevant PHP code.</p>
     *
     * <p>For more information about calling Lua functions and the return values,
     * see <code>LuaSandboxFunction::call()</code>.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.registerlibrary.php
     * @param string $libname <p>The name of the library.
     * In the Lua state, the global variable of this name will be set to the table of functions.
     * If the table already exists, the new functions will be added to it.</p>
     * @param array $functions <p>Returns an array, where each key is a function name,
     * and each value is a corresponding PHP callable.</p>
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::loadString()
     * @see LuaSandbox::wrapPhpFunction()
     
*/
    public function registerLibrary($libname, $functions) {}

/**
* <div id="luasandbox.setcpulimit" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::setCPULimit</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::setCPULimit</span> — <span class="dc-title">Set the CPU time limit for the Lua environment</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.setcpulimit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::setCPULimit</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></span> <span class="parameter" style="color:#3A95FF">$limit</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   Sets the CPU time limit for the Lua environment.  </p>  <p class="para">   If the total user and system time used by the environment after the call   to this method exceeds this limit, a <span class="classname"><a href="https://php.net/manual/zh/class.luasandboxtimeouterror.php" class="classname">LuaSandboxTimeoutError</a></span>   exception is thrown.  </p>  <p class="para">   Time used in PHP callbacks is included in the limit.  </p>  <p class="para">   Setting the time limit from a callback while Lua is running causes the   timer to be reset, or started if it was not already running.  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    On Windows, the CPU limit will be ignored. On operating systems that do    not support <strong><span>CLOCK_THREAD_CPUTIME_ID</span></strong>, such as FreeBSD    and Mac OS X, wall-clock time rather than CPU time will be limited.   </p>  </blockquote> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.setcpulimit-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>    <dd>     <p class="para">      Limit as a <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span> in seconds, or <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> for no limit.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.setcpulimit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 examples" id="refsect1-luasandbox.setcpulimit-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3709">    <p><strong>示例 #1 Calling a Lua function</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// create a new LuaSandbox<br></span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">= new </span><span style="color: #9876AA">LuaSandbox</span><span style="color: #007700">();<br><br></span><span style="color: #FF8000">// set a time limit<br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setCPULimit</span><span style="color: #007700">( </span><span style="color: #9876AA">2 </span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// Run Lua code<br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loadString</span><span style="color: #007700">( </span><span style="color: #DD0000">'while true do end' </span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">PHP Fatal error:  Uncaught LuaSandboxTimeoutError: The maximum execution time for this script was exceeded</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-luasandbox.setcpulimit-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getCPUUsage()} - Fetch the current CPU time usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setMemoryLimit()} - Set the memory limit for the Lua environment</span></li>   </ul>   </div></div>
    *
     * Set the CPU time limit for the Lua environment.
     *
     * <p>If the total user and system time used by the environment after the call
     * to this method exceeds this limit, a <code>LuaSandboxTimeoutError</code> exception is thrown.</p>
     *
     * <p>Time used in PHP callbacks is included in the limit.</p>
     *
     * <p>Setting the time limit from a callback while Lua is running causes the timer to be reset,
     * or started if it was not already running.</p>
     *
     * <p>Note: On Windows, the CPU limit will be ignored. On operating systems
     * that do not support <i>CLOCK_THREAD_CPUTIME_ID</i>, such as FreeBSD and
     * Mac OS X, wall-clock time rather than CPU time will be limited.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.setcpulimit.php
     * @param bool|float $limit <p>Limit as a float in seconds, or false for no limit.</p>
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::getCPUUsage()
     * @see LuaSandbox::setMemoryLimit()
     
*/
    public function setCPULimit($limit) {}

/**
* <div id="luasandbox.setmemorylimit" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::setMemoryLimit</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::setMemoryLimit</span> — <span class="dc-title">Set the memory limit for the Lua environment</span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.setmemorylimit-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::setMemoryLimit</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">$limit</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   Sets the memory limit for the Lua environment.  </p>  <p class="para">   If this limit is exceeded, a <span class="classname"><a href="https://php.net/manual/zh/class.luasandboxmemoryerror.php" class="classname">LuaSandboxMemoryError</a></span>   exception is thrown.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.setmemorylimit-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">limit</span></dt>    <dd>     <p class="para">      Memory limit in bytes.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.setmemorylimit-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 examples" id="refsect1-luasandbox.setmemorylimit-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3710">    <p><strong>示例 #1 Calling a Lua function</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// create a new LuaSandbox<br></span><span style="color: #9876AA">$sandbox </span><span style="color: #007700">= new </span><span style="color: #9876AA">LuaSandbox</span><span style="color: #007700">();<br><br></span><span style="color: #FF8000">// set a memory limit<br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">setMemoryLimit</span><span style="color: #007700">( </span><span style="color: #9876AA">50 </span><span style="color: #007700">* </span><span style="color: #9876AA">1024 </span><span style="color: #007700">* </span><span style="color: #9876AA">1024 </span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// Run Lua code<br></span><span style="color: #9876AA">$sandbox</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">loadString</span><span style="color: #007700">( </span><span style="color: #DD0000">'local x = "x"; while true do x = x .. x; end' </span><span style="color: #007700">)-&gt;</span><span style="color: #9876AA">call</span><span style="color: #007700">();<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">PHP Fatal error:  Uncaught LuaSandboxMemoryError: not enough memory</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-luasandbox.setmemorylimit-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getMemoryUsage()} - Fetch the current memory usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::getPeakMemoryUsage()} - Fetch the peak memory usage of the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setCPULimit()} - Set the CPU time limit for the Lua environment</span></li>   </ul>   </div></div>
    *
     * Set the memory limit for the Lua environment.
     *
     * @link https://www.php.net/manual/en/luasandbox.setmemorylimit.php
     * @param int $limit <p>Memory limit in bytes.</p>
     * @throws LuaSandboxMemoryError <p>Exception is thrown if this limit is exceeded.</p>
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::getMemoryUsage()
     * @see LuaSandbox::getPeakMemoryUsage()
     * @see LuaSandbox::setCPULimit()
     
*/
    public function setMemoryLimit($limit) {}

/**
* <div id="luasandbox.unpauseusagetimer" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::unpauseUsageTimer</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.4.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::unpauseUsageTimer</span> — <span class="dc-title">Unpause the timer paused by <span class="methodname" style="color:#CC7832">{@link LuaSandbox::pauseUsageTimer()}</span></span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.unpauseusagetimer-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::unpauseUsageTimer</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   Unpauses the timer paused by <span class="methodname" style="color:#CC7832">{@link LuaSandbox::pauseUsageTimer()}</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.unpauseusagetimer-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.unpauseusagetimer-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 seealso" id="refsect1-luasandbox.unpauseusagetimer-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::pauseUsageTimer()} - Pause the CPU usage timer</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setCPULimit()} - Set the CPU time limit for the Lua environment</span></li>   </ul>   </div></div>
    *
     * Unpause the timer paused by <code>LuaSandbox::pauseUsageTimer()</code>.
     *
     * @link https://www.php.net/manual/en/luasandbox.unpauseusagetimer.php
     * @since luasandbox >= 1.0.0
     * @see LuaSandbox::setCPULimit()
     * @see LuaSandbox::unpauseUsageTimer()
     
*/
    public function unpauseUsageTimer() {}

/**
* <div id="luasandbox.wrapphpfunction" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandbox::wrapPhpFunction</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.2.0)</p><p class="refpurpose"><span class="refname">LuaSandbox::wrapPhpFunction</span> — <span class="dc-title">Wrap a PHP callable in a <span class="classname">{@link LuaSandboxFunction}</span></span></p> </div> <div class="refsect1 description" id="refsect1-luasandbox.wrapphpfunction-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandbox::wrapPhpFunction</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span> <span class="parameter" style="color:#3A95FF">$function</span></span>): <span class="type" style="color:#EAB766">{@link LuaSandboxFunction}</span></div>  <p class="para rdfs-comment">   Wraps a PHP callable in a <span class="classname">{@link LuaSandboxFunction}</span>, so it   can be passed into Lua as an anonymous function.  </p>  <p class="para">   The function must return either an array of values (which may be empty),   or <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> which is equivalent to returning the empty array.  </p>  <p class="para">   Exceptions will be raised as errors in Lua, however only   <span class="classname"><a href="https://php.net/manual/zh/class.luasandboxruntimeerror.php" class="classname">LuaSandboxRuntimeError</a></span> exceptions may be caught   inside Lua with <span class="literal">pcall()</span> or <span class="literal">xpcall()</span>.  </p>  <p class="para">   For more information about calling Lua functions and the return values,   see <span class="methodname" style="color:#CC7832">{@link LuaSandboxFunction::call()}</span>.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandbox.wrapphpfunction-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">function</span></dt>    <dd>     <p class="para">      Callable to wrap.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandbox.wrapphpfunction-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a <span class="classname">{@link LuaSandboxFunction}</span>.  </p> </div> <div class="refsect1 seealso" id="refsect1-luasandbox.wrapphpfunction-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::loadString()} - Load Lua code into the Lua environment</span></li>    <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::registerLibrary()} - Register a set of PHP functions as a Lua library</span></li>   </ul>   </div></div>
    *
     * Wrap a PHP callable in a LuaSandboxFunction.
     *
     * <p>Wraps a PHP callable in a <code>LuaSandboxFunction</code>,
     * so it can be passed into Lua as an anonymous function.</p>
     *
     * <p>The function must return either an array of values (which may be empty),
     * or NULL which is equivalent to returning the empty array.</p>
     *
     * <p>Exceptions will be raised as errors in Lua, however only <code>LuaSandboxRuntimeError<code>
     * exceptions may be caught inside Lua with <code>pcall()<code/> or <code>xpcall()<code/>.</p>
     *
     * <p>For more information about calling Lua functions and the return values,
     * see <code>LuaSandboxFunction::call()</code>.</p>
     *
     * @link https://www.php.net/manual/en/luasandbox.wrapPhpFunction.php
     * @param callable $function <p>Callable to wrap.</p>
     * @return LuaSandboxFunction
     * @since luasandbox >= 1.2.0
     * @see LuaSandbox::loadString()
     * @see LuaSandbox::registerLibrary()
     
*/
    public function wrapPhpFunction($function) {}
}

/**
* <div id="class.luasandboxfunction" class="reference"> <h1 class="title">The LuaSandboxFunction class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandboxfunction.intro">   <h2 class="title">简介</h2>   <p class="para">    Represents a Lua function, allowing it to be called from PHP.   </p>   <p class="para">    A LuaSandboxFunction may be obtained as a return value from Lua, as a parameter    passed to a callback from Lua, or by using    <span class="methodname" style="color:#CC7832">{@link LuaSandbox::wrapPhpFunction()}</span>,    <span class="methodname" style="color:#CC7832">{@link LuaSandbox::loadString()}</span>, or    <span class="methodname" style="color:#CC7832">{@link LuaSandbox::loadBinary()}</span>.   </p>  </div>  <div class="section" id="luasandboxfunction.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandboxFunction</strong>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link call}</span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link dump}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>   }</div>  </div> </div> <h2>目录</h2><ul class="chunklist chunklist_reference"><li>{@link LuaSandboxFunction::call} — Call a Lua function</li><li>{@link LuaSandboxFunction::__construct} — Unused</li><li>{@link LuaSandboxFunction::dump} — Dump the function as a binary blob</li></ul></div>
*
 * Represents a Lua function, allowing it to be called from PHP.
 *
 * <p>A <i>LuaSandboxFunction</i> may be obtained as a return value from Lua,
 * as a parameter passed to a callback from Lua,
 * or by using <code>LuaSandbox::wrapPhpFunction()</code>, <code>LuaSandbox::loadString()</code>,
 * or <code>LuaSandbox::loadBinary()</code>.</p>
 *
 * @since luasandbox >= 1.0.0
 
*/
class LuaSandboxFunction
{
/**
* <div id="luasandboxfunction.call" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandboxFunction::call</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandboxFunction::call</span> — <span class="dc-title">Call a Lua function</span></p> </div> <div class="refsect1 description" id="refsect1-luasandboxfunction.call-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandboxFunction::call</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">...$args</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></span></div>  <p class="para rdfs-comment">   Calls a Lua function.  </p>  <p class="para">   Errors considered to be the fault of the PHP code will result in the   function returning <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> and <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>   being raised, for example, a <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> type being used as an   argument. Lua errors will result in a <span class="classname"><a href="https://php.net/manual/zh/class.luasandboxruntimeerror.php" class="classname">LuaSandboxRuntimeError</a></span>   exception being thrown.  </p>  <p class="para">   PHP and Lua types are converted as follows:  </p>  <p class="para">   </p><ul class="itemizedlist">    <li class="listitem">     <p class="para">PHP <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> is Lua <span class="literal">nil</span>, and vice versa.</p>    </li>    <li class="listitem">     <p class="para">      PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>s and <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span>s are converted to Lua      numbers. Infinity and <strong><span><a href="https://php.net/manual/zh/math.constants.php#constant.nan">NAN</a></span></strong> are supported.     </p>    </li>    <li class="listitem">     <p class="para">      Lua numbers without a fractional part between approximately <span class="literal">-2**53</span>      and <span class="literal">2**53</span> are converted to PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>s, with others      being converted to PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span>s.     </p>    </li>    <li class="listitem">     <p class="para">PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span>s are Lua booleans, and vice versa.</p>    </li>    <li class="listitem">     <p class="para">PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>s are Lua strings, and vice versa.</p>    </li>    <li class="listitem">     <p class="para">      Lua functions are PHP <span class="classname">{@link LuaSandboxFunction}</span> objects, and vice versa.      General PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.callable.php" class="type callable" style="color:#EAB766">callable</a></span>s are not supported.     </p>    </li>    <li class="listitem">     <p class="para">      PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>s are converted to Lua tables, and vice versa.     </p>     <p class="para">      </p><ul class="itemizedlist">       <li class="listitem">        <p class="para">         Note that Lua typically indexes arrays from 1, while PHP indexes         arrays from 0. No adjustment is made for these differing         conventions.        </p>       </li>       <li class="listitem">        <p class="para">Self-referential arrays are not supported in either direction.</p>       </li>       <li class="listitem">        <p class="para">PHP references are dereferenced.</p>       </li>       <li class="listitem">        <p class="para">         Lua <span class="literal">__pairs</span> and <span class="literal">__ipairs</span> are processed.         <span class="literal">__index</span> is ignored.        </p>       </li>       <li class="listitem">        <p class="para">         When converting from PHP to Lua, integer keys between         <span class="literal">-2**53</span> and <span class="literal">2**53</span> are represented         as Lua numbers. All other keys are represented as Lua strings.        </p>       </li>       <li class="listitem">        <p class="para">         When converting from Lua to PHP, keys other than strings and         numbers will result in an error, as will collisions when converting         numbers to strings or vice versa (since PHP considers things like         <span class="literal">$a[0]</span> and <span class="literal">$a["0"]</span> as being equivalent).        </p>       </li>      </ul>         </li>    <li class="listitem">     <p class="para">      All other types are unsupported and will raise an error/exception,      including general PHP <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span>s and Lua userdata and thread types.     </p>    </li>   </ul>    <p class="para">   Lua functions inherently return a list of results. So on success, this   method returns an <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> containing all of the values returned by Lua,   with <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> keys starting from zero. Lua may return no results, in   which case an empty array is returned.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandboxfunction.call-parameters">  <h3 class="title">参数</h3>  <dl>       <dt><span class="parameter" style="color:#3A95FF">args</span></dt>    <dd>     <p class="para">      Arguments passed to the function.     </p>    </dd>     </dl> </div> <div class="refsect1 returnvalues" id="refsect1-luasandboxfunction.call-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns an <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> of values returned by the function, which may be empty,    或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div></div>
    *
     * Call a Lua function.
     *
     * <p>Errors considered to be the fault of the PHP code will result in the
     * function returning false and <i>E_WARNING</i> being raised, for example,
     * a resource type being used as an argument. Lua errors will result
     * in a LuaSandboxRuntimeError exception being thrown.</p>
     *
     * <p>PHP and Lua types are converted as follows:</p>
     * <ul>
     * <li>PHP NULL is Lua nil, and vice versa.</li>
     * <li>PHP integers and floats are converted to Lua numbers. Infinity and NAN are supported.</li>
     * <li>Lua numbers without a fractional part between approximately -2**53 and 2**53 are
     * converted to PHP integers, with others being converted to PHP floats.</li>
     * <li>PHP booleans are Lua booleans, and vice versa.</li>
     * <li>PHP strings are Lua strings, and vice versa.</li>
     * <li>Lua functions are PHP LuaSandboxFunction objects, and vice versa.
     * General PHP callables are not supported.</li>
     * <li>PHP arrays are converted to Lua tables, and vice versa.</li>
     * <ul>
     *   <li>Note that Lua typically indexes arrays from 1, while PHP indexes arrays from 0.
     *   No adjustment is made for these differing conventions.</li>
     *   <li>Self-referential arrays are not supported in either direction.</li>
     *   <li>PHP references are dereferenced.</li>
     *   <li>Lua <i>__pairs</i> and <i>__ipairs</i> are processed. <i>__index</i> is ignored.</li>
     *   <li>When converting from PHP to Lua, integer keys between -2**53 and 2**53 are represented as Lua numbers.
     *   All other keys are represented as Lua strings.</li>
     *   <li>When converting from Lua to PHP, keys other than strings and numbers will result in an error,
     *   as will collisions when converting numbers to strings or vice versa
     *   (since PHP considers things like <code>$a[0]</code> and <code>$a["0"]</code> as being equivalent).</li>
     * </ul>
     * <li>All other types are unsupported and will raise an error/exception,
     * including general PHP objects and Lua userdata and thread types.</li>
     * </ul>
     *
     * <p>Lua functions inherently return a list of results. So on success,
     * this method returns an array containing all of the values returned by Lua,
     * with integer keys starting from zero.
     * Lua may return no results, in which case an empty array is returned.</p>
     *
     * @link https://www.php.net/manual/en/luasandboxfunction.call.php
     * @param string[] $arguments <p>Arguments passed to the function.</p>
     * @return array|bool <p>Returns an array of values returned by the function,
     * which may be empty, or false on error.</p>
     * @since luasandbox >= 1.0.0
     
*/
    public function call(string ...$args) {}

/**
* <div id="luasandboxfunction.dump" class="refentry"> <div class="refnamediv">  <h1 class="refname">LuaSandboxFunction::dump</h1>  <p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p><p class="refpurpose"><span class="refname">LuaSandboxFunction::dump</span> — <span class="dc-title">Dump the function as a binary blob</span></p> </div> <div class="refsect1 description" id="refsect1-luasandboxfunction.dump-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832"><strong>LuaSandboxFunction::dump</strong></span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   Dumps the function as a binary blob.  </p> </div> <div class="refsect1 parameters" id="refsect1-luasandboxfunction.dump-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-luasandboxfunction.dump-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns a string that may be passed to <span class="methodname" style="color:#CC7832">{@link LuaSandbox::loadBinary()}</span>.  </p> </div></div>
    *
     * Dump the function as a binary blob.
     *
     * @link https://www.php.net/manual/en/luasandboxfunction.dump.php
     * @return string <p>Returns a string that may be passed to <code>LuaSandbox::loadBinary()</code>.</p>
     * @since luasandbox >= 1.0.0
     
*/
    public function dump() {}
}

/**
* <div id="class.luasandboxerror" class="reference"> <h1 class="title">The LuaSandboxError class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandboxerror.intro">   <h2 class="title">简介</h2>   <p class="para">    Base class for LuaSandbox exceptions   </p>  </div>  <div class="section" id="luasandboxerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandboxError</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.exception.php" class="classname">Exception</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 常量 </div>    <div class="fieldsynopsis">     <span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.luasandboxerror.php#luasandboxerror.constants.run"><var class="varname">RUN</var></a></var><span class="initializer"> = 2</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.luasandboxerror.php#luasandboxerror.constants.syntax"><var class="varname">SYNTAX</var></a></var><span class="initializer"> = 3</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.luasandboxerror.php#luasandboxerror.constants.mem"><var class="varname">MEM</var></a></var><span class="initializer"> = 4</span>;</div>    <div class="fieldsynopsis"><span class="modifier">const</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="fieldsynopsis_varname"><a href="https://php.net/manual/zh/class.luasandboxerror.php#luasandboxerror.constants.err"><var class="varname">ERR</var></a></var><span class="initializer"> = 5</span>;</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div>  <div class="section" id="luasandboxerror.constants">   <h2 class="title">预定义常量</h2>   <dl>         <dt id="luasandboxerror.constants.run"><strong><span>{@link LuaSandboxError::RUN}</span></strong></dt>     <dd>      <p class="para"></p>     </dd>             <dt id="luasandboxerror.constants.syntax"><strong><span>{@link LuaSandboxError::SYNTAX}</span></strong></dt>     <dd>      <p class="para"></p>     </dd>             <dt id="luasandboxerror.constants.mem"><strong><span>{@link LuaSandboxError::MEM}</span></strong></dt>     <dd>      <p class="para"></p>     </dd>             <dt id="luasandboxerror.constants.err"><strong><span>{@link LuaSandboxError::ERR}</span></strong></dt>     <dd>      <p class="para"></p>     </dd>       </dl>  </div> </div> </div>
*
 * Base class for LuaSandbox exceptions.
 *
 * @since luasandbox >= 1.0.0
 
*/
class LuaSandboxError extends Exception
{
    public const RUN = 2;
    public const SYNTAX = 3;
    public const MEM = 4;
    public const ERR = 5;
}

/**
* <div id="class.luasandboxruntimeerror" class="reference"> <h1 class="title">The LuaSandboxRuntimeError class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandboxruntimeerror.intro">   <h2 class="title">简介</h2>   <p class="para">    Catchable LuaSandbox runtime exceptions.   </p>   <p class="para">    These may be caught inside Lua using    <span class="literal">pcall()</span> or <span class="literal">xpcall()</span>.   </p>  </div>  <div class="section" id="luasandboxruntimeerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandboxRuntimeError</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.luasandboxerror.php" class="classname">LuaSandboxError</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div> </div> </div>
*
 * Catchable <i>LuaSandbox</i> runtime exceptions.
 *
 * <p>These may be caught inside Lua using <code>pcall()</code> or <code>xpcall()</code>.</p>
 *
 * @since luasandbox >= 1.0.0
 
*/
class LuaSandboxRuntimeError extends LuaSandboxError {}

/**
* <div id="class.luasandboxfatalerror" class="reference"> <h1 class="title">The LuaSandboxFatalError class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandboxfatalerror.intro">   <h2 class="title">简介</h2>   <p class="para">    Uncatchable LuaSandbox exceptions.   </p>   <p class="para">    These may not be caught inside Lua using    <span class="literal">pcall()</span> or <span class="literal">xpcall()</span>.   </p>  </div>  <div class="section" id="luasandboxfatalerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandboxFatalError</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.luasandboxerror.php" class="classname">LuaSandboxError</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div> </div> </div>
*
 * Uncatchable <i>LuaSandbox</i> exceptions.
 *
 * <p>These may not be caught inside Lua using <code>pcall()</code> or <code>xpcall()</code>.</p>
 *
 * @since luasandbox >= 1.0.0
 
*/
class LuaSandboxFatalError extends LuaSandboxError {}

/**
* <div id="class.luasandboxerrorerror" class="reference"> <h1 class="title">The LuaSandboxErrorError class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandboxerrorerror.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown when Lua encounters an error inside an error handler.   </p>  </div>  <div class="section" id="luasandboxerrorerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandboxErrorError</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.luasandboxfatalerror.php" class="classname">LuaSandboxFatalError</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div> </div> </div>
*
 * Exception thrown when Lua encounters an error inside an error handler.
 *
 * @since luasandbox >= 1.0.0
 
*/
class LuaSandboxErrorError extends LuaSandboxFatalError {}

/**
* <div id="class.luasandboxmemoryerror" class="reference"> <h1 class="title">The LuaSandboxMemoryError class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandboxmemoryerror.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown when Lua cannot allocate memory.   </p>  </div>  <div class="section" id="luasandboxmemoryerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandboxMemoryError</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.luasandboxfatalerror.php" class="classname">LuaSandboxFatalError</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div>  <div class="section" id="luasandboxmemoryerror.seealso">   <h2 class="title">参见</h2>   <p class="para">    </p><ul class="simplelist">     <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setMemoryLimit()}</span></li>    </ul>     </div> </div> </div>
*
 * Exception thrown when Lua cannot allocate memory.
 *
 * @since luasandbox >= 1.0.0
 * @see LuaSandbox::setMemoryLimit()
 
*/
class LuaSandboxMemoryError extends LuaSandboxFatalError {}

/**
* <div id="class.luasandboxsyntaxerror" class="reference"> <h1 class="title">The LuaSandboxSyntaxError class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandboxsyntaxerror.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown when Lua code cannot be parsed.   </p>  </div>  <div class="section" id="luasandboxsyntaxerror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandboxSyntaxError</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.luasandboxfatalerror.php" class="classname">LuaSandboxFatalError</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div> </div> </div>
*
 * Exception thrown when Lua code cannot be parsed.
 *
 * @since luasandbox >= 1.0.0
 
*/
class LuaSandboxSyntaxError extends LuaSandboxFatalError {}

/**
* <div id="class.luasandboxtimeouterror" class="reference"> <h1 class="title">The LuaSandboxTimeoutError class</h1>  <div class="partintro"><p class="verinfo">(PECL luasandbox &gt;= 1.0.0)</p>  <div class="section" id="luasandboxtimeouterror.intro">   <h2 class="title">简介</h2>   <p class="para">    Exception thrown when the configured CPU time limit is exceeded.   </p>  </div>  <div class="section" id="luasandboxtimeouterror.synopsis">   <h2 class="title">类摘要</h2>   <div class="classsynopsis">    <span class="ooclass"><strong class="classname"></strong></span>    <div class="classsynopsisinfo">     <span class="ooclass">      <span class="modifier">class</span> <strong class="classname">LuaSandboxTimeoutError</strong>     </span>     <span class="ooclass">      <span class="modifier">extends</span>       <a href="https://php.net/manual/zh/class.luasandboxfatalerror.php" class="classname">LuaSandboxFatalError</a>     </span>     {</div>    <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的属性 </div>    <div class="fieldsynopsis">     <span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.message">$<var class="varname">message</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.string">$<var class="varname">string</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.code">$<var class="varname">code</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.file">$<var class="varname">file</var></a></var><span class="initializer"> = ""</span>;</div><div class="fieldsynopsis"><span class="modifier">protected</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.line">$<var class="varname">line</var></a></var>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.trace">$<var class="varname">trace</var></a></var><span class="initializer"> = []</span>;</div><div class="fieldsynopsis"><span class="modifier">private</span>     <span class="type" style="color:#EAB766">?</span><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span><span class="type" style="color:#EAB766"></span></span>      <var class="varname"><a href="https://php.net/manual/zh/class.exception.php#exception.props.previous">$<var class="varname">previous</var></a></var><span class="initializer"> = null</span>;</div>        <div class="classsynopsisinfo classsynopsisinfo_comment">// 继承的方法 </div>    <div class="methodsynopsis dc-description">   <span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getMessage}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getPrevious}</span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/class.throwable.php" class="type Throwable" style="color:#EAB766">Throwable</a></span></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getCode}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getFile}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getLine}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTrace}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">final</span> <span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::getTraceAsString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">public</span> <span class="methodname" style="color:#CC7832">{@link Exception::__toString}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div><div class="methodsynopsis dc-description"><span class="modifier">private</span> <span class="methodname" style="color:#CC7832">{@link Exception::__clone}</span>(): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>   }</div>  </div>  <div class="section" id="luasandboxtimeouterror.seealso">   <h2 class="title">参见</h2>   <p class="para">    </p><ul class="simplelist">     <li><span class="methodname" style="color:#CC7832">{@link LuaSandbox::setCPULimit()}</span></li>    </ul>     </div> </div> </div>
*
 * Exception thrown when the configured CPU time limit is exceeded.
 *
 * @since luasandbox >= 1.0.0
 * @see LuaSandbox::setCPULimit()
 
*/
class LuaSandboxTimeoutError extends LuaSandboxFatalError {}
