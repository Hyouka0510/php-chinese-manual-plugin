<?php

use JetBrains\PhpStorm\ArrayShape;
use JetBrains\PhpStorm\Internal\LanguageLevelTypeAware;
use JetBrains\PhpStorm\Internal\PhpStormStubsElementAvailable;
use JetBrains\PhpStorm\Internal\ReturnTypeContract as TypeContract;
use JetBrains\PhpStorm\Pure;

/**
 * <div id="function.nl-langinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">nl_langinfo</h1>  <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">nl_langinfo</span> — <span class="dc-title">Query language and locale information</span></p> </div> <div class="refsect1 description" id="refsect1-function.nl-langinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>nl_langinfo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$item</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>nl_langinfo()</strong></span> is used to access individual elements of   the locale categories.  Unlike <span class="function">{@link localeconv()}</span>, which   returns all of the elements, <span class="function"><strong>nl_langinfo()</strong></span> allows you   to select any specific element.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.nl-langinfo-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">item</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">item</span> may be an integer value of the element or the       constant name of the element. The following is a list of constant names       for <span class="parameter" style="color:#3A95FF">item</span> that may be used and their description.       Some of these constants may not be defined or hold no value for certain       locales.       </p><table class="doctable table">        <caption><strong>nl_langinfo Constants</strong></caption>                 <col>         <col>         <thead>          <tr>           <th>Constant</th>           <th>Description</th>          </tr>         </thead>         <tbody class="tbody">          <tr>           <td colspan="2" style="text-align: center;"><em><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.lc-time">LC_TIME</a></span></strong> Category Constants</em></td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.abday-1">ABDAY_<span class="replaceable">(1-7)</span></a></span></strong></td>           <td>Abbreviated name of n-th day of the week.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.day-1">DAY_<span class="replaceable">(1-7)</span></a></span></strong></td>           <td>Name of the n-th day of the week (DAY_1 = Sunday).</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.abmon-1">ABMON_<span class="replaceable">(1-12)</span></a></span></strong></td>           <td>Abbreviated name of the n-th month of the year.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.mon-1">MON_<span class="replaceable">(1-12)</span></a></span></strong></td>           <td>Name of the n-th month of the year.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.am-str">AM_STR</a></span></strong></td>           <td>String for Ante meridian.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.pm-str">PM_STR</a></span></strong></td>           <td>String for Post meridian.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.d-t-fmt">D_T_FMT</a></span></strong></td>           <td>String that can be used as the format string for <span class="function">{@link strftime()}</span> to represent time and date.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.d-fmt">D_FMT</a></span></strong></td>           <td>String that can be used as the format string for <span class="function">{@link strftime()}</span> to represent date.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.t-fmt">T_FMT</a></span></strong></td>           <td>String that can be used as the format string for <span class="function">{@link strftime()}</span> to represent time.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.t-fmt-ampm">T_FMT_AMPM</a></span></strong></td>           <td>String that can be used as the format string for <span class="function">{@link strftime()}</span> to represent time in 12-hour format with ante/post meridian.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.era">ERA</a></span></strong></td>           <td>Alternate era.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.era-year">ERA_YEAR</a></span></strong></td>           <td>Year in alternate era format.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.era-d-t-fmt">ERA_D_T_FMT</a></span></strong></td>           <td>Date and time in alternate era format (string can be used in <span class="function">{@link strftime()}</span>).</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.era-d-fmt">ERA_D_FMT</a></span></strong></td>           <td>Date in alternate era format (string can be used in <span class="function">{@link strftime()}</span>).</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.era-t-fmt">ERA_T_FMT</a></span></strong></td>           <td>Time in alternate era format (string can be used in <span class="function">{@link strftime()}</span>).</td>          </tr>          <tr>           <td colspan="2" style="text-align: center;"><em><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.lc-monetary">LC_MONETARY</a></span></strong> Category Constants</em></td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.int-curr-symbol">INT_CURR_SYMBOL</a></span></strong></td>           <td>International currency symbol.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong></td>           <td>Local currency symbol.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.crncystr">CRNCYSTR</a></span></strong></td>           <td>Same value as <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong>.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.mon-decimal-point">MON_DECIMAL_POINT</a></span></strong></td>           <td>Decimal point character.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.mon-thousands-sep">MON_THOUSANDS_SEP</a></span></strong></td>           <td>Thousands separator (groups of three digits).</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.mon-grouping">MON_GROUPING</a></span></strong></td>           <td>Like <span class="literal">"grouping"</span> element.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.positive-sign">POSITIVE_SIGN</a></span></strong></td>           <td>Sign for positive values.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.negative-sign">NEGATIVE_SIGN</a></span></strong></td>           <td>Sign for negative values.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.int-frac-digits">INT_FRAC_DIGITS</a></span></strong></td>           <td>International fractional digits.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.frac-digits">FRAC_DIGITS</a></span></strong></td>           <td>Local fractional digits.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.p-cs-precedes">P_CS_PRECEDES</a></span></strong></td>           <td>Returns 1 if <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong> precedes a positive value.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.p-sep-by-space">P_SEP_BY_SPACE</a></span></strong></td>           <td>Returns 1 if a space separates <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong> from a positive value.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.n-cs-precedes">N_CS_PRECEDES</a></span></strong></td>           <td>Returns 1 if <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong> precedes a negative value.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.n-sep-by-space">N_SEP_BY_SPACE</a></span></strong></td>           <td>Returns 1 if a space separates <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong> from a negative value.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.p-sign-posn">P_SIGN_POSN</a></span></strong></td>           <td rowspan="2" style="vertical-align: middle;">            <ul class="itemizedlist">             <li class="listitem">              <span class="simpara">                Returns 0 if parentheses surround the quantity and <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong>.              </span>             </li>             <li class="listitem">              <span class="simpara">               Returns 1 if the sign string precedes the quantity and <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong>.              </span>             </li>             <li class="listitem">              <span class="simpara">               Returns 2 if the sign string follows the quantity and <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong>.              </span>             </li>             <li class="listitem">              <span class="simpara">               Returns 3 if the sign string immediately precedes the <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong>.              </span>             </li>             <li class="listitem">              <span class="simpara">               Returns 4 if the sign string immediately follows the <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.currency-symbol">CURRENCY_SYMBOL</a></span></strong>.              </span>             </li>            </ul>           </td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.n-sign-posn">N_SIGN_POSN</a></span></strong></td>          </tr>          <tr>           <td colspan="2" style="text-align: center;"><em><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.lc-numeric">LC_NUMERIC</a></span></strong> Category Constants</em></td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.decimal-point">DECIMAL_POINT</a></span></strong></td>           <td>Decimal point character.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.radixchar">RADIXCHAR</a></span></strong></td>           <td>Same value as <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.decimal-point">DECIMAL_POINT</a></span></strong>.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.thousands-sep">THOUSANDS_SEP</a></span></strong></td>           <td>Separator character for thousands (groups of three digits).</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.thousep">THOUSEP</a></span></strong></td>           <td>Same value as <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.thousands-sep">THOUSANDS_SEP</a></span></strong>.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.grouping">GROUPING</a></span></strong></td>           <td class="empty">&nbsp;</td>          </tr>          <tr>           <td colspan="2" style="text-align: center;"><em><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.lc-messages">LC_MESSAGES</a></span></strong> Category Constants</em></td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.yesexpr">YESEXPR</a></span></strong></td>           <td>Regex string for matching <span class="literal">"yes"</span> input.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.noexpr">NOEXPR</a></span></strong></td>           <td>Regex string for matching <span class="literal">"no"</span> input.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.yesstr">YESSTR</a></span></strong></td>           <td>Output string for <span class="literal">"yes"</span>.</td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.nostr">NOSTR</a></span></strong></td>           <td>Output string for <span class="literal">"no"</span>.</td>          </tr>          <tr>           <td colspan="2" style="text-align: center;"><em><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.lc-ctype">LC_CTYPE</a></span></strong> Category Constants</em></td>          </tr>          <tr>           <td><strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.codeset">CODESET</a></span></strong></td>           <td>Return a string with the name of the character encoding.</td>          </tr>         </tbody>               </table>           </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.nl-langinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the element as a string, or <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> if <span class="parameter" style="color:#3A95FF">item</span>   is not valid.  </p> </div> <div class="refsect1 examples" id="refsect1-function.nl-langinfo-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5065">    <p><strong>示例 #1 <span class="function"><strong>nl_langinfo()</strong></span> example</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">nl_langinfo</span><span style="color: #007700">(</span><span style="color: #9876AA">CODESET</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">nl_langinfo</span><span style="color: #007700">(</span><span style="color: #9876AA">YESEXPR</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">string(14)&nbsp;"ANSI_X3.4-1968"<br>string(5)&nbsp;"^[yY]"</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.nl-langinfo-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数未在 Windows 平台下实现。</span></p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.nl-langinfo-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link setlocale()} - 设置区域信息</span></li>    <li><span class="function">{@link localeconv()} - Get numeric formatting information</span></li>   </ul>   </div></div>
 * 
 * Query language and locale information
 * @link https://php.net/manual/zh/function.nl-langinfo.php
 * @param int $item <p>
 * item may be an integer value of the element or the
 * constant name of the element. The following is a list of constant names
 * for item that may be used and their description.
 * Some of these constants may not be defined or hold no value for certain
 * locales.</p>
 * nl_langinfo Constants
 * <table>
 * <tr valign="top">
 * <td>Constant</td>
 * <td>Description</td>
 * </tr>
 * <tr colspan="2" valign="top" bgcolor="silver">
 * <td >LC_TIME Category Constants</td>
 * </tr>
 * <tr valign="top">
 * <td>ABDAY_(1-7)</td>
 * <td>Abbreviated name of n-th day of the week.</td>
 * </tr>
 * <tr valign="top">
 * <td>DAY_(1-7)</td>
 * <td>Name of the n-th day of the week (DAY_1 = Sunday).</td>
 * </tr>
 * <tr valign="top">
 * <td>ABMON_(1-12)</td>
 * <td>Abbreviated name of the n-th month of the year.</td>
 * </tr>
 * <tr valign="top">
 * <td>MON_(1-12)</td>
 * <td>Name of the n-th month of the year.</td>
 * </tr>
 * <tr valign="top">
 * <td>AM_STR</td>
 * <td>String for Ante meridian.</td>
 * </tr>
 * <tr valign="top">
 * <td>PM_STR</td>
 * <td>String for Post meridian.</td>
 * </tr>
 * <tr valign="top">
 * <td>D_T_FMT</td>
 * <td>String that can be used as the format string for strftime to represent time and date.</td>
 * </tr>
 * <tr valign="top">
 * <td>D_FMT</td>
 * <td>String that can be used as the format string for strftime to represent date.</td>
 * </tr>
 * <tr valign="top">
 * <td>T_FMT</td>
 * <td>String that can be used as the format string for strftime to represent time.</td>
 * </tr>
 * <tr valign="top">
 * <td>T_FMT_AMPM</td>
 * <td>String that can be used as the format string for strftime to represent time in 12-hour format with ante/post meridian.</td>
 * </tr>
 * <tr valign="top">
 * <td>ERA</td>
 * <td>Alternate era.</td>
 * </tr>
 * <tr valign="top">
 * <td>ERA_YEAR</td>
 * <td>Year in alternate era format.</td>
 * </tr>
 * <tr valign="top">
 * <td>ERA_D_T_FMT</td>
 * <td>Date and time in alternate era format (string can be used in strftime).</td>
 * </tr>
 * <tr valign="top">
 * <td>ERA_D_FMT</td>
 * <td>Date in alternate era format (string can be used in strftime).</td>
 * </tr>
 * <tr valign="top">
 * <td>ERA_T_FMT</td>
 * <td>Time in alternate era format (string can be used in strftime).</td>
 * </tr>
 * <tr colspan="2" valign="top" bgcolor="silver">
 * <td>LC_MONETARY Category Constants</td>
 * </tr>
 * <tr valign="top">
 * <td>INT_CURR_SYMBOL</td>
 * <td>International currency symbol.</td>
 * </tr>
 * <tr valign="top">
 * <td>CURRENCY_SYMBOL</td>
 * <td>Local currency symbol.</td>
 * </tr>
 * <tr valign="top">
 * <td>CRNCYSTR</td>
 * <td>Same value as CURRENCY_SYMBOL.</td>
 * </tr>
 * <tr valign="top">
 * <td>MON_DECIMAL_POINT</td>
 * <td>Decimal point character.</td>
 * </tr>
 * <tr valign="top">
 * <td>MON_THOUSANDS_SEP</td>
 * <td>Thousands separator (groups of three digits).</td>
 * </tr>
 * <tr valign="top">
 * <td>MON_GROUPING</td>
 * <td>Like "grouping" element.</td>
 * </tr>
 * <tr valign="top">
 * <td>POSITIVE_SIGN</td>
 * <td>Sign for positive values.</td>
 * </tr>
 * <tr valign="top">
 * <td>NEGATIVE_SIGN</td>
 * <td>Sign for negative values.</td>
 * </tr>
 * <tr valign="top">
 * <td>INT_FRAC_DIGITS</td>
 * <td>International fractional digits.</td>
 * </tr>
 * <tr valign="top">
 * <td>FRAC_DIGITS</td>
 * <td>Local fractional digits.</td>
 * </tr>
 * <tr valign="top">
 * <td>P_CS_PRECEDES</td>
 * <td>Returns 1 if CURRENCY_SYMBOL precedes a positive value.</td>
 * </tr>
 * <tr valign="top">
 * <td>P_SEP_BY_SPACE</td>
 * <td>Returns 1 if a space separates CURRENCY_SYMBOL from a positive value.</td>
 * </tr>
 * <tr valign="top">
 * <td>N_CS_PRECEDES</td>
 * <td>Returns 1 if CURRENCY_SYMBOL precedes a negative value.</td>
 * </tr>
 * <tr valign="top">
 * <td>N_SEP_BY_SPACE</td>
 * <td>Returns 1 if a space separates CURRENCY_SYMBOL from a negative value.</td>
 * </tr>
 * <tr valign="top">
 * <td>P_SIGN_POSN</td>
 * <td>Returns 0 if parentheses surround the quantity and CURRENCY_SYMBOL.</td>
 * </tr>
 * </table>
 * @return string|false the element as a string, or false if item
 * is not valid.
 */
#[Pure(true)]
function nl_langinfo(int $item): string|false {}

/**
 * <div id="function.soundex" class="refentry"> <div class="refnamediv">  <h1 class="refname">soundex</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">soundex</span> — <span class="dc-title">Calculate the soundex key of a string</span></p> </div>  <div class="refsect1 description" id="refsect1-function.soundex-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>soundex</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   Calculates the soundex key of <span class="parameter" style="color:#3A95FF">string</span>.  </p>  <p class="para">   Soundex keys have the property that words pronounced similarly   produce the same soundex key, and can thus be used to simplify   searches in databases where you know the pronunciation but not   the spelling.  </p>  <p class="para">   This particular soundex function is one described by Donald Knuth   in "The Art Of Computer Programming, vol. 3: Sorting And   Searching", Addison-Wesley (1973), pp. 391-392.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.soundex-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       The input string.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.soundex-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the soundex key as a <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> with four characters.   If at least one letter is contained in <span class="parameter" style="color:#3A95FF">string</span>, the returned   string starts with a letter. Otherwise <span class="literal">"0000"</span> is returned.  </p> </div> <div class="refsect1 changelog" id="refsect1-function.soundex-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       Prior to this version, calling the function with an empty string returned <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>       for no particular reason.      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.soundex-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5087">    <p><strong>示例 #1 Soundex Examples</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Euler"</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">, </span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Ellery"</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Euler"</span><span style="color: #007700">)       == </span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Ellery"</span><span style="color: #007700">);    </span><span style="color: #FF8000">// E460<br></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Gauss"</span><span style="color: #007700">)       == </span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Ghosh"</span><span style="color: #007700">);     </span><span style="color: #FF8000">// G200<br></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Hilbert"</span><span style="color: #007700">)     == </span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Heilbronn"</span><span style="color: #007700">); </span><span style="color: #FF8000">// H416<br></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Knuth"</span><span style="color: #007700">)       == </span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Kant"</span><span style="color: #007700">);      </span><span style="color: #FF8000">// K530<br></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Lloyd"</span><span style="color: #007700">)       == </span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Ladd"</span><span style="color: #007700">);      </span><span style="color: #FF8000">// L300<br></span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Lukasiewicz"</span><span style="color: #007700">) == </span><span style="color: #9876AA">soundex</span><span style="color: #007700">(</span><span style="color: #DD0000">"Lissajous"</span><span style="color: #007700">); </span><span style="color: #FF8000">// L222<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.soundex-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link levenshtein()} - 计算两个字符串之间的 Levenshtein 距离</span></li>    <li><span class="function">{@link metaphone()} - Calculate the metaphone key of a string</span></li>    <li><span class="function">{@link similar_text()} - 计算两个字符串的相似度</span></li>   </ul>   </div></div>
 * 
 * Calculate the soundex key of a string
 * @link https://php.net/manual/zh/function.soundex.php
 * @param string $string <p>
 * The input string.
 * </p>
 * @return string the soundex key as a string.
 */
#[Pure]
function soundex(string $string): string {}

/**
 * <div id="function.levenshtein" class="refentry"> <div class="refnamediv">  <h1 class="refname">levenshtein</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">levenshtein</span> — <span class="dc-title">计算两个字符串之间的 Levenshtein 距离</span></p> </div>  <div class="refsect1 description" id="refsect1-function.levenshtein-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>levenshtein</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string2</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$insertion_cost</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$replacement_cost</span><span class="initializer"> = 1</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$deletion_cost</span><span class="initializer"> = 1</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   Levenshtein 距离，是指两个字串之间，通过替换、插入、删除等操作将字符串 <span class="parameter" style="color:#3A95FF">string1</span> 转换成 <span class="parameter" style="color:#3A95FF">string2</span>   所需要操作的最少字符数量。该算法的复杂度是 <span class="literal">O(m*n)</span>，其中 <span class="literal">n</span> 和 <span class="literal">m</span> 分别是   <span class="parameter" style="color:#3A95FF">string1</span> 和 <span class="parameter" style="color:#3A95FF">string2</span> 的长度 （当和算法复杂度为 <span class="literal">O(max(n,m)**3)</span>   的 <span class="function">{@link similar_text()}</span> 相比时，此函数还是相当不错的，尽管仍然很耗时）。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">insertion_cost</span>、<span class="parameter" style="color:#3A95FF">replacement_cost</span> 和/或   <span class="parameter" style="color:#3A95FF">deletion_cost</span> 不等于 <span class="literal">1</span>，则算法选择应用于最简便的算法。如果   <span class="code">\$insertion_cost + \$deletion_cost &lt; \$replacement_cost</span>，则不会替换，而是插入和删除。  </p> </div><div class="refsect1 parameters" id="refsect1-function.levenshtein-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string1</span></dt>     <dd>      <p class="para">       求编辑距离中的其中一个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">string2</span></dt>     <dd>      <p class="para">       求编辑距离中的另一个字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">insertion_cost</span></dt>     <dd>      <p class="para">       定义插入次数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">replacement_cost</span></dt>     <dd>      <p class="para">       定义替换次数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">deletion_cost</span></dt>     <dd>      <p class="para">       定义删除次数。      </p>     </dd>       </dl>   </div>  <div class="refsect1 returnvalues" id="refsect1-function.levenshtein-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   此函数返回两个字符串参数之间的 Levenshtein 距离。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.levenshtein-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       在此版本之前，必须使用两个或者五个参数调用 <span class="function"><strong>levenshtein()</strong></span>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       在此版本之前，如果某个参数字符串的长度超过 255 个字符，则 <span class="function"><strong>levenshtein()</strong></span> 将会返回 <span class="literal">-1</span>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.levenshtein-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5056">    <p><strong>示例 #1 <span class="function"><strong>levenshtein()</strong></span> 例子：</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 输入拼写错误的单词<br></span><span style="color: #9876AA">\$input </span><span style="color: #007700">= </span><span style="color: #DD0000">'carrrot'</span><span style="color: #007700">;<br><br></span><span style="color: #FF8000">// 要检查的单词数组<br></span><span style="color: #9876AA">\$words  </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,</span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">,</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">,</span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,<br>                </span><span style="color: #DD0000">'radish'</span><span style="color: #007700">,</span><span style="color: #DD0000">'carrot'</span><span style="color: #007700">,</span><span style="color: #DD0000">'pea'</span><span style="color: #007700">,</span><span style="color: #DD0000">'bean'</span><span style="color: #007700">,</span><span style="color: #DD0000">'potato'</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// 目前没有找到最短距离<br></span><span style="color: #9876AA">\$shortest </span><span style="color: #007700">= -</span><span style="color: #9876AA">1</span><span style="color: #007700">;<br><br></span><span style="color: #FF8000">// 遍历单词来找到最接近的<br></span><span style="color: #007700">foreach (</span><span style="color: #9876AA">\$words </span><span style="color: #007700">as </span><span style="color: #9876AA">\$word</span><span style="color: #007700">) {<br><br>    </span><span style="color: #FF8000">// 计算输入单词与当前单词的距离<br>    </span><span style="color: #9876AA">\$lev </span><span style="color: #007700">= </span><span style="color: #9876AA">levenshtein</span><span style="color: #007700">(</span><span style="color: #9876AA">\$input</span><span style="color: #007700">, </span><span style="color: #9876AA">\$word</span><span style="color: #007700">);<br><br>    </span><span style="color: #FF8000">// 检查完全的匹配<br>    </span><span style="color: #007700">if (</span><span style="color: #9876AA">\$lev </span><span style="color: #007700">== </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br><br>        </span><span style="color: #FF8000">// 最接近的单词是这个（完全匹配）<br>        </span><span style="color: #9876AA">\$closest </span><span style="color: #007700">= </span><span style="color: #9876AA">\$word</span><span style="color: #007700">;<br>        </span><span style="color: #9876AA">\$shortest </span><span style="color: #007700">= </span><span style="color: #9876AA">0</span><span style="color: #007700">;<br><br>        </span><span style="color: #FF8000">// 退出循环；我们已经找到一个完全的匹配<br>        </span><span style="color: #007700">break;<br>    }<br><br>    </span><span style="color: #FF8000">// 如果此次距离比上次找到的要短<br>    // 或者还没找到接近的单词<br>    </span><span style="color: #007700">if (</span><span style="color: #9876AA">\$lev </span><span style="color: #007700">&lt;= </span><span style="color: #9876AA">\$shortest </span><span style="color: #007700">|| </span><span style="color: #9876AA">\$shortest </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br>        </span><span style="color: #FF8000">// 设置最接近的匹配以及它的最短距离<br>        </span><span style="color: #9876AA">\$closest  </span><span style="color: #007700">= </span><span style="color: #9876AA">\$word</span><span style="color: #007700">;<br>        </span><span style="color: #9876AA">\$shortest </span><span style="color: #007700">= </span><span style="color: #9876AA">\$lev</span><span style="color: #007700">;<br>    }<br>}<br><br>echo </span><span style="color: #DD0000">"Input word: </span><span style="color: #9876AA">\$input</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br>if (</span><span style="color: #9876AA">\$shortest </span><span style="color: #007700">== </span><span style="color: #9876AA">0</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"Exact match found: </span><span style="color: #9876AA">\$closest</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br>} else {<br>    echo </span><span style="color: #DD0000">"Did you mean: </span><span style="color: #9876AA">\$closest</span><span style="color: #DD0000">?\n"</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">Input&nbsp;word:&nbsp;carrrot<br>Did&nbsp;you&nbsp;mean:&nbsp;carrot?</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.levenshtein-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link soundex()} - Calculate the soundex key of a string</span></li>    <li><span class="function">{@link similar_text()} - 计算两个字符串的相似度</span></li>    <li><span class="function">{@link metaphone()} - Calculate the metaphone key of a string</span></li>   </ul>   </div></div>
 * 
 * Calculate Levenshtein distance between two strings
 * @link https://php.net/manual/zh/function.levenshtein.php
 * Note: In its simplest form the function will take only the two strings
 * as parameter and will calculate just the number of insert, replace and
 * delete operations needed to transform str1 into str2.
 * Note: A second variant will take three additional parameters that define
 * the cost of insert, replace and delete operations. This is more general
 * and adaptive than variant one, but not as efficient.
 * @param string $string1 <p>
 * One of the strings being evaluated for Levenshtein distance.
 * </p>
 * @param string $string2 <p>
 * One of the strings being evaluated for Levenshtein distance.
 * </p>
 * @param int $insertion_cost [optional] <p>
 * Defines the cost of insertion.
 * </p>
 * @param int $replacement_cost [optional] <p>
 * Defines the cost of replacement.
 * </p>
 * @param int $deletion_cost [optional] <p>
 * Defines the cost of deletion.
 * </p>
 * @return int This function returns the Levenshtein-Distance between the
 * two argument strings or -1, if one of the argument strings
 * is longer than the limit of 255 characters.
 */
function levenshtein(string $string1, string $string2, int $insertion_cost = 1, int $replacement_cost = 1, int $deletion_cost = 1): int {}

/**
 * <div id="function.chr" class="refentry"> <div class="refnamediv">  <h1 class="refname">chr</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">chr</span> — <span class="dc-title">从数字生成单字节字符串</span></p> </div>  <div class="refsect1 description" id="refsect1-function.chr-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>chr</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$codepoint</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   返回单字符字符串，包含将 <span class="parameter" style="color:#3A95FF">codepoint</span> 作为无符号整数解释的指定字符。  </p>  <p class="para">   这可用于在一种单字节编码（像是 ASCII、ISO-8859 或 Windows   1252）中通过传递想要的字符在编码映射表中的位置来创建单字符字符串。但是，注意此函数并不清楚任何字符串编码，特别是无法通过传递一个    Unicode 码位值来生成多字节编码（像是 UTF-8 或 UTF-16）字符串。  </p>  <p class="para">   此函数与 <span class="function">{@link ord()}</span> 互补。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.chr-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">codepoint</span></dt>     <dd>      <p class="para">       一个介于 0 与 255 之间的整数。      </p>      <p class="para">       超过有效范围（0..255）的值将和 255“按位与”，与以下算法等效：       </p><div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000">while (\$bytevalue &lt; 0) {<br>    \$bytevalue += 256;<br>}<br>\$bytevalue %= 256;</span></blockquote></div>       </div>           </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.chr-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   包含指定字节的单字符字符串。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.chr-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.4.0</td>      <td>       此函数不再静默接受不支持的 <span class="parameter" style="color:#3A95FF">codepoint</span>，并会将它们转为 <span class="literal">0</span>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.chr-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5029">    <p><strong>示例 #1 <span class="function"><strong>chr()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 假设该字符串将被作为 ASCII 或是一个与 ASCII 兼容的编码使用<br><br></span><span style="color: #9876AA">\$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"The string ends in escape: "</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$str </span><span style="color: #007700">.= </span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">27</span><span style="color: #007700">); </span><span style="color: #FF8000">// 在 \$str 末尾添加一个转义字符 <br></span><span style="color: #007700">echo </span><span style="color: #9876AA">\$str</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br><br></span><span style="color: #FF8000">// 通常这样更有用 <br></span><span style="color: #9876AA">\$str </span><span style="color: #007700">= </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"The string ends in escape: %c"</span><span style="color: #007700">, </span><span style="color: #9876AA">27</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$str</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5030">    <p><strong>示例 #2 溢出行为</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">chr</span><span style="color: #007700">(-</span><span style="color: #9876AA">159</span><span style="color: #007700">), </span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">833</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">aA</blockquote></div>    </div>   </div>    <p class="para">    </p><div class="example" id="example-5031">    <p><strong>示例 #3 从单个字节构建 UTF-8 字符串</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$str </span><span style="color: #007700">= </span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">240</span><span style="color: #007700">) . </span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">159</span><span style="color: #007700">) . </span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">144</span><span style="color: #007700">) . </span><span style="color: #9876AA">chr</span><span style="color: #007700">(</span><span style="color: #9876AA">152</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$str</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><br>🐘<br>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.chr-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link sprintf()} - 返回格式化字符串</span> 如何使用格式字符串 <span class="literal">%c</span></li>    <li><span class="function">{@link ord()} - 转换字符串第一个字节为 0-255 之间的值</span></li>    <li>一个 <a href="https://www.man7.org/linux/man-pages/man7/ascii.7.html" class="link external">»&nbsp;ASCII 表</a></li>    <li><span class="function">{@link mb_chr()} - 按 Unicode 码位值返回字符</span></li>    <li><span class="function">{@link IntlChar::chr()} - Return Unicode character by code point value</span></li>   </ul>   </div></div>
 * 
 * Generate a single-byte string from a number
 * @link https://php.net/manual/zh/function.chr.php
 * @param int $codepoint <p>
 * The ascii code.
 * </p>
 * @return string the specified character.
 */
#[Pure]
function chr(int $codepoint): string {}

/**
 * <div id="function.ord" class="refentry"> <div class="refnamediv">  <h1 class="refname">ord</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">ord</span> — <span class="dc-title">转换字符串第一个字节为 0-255 之间的值</span></p> </div>  <div class="refsect1 description" id="refsect1-function.ord-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>ord</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$character</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   解析 <span class="parameter" style="color:#3A95FF">character</span> 二进制值第一个字节为 0 到 255 范围的无符号整型类型。  </p>  <p class="para">   如果字符串是 ASCII、 ISO-8859、Windows 1252之类单字节编码，就等于返回该字符在字符集编码表中的位置。   但请注意，本函数不会去检测字符串的编码，尤其是不会识别类似 UTF-8 或 UTF-16 这种多字节字符的 Unicode 代码点（code point）。  </p>  <p class="para">   该函数是 <span class="function">{@link chr()}</span> 的互补函数。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.ord-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">character</span></dt>     <dd>      <p class="para">       一个字符。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.ord-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回 0 - 255 的整型值。  </p> </div> <div class="refsect1 examples" id="refsect1-function.ord-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5071">    <p><strong>示例 #1 <span class="function"><strong>ord()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>if (</span><span style="color: #9876AA">ord</span><span style="color: #007700">(</span><span style="color: #9876AA">\$str</span><span style="color: #007700">) == </span><span style="color: #9876AA">10</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">"The first character of \\$str is a line feed.\n"</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>  <p class="para">    </p><div class="example" id="example-5072">    <p><strong>示例 #2 检查 UTF-8 字符串的每一个字节</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"🐘"</span><span style="color: #007700">;<br>for ( </span><span style="color: #9876AA">\$pos</span><span style="color: #007700">=</span><span style="color: #9876AA">0</span><span style="color: #007700">; </span><span style="color: #9876AA">\$pos </span><span style="color: #007700">&lt; </span><span style="color: #9876AA">strlen</span><span style="color: #007700">(</span><span style="color: #9876AA">\$str</span><span style="color: #007700">); </span><span style="color: #9876AA">\$pos </span><span style="color: #007700">++ ) {<br> </span><span style="color: #9876AA">\$byte </span><span style="color: #007700">= </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">\$str</span><span style="color: #007700">, </span><span style="color: #9876AA">\$pos</span><span style="color: #007700">);<br> echo </span><span style="color: #DD0000">'Byte ' </span><span style="color: #007700">. </span><span style="color: #9876AA">\$pos </span><span style="color: #007700">. </span><span style="color: #DD0000">' of \$str has value ' </span><span style="color: #007700">. </span><span style="color: #9876AA">ord</span><span style="color: #007700">(</span><span style="color: #9876AA">\$byte</span><span style="color: #007700">) . </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><br>Byte 0 of \$str has value 240<br>Byte 1 of \$str has value 159<br>Byte 2 of \$str has value 144<br>Byte 3 of \$str has value 152<br>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.ord-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link chr()} - 从数字生成单字节字符串</span></li>    <li><a href="https://www.man7.org/linux/man-pages/man7/ascii.7.html" class="link external">»&nbsp;ASCII 码表</a></li>    <li><span class="function">{@link mb_ord()} - 获取字符的 Unicode 码位值</span></li>    <li><span class="function">{@link IntlChar::ord()} - Return Unicode code point value of character</span></li>   </ul>   </div></div>
 * 
 * Convert the first byte of a string to a value between 0 and 255
 * @link https://php.net/manual/zh/function.ord.php
 * @param string $character <p>
 * A character.
 * </p>
 * @return int<0, 255> the ASCII value as an integer.
 */
#[Pure]
function ord(string $character): int {}

/**
 * <div id="function.parse-str" class="refentry"> <div class="refnamediv">  <h1 class="refname">parse_str</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">parse_str</span> — <span class="dc-title">解析 URL 查询字符串</span></p> </div>  <div class="refsect1 description" id="refsect1-function.parse-str-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>parse_str</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$result</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.void.php" class="type void" style="color:#EAB766">void</a></span></div>  <p class="para rdfs-comment">   如果 <span class="parameter" style="color:#3A95FF">string</span> 是通过 URL 传入的查询字符串，则将其解析，并将 key 设置到指定 <span class="parameter" style="color:#3A95FF">result</span>   数组中。如果未提供 <span class="parameter" style="color:#3A95FF">result</span> 数组，则会将值设置为当前作用域中的变量。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.parse-str-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">result</span></dt>     <dd>      <p class="para">       以引用方式传递的变量，该变量将设置为数组，包含从 <span class="parameter" style="color:#3A95FF">string</span> 中提取的 key-value       对。如果未传入 <span class="parameter" style="color:#3A95FF">result</span> 参数，则每个 key 都会在局部作用域中设置为单独的变量。      </p>      <div class="warning"><strong class="warning">警告</strong>       <p class="para">        极度<em>不建议</em>在没有 <span class="parameter" style="color:#3A95FF">result</span> 参数的情况下使用此函数，        并且在 PHP 7.2 中将<em>废弃</em>不设置参数的行为。PHP 8.0.0        起，<span class="parameter" style="color:#3A95FF">result</span> 参数是<em>强制的</em>。       </p>      </div>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.parse-str-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   没有返回值。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.parse-str-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">     <tr>        <td>8.0.0</td>        <td>         <span class="parameter" style="color:#3A95FF">result</span> 是必须项。        </td>       </tr>      <tr>       <td>7.2.0</td>       <td>        不带第二个参数的情况下使用 <span class="function"><strong>parse_str()</strong></span> 会产生         <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-deprecated">E_DEPRECATED</a></span></strong> 警告。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.parse-str-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5073">    <p><strong>示例 #1 <span class="function"><strong>parse_str()</strong></span> 的使用</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$str </span><span style="color: #007700">= </span><span style="color: #DD0000">"first=value&amp;arr[]=foo+bar&amp;arr[]=baz"</span><span style="color: #007700">;<br><br></span><span style="color: #FF8000">// 推荐用法<br></span><span style="color: #9876AA">parse_str</span><span style="color: #007700">(</span><span style="color: #9876AA">\$str</span><span style="color: #007700">, </span><span style="color: #9876AA">\$output</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$output</span><span style="color: #007700">[</span><span style="color: #DD0000">'first'</span><span style="color: #007700">], </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;  </span><span style="color: #FF8000">// value<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">\$output</span><span style="color: #007700">[</span><span style="color: #DD0000">'arr'</span><span style="color: #007700">][</span><span style="color: #9876AA">0</span><span style="color: #007700">], </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">; </span><span style="color: #FF8000">// foo bar<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">\$output</span><span style="color: #007700">[</span><span style="color: #DD0000">'arr'</span><span style="color: #007700">][</span><span style="color: #9876AA">1</span><span style="color: #007700">], </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">; </span><span style="color: #FF8000">// baz<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   在创建数组 key 或局部变量时，参数名中的「空格」和「点」均会转换为下划线。这是因为 PHP   变量名不允许包含空格或点号，即使按推荐方式使用 <span class="parameter" style="color:#3A95FF">result</span>   参数传递数组，此规则依然适用。   </p><div class="example" id="example-5074">    <p><strong>示例 #2 <span class="function"><strong>parse_str()</strong></span> 名称改写</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>parse_str</span><span style="color: #007700">(</span><span style="color: #DD0000">"My Value=Something"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$output</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$output</span><span style="color: #007700">[</span><span style="color: #DD0000">'My_Value'</span><span style="color: #007700">]; </span><span style="color: #FF8000">// Something<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    </div>  <div class="refsect1 notes" id="refsect1-function.parse-str-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    <span class="function"><strong>parse_str()</strong></span> 是受 <a href="https://php.net/manual/zh/info.configuration.php#ini.max-input-vars" class="link">max_input_vars</a>    指令影响的。超过这个限制会触发一个 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>，    超过限制的变量不会被添加到结果数组中。    默认值是 1000；根据需要调整 <a href="https://php.net/manual/zh/info.configuration.php#ini.max-input-vars" class="link">max_input_vars</a>。   </p>  </blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    填充到 <span class="parameter" style="color:#3A95FF">result</span> 数组中的所有值（如果未设置第二个参数，则为创建变量）均已按照与    <span class="function">{@link urldecode()}</span> 相同的规则进行了 URL 解码。   </p>  </blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    要获取当前请求的查询字符串，可以使用 <var class="varname"><a href="https://php.net/manual/zh/reserved.variables.server.php" class="classname">\$_SERVER['QUERY_STRING']</a></var> 变量。此外建议阅读<a href="https://php.net/manual/zh/language.variables.external.php" class="link">来自 PHP 之外的变量</a>的相关章节。   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.parse-str-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link parse_url()} - 解析 URL，返回其组成部分</span></li>    <li><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>    <li><span class="function">{@link http_build_query()} - 生成 URL-encode 之后的请求字符串</span></li>    <li><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>   </ul>   </div></div>
 * 
 * Parses the string into variables
 * @link https://php.net/manual/zh/function.parse-str.php
 * @param string $string <p>
 * The input string.
 * </p>
 * @param array &$result <p>
 * If the second parameter arr is present,
 * variables are stored in this variable as array elements instead.<br/>
 * Since 7.2.0 this parameter is not optional.
 * </p>
 * @return void
 */
function parse_str(
    string $string,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '7.4')] &$result = [],
    #[PhpStormStubsElementAvailable(from: '8.0')] &$result
): void {}

/**
 * <div id="function.str-getcsv" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_getcsv</h1>  <p class="verinfo">(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_getcsv</span> — <span class="dc-title">   解析 CSV 字符串为一个数组  </span></p> </div> <div class="refsect1 description" id="refsect1-function.str-getcsv-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_getcsv</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$separator</span><span class="initializer"> = ","</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$enclosure</span><span class="initializer"> = "\""</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$escape</span><span class="initializer"> = "\\"</span></span><br>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   以 <span>CSV</span> 字段格式解析字符串输入，并返回包含读取字段的数组。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    此函数会考虑区域设置。例如，如果 <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.lc-ctype">LC_CTYPE</a></span></strong> 为    <span class="literal">en_US.UTF-8</span>，可能会错误的解析某些单字节编码的数据。   </p>  </blockquote> </div> <div class="refsect1 parameters" id="refsect1-function.str-getcsv-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       待解析的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">separator</span></dt>     <dd>      <p class="para">       可选的 <span class="parameter" style="color:#3A95FF">separator</span> 参数，设置字段分隔符。必须是单字节字符。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">enclosure</span></dt>     <dd>      <p class="para">       可选的 <span class="parameter" style="color:#3A95FF">enclosure</span> 参数，设置字段环绕符。必须是单字节字符。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">escape</span></dt>     <dd>      <p class="para">       可选的 <span class="parameter" style="color:#3A95FF">escape</span>       参数，设置转义字符。必须是单字节字符或者空字符串。空字符串（<span class="literal">""</span>）禁用所有的转义机制。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        通常，在字段内，通过双倍的 <span class="parameter" style="color:#3A95FF">enclosure</span> 字符对其进行转义；但是可以使用        <span class="parameter" style="color:#3A95FF">escape</span> 字符作为替代。因此，对于默认参数值，<span class="literal">""</span> 和        <span class="literal">\"</span> 具有相同的含义。除了允许转义 <span class="parameter" style="color:#3A95FF">enclosure</span>        字符外，<span class="parameter" style="color:#3A95FF">escape</span> 字符没有特殊含义；甚至不打算转义自身。       </span>      </p></blockquote>      <div class="warning"><strong class="warning">警告</strong>       <p class="simpara">        从 PHP 8.4.0 开始，弃用依赖 <span class="parameter" style="color:#3A95FF">escape</span> 的默认值。需要通过位置或使用<a href="https://php.net/manual/zh/functions.arguments.php#functions.named-arguments" class="link">命名参数</a>明确提供。       </p>      </div>     </dd>       </dl>    <div class="warning"><strong class="warning">警告</strong><p class="simpara"> 当 <span class="parameter" style="color:#3A95FF">escape</span> 被设置为非空字符串（<span class="literal">""</span>）时， 可能导致生成的 CSV 不符合 <a href="https://datatracker.ietf.org/doc/html/rfc4180" class="link external">»&nbsp;RFC 4180</a> 的要求， 或者无法通过 PHP CSV 函数的往返处理。 <span class="parameter" style="color:#3A95FF">escape</span> 的默认值是 <span class="literal">"\\"</span>，因此建议显式地将其设置为空字符串。 默认值将在未来的 PHP 版本中更改，不早于 PHP 9.0。</p></div> </div> <div class="refsect1 returnvalues" id="refsect1-function.str-getcsv-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个包含读取到的字段的索引数组。  </p> </div> <div class="refsect1 errors" id="refsect1-function.str-getcsv-errors">  <h3 class="title">错误／异常</h3>  <p class="simpara">   如果 <span class="parameter" style="color:#3A95FF">separator</span> 或者 <span class="parameter" style="color:#3A95FF">enclosure</span>   长度不是一个字节，则抛出 <span class="exceptionname"><a href="https://php.net/manual/zh/class.valueerror.php" class="exceptionname">ValueError</a></span>。  </p>  <p class="simpara">   如果 <span class="parameter" style="color:#3A95FF">escape</span> 的长度不是一个字节或者为空字符串，则抛出 <span class="exceptionname"><a href="https://php.net/manual/zh/class.valueerror.php" class="exceptionname">ValueError</a></span>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.str-getcsv-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.4.0</td>       <td>        现在已弃用依赖 escape 的默认值。       </td>      </tr>      <tr>       <td>8.4.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">separator</span>、<span class="parameter" style="color:#3A95FF">enclosure</span>        或 <span class="parameter" style="color:#3A95FF">escape</span> 无效，现在会抛出 <span class="exceptionname"><a href="https://php.net/manual/zh/class.valueerror.php" class="exceptionname">ValueError</a></span>。这模仿了        <span class="function">{@link fgetcsv()}</span> 和 <span class="function">{@link fputcsv()}</span> 的行为。       </td>      </tr>      <tr>       <td>8.3.0</td>       <td>        如果最后一个字段仅包含未终止的 enclosure，则返回空字符串，而不是带有单个 NULL 字节的字符串。       </td>      </tr>      <tr>       <td>7.4.0</td>       <td>        <span class="parameter" style="color:#3A95FF">escape</span> 现在将空字符串视为禁用专有转义机制的信号。以前视为默认参数值。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.str-getcsv-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5105">    <p><strong>示例 #1 <span class="function"><strong>str_getcsv()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>\$string </span><span style="color: #007700">= </span><span style="color: #DD0000">'PHP,Java,Python,Kotlin,Swift'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$data </span><span style="color: #007700">= </span><span style="color: #9876AA">str_getcsv</span><span style="color: #007700">(</span><span style="color: #9876AA">\$string</span><span style="color: #007700">, </span><span style="color: #9876AA">escape</span><span style="color: #007700">: </span><span style="color: #DD0000">'\\'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$data</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">array(5)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;string(3)&nbsp;"PHP"<br>&nbsp;&nbsp;[1]=&gt;<br>&nbsp;&nbsp;string(4)&nbsp;"Java"<br>&nbsp;&nbsp;[2]=&gt;<br>&nbsp;&nbsp;string(6)&nbsp;"Python"<br>&nbsp;&nbsp;[3]=&gt;<br>&nbsp;&nbsp;string(6)&nbsp;"Kotlin"<br>&nbsp;&nbsp;[4]=&gt;<br>&nbsp;&nbsp;string(5)&nbsp;"Swift"<br>}</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-5106">    <p><strong>示例 #2 处理空字符串的 <span class="function"><strong>str_getcsv()</strong></span> 示例</strong></p>    <div class="caution"><strong class="caution">警告</strong>     <p class="simpara">      对于空字符串，此函数返回值 <span class="code">[null]</span> 从而代替空数组。     </p>    </div>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br>\$string </span><span style="color: #007700">= </span><span style="color: #DD0000">''</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$data </span><span style="color: #007700">= </span><span style="color: #9876AA">str_getcsv</span><span style="color: #007700">(</span><span style="color: #9876AA">\$string</span><span style="color: #007700">, </span><span style="color: #9876AA">escape</span><span style="color: #007700">: </span><span style="color: #DD0000">'\\'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">\$data</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">array(1)&nbsp;{<br>&nbsp;&nbsp;[0]=&gt;<br>&nbsp;&nbsp;NULL<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.str-getcsv-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="function">{@link fputcsv()} - 将行格式化为 CSV 并写入文件指针</span></li>   <li><span class="function">{@link fgetcsv()} - 从文件指针中读入一行并解析 CSV 字段</span></li>   <li><span class="methodname" style="color:#CC7832">{@link SplFileObject::fgetcsv()} - Gets line from file and parse as CSV fields</span></li>   <li><span class="methodname" style="color:#CC7832">{@link SplFileObject::fputcsv()} - Write a field array as a CSV line</span></li>   <li><span class="methodname" style="color:#CC7832">{@link SplFileObject::setCsvControl()} - Set the delimiter, enclosure and escape character for CSV</span></li>   <li><span class="methodname" style="color:#CC7832">{@link SplFileObject::getCsvControl()} - Get the delimiter, enclosure and escape character for CSV</span></li>  </ul> </div></div>
 * 
 * Parse a CSV string into an array
 * @link https://php.net/manual/zh/function.str-getcsv.php
 * @param string $string <p>
 * The string to parse.
 * </p>
 * @param string $separator [optional] <p>
 * Set the field delimiter (one character only).
 * </p>
 * @param string $enclosure [optional] <p>
 * Set the field enclosure character (one character only).
 * </p>
 * @param string $escape [optional] <p>
 * Set the escape character (one character only).
 * Defaults as a backslash (\)
 * </p>
 * @return array an indexed array containing the fields read.
 */
#[Pure]
function str_getcsv(string $string, string $separator = ",", string $enclosure = '"', string $escape = "\\"): array {}

/**
 * <div id="function.str-pad" class="refentry"> <div class="refnamediv">  <h1 class="refname">str_pad</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">str_pad</span> — <span class="dc-title">使用另一个字符串填充字符串为指定长度</span></p> </div>  <div class="refsect1 description" id="refsect1-function.str-pad-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>str_pad</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$length</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$pad_string</span><span class="initializer"> = " "</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$pad_type</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.str-pad-right">STR_PAD_RIGHT</a></span></strong></span></span><br>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   该函数返回 <span class="parameter" style="color:#3A95FF">string</span> 被从左端、右端或者同时两端被填充到制定长度后的结果。如果可选的 <span class="parameter" style="color:#3A95FF">pad_string</span>   参数没有被指定，<span class="parameter" style="color:#3A95FF">string</span> 将被空格字符填充，否则它将被 <span class="parameter" style="color:#3A95FF">pad_string</span> 填充到指定长度。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.str-pad-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       输入字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">length</span></dt>     <dd>      <p class="para">       填充字符串到最后的长度。       如果 <span class="parameter" style="color:#3A95FF">length</span> 的值是负数，小于或者等于输入字符串的长度，不会发生任何填充，并会返回 <span class="parameter" style="color:#3A95FF">string</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">pad_string</span></dt>     <dd>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        </p><p class="para">        如果填充字符的长度不能被 <span class="parameter" style="color:#3A95FF">pad_string</span> 整除，那么 <span class="parameter" style="color:#3A95FF">pad_string</span> 可能会被缩短。       </p>      </blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">pad_type</span></dt>     <dd>      <p class="para">       可选的 <span class="parameter" style="color:#3A95FF">pad_type</span> 参数的可能值为 <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.str-pad-right">STR_PAD_RIGHT</a></span></strong>，<strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.str-pad-left">STR_PAD_LEFT</a></span></strong> 或 <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.str-pad-both">STR_PAD_BOTH</a></span></strong>。如果没有指定 <span class="parameter" style="color:#3A95FF">pad_type</span>，则假定它是 <strong><span><a href="https://php.net/manual/zh/string.constants.php#constant.str-pad-right">STR_PAD_RIGHT</a></span></strong>。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.str-pad-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回填充后的字符串。  </p> </div> <div class="refsect1 examples" id="refsect1-function.str-pad-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5110">    <p><strong>示例 #1 <span class="function"><strong>str_pad()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$input </span><span style="color: #007700">= </span><span style="color: #DD0000">"Alien"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">\$input</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;                      </span><span style="color: #FF8000">// 输出 "Alien     "<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">\$input</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #DD0000">"-="</span><span style="color: #007700">, </span><span style="color: #9876AA">STR_PAD_LEFT</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;  </span><span style="color: #FF8000">// 输出 "-=-=-Alien"<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">\$input</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #DD0000">"_"</span><span style="color: #007700">, </span><span style="color: #9876AA">STR_PAD_BOTH</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;   </span><span style="color: #FF8000">// 输出 "__Alien___"<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">\$input</span><span style="color: #007700">,  </span><span style="color: #9876AA">6</span><span style="color: #007700">, </span><span style="color: #DD0000">"___"</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;               </span><span style="color: #FF8000">// 输出 "Alien_"<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">str_pad</span><span style="color: #007700">(</span><span style="color: #9876AA">\$input</span><span style="color: #007700">,  </span><span style="color: #9876AA">3</span><span style="color: #007700">, </span><span style="color: #DD0000">"*"</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;                 </span><span style="color: #FF8000">// 输出 "Alien"<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div>  <div class="refsect1 seealso" id="refsect1-function.str-pad-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link mb_str_pad()} - Pad a multibyte string to a certain length with another multibyte string</span></li>   </ul>   </div></div>
 * 
 * Pad a string to a certain length with another string
 * @link https://php.net/manual/zh/function.str-pad.php
 * @param string $string <p>
 * The input string.
 * </p>
 * @param int $length <p>
 * If the value of pad_length is negative,
 * less than, or equal to the length of the input string, no padding
 * takes place.
 * </p>
 * @param string $pad_string [optional] <p>
 * The pad_string may be truncated if the
 * required number of padding characters can't be evenly divided by the
 * pad_string's length.
 * </p>
 * @param int $pad_type [optional] <p>
 * Optional argument pad_type can be
 * STR_PAD_RIGHT, STR_PAD_LEFT,
 * or STR_PAD_BOTH. If
 * pad_type is not specified it is assumed to be
 * STR_PAD_RIGHT.
 * </p>
 * @return string the padded string.
 */
#[Pure]
function str_pad(string $string, int $length, string $pad_string = " ", int $pad_type = STR_PAD_RIGHT): string {}

/**
 * <div id="function.chop" class="refentry"> <div class="refnamediv">  <h1 class="refname">chop</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">chop</span> — <span class="dc-title"><span class="function">{@link rtrim()}</span> 的别名</span></p> </div> <div class="refsect1 description" id="refsect1-function.chop-description">  <h3 class="title">说明</h3>  <p class="simpara">   此函数是该函数的别名：<span class="function">{@link rtrim()}</span>。  </p> </div> <div class="refsect1 notes" id="refsect1-function.chop-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    <span class="function"><strong>chop()</strong></span> 与 Perl 的    <span class="literal">chop()</span> 函数有所不同，它会删除字符串的最后一个字符。   </p>  </blockquote> </div></div>
 * 
 * Alias:
 * {@see rtrim}
 * @param string $string The input string.
 * @param string $characters [optional]
 * @return string the modified string.
 * @link https://php.net/manual/zh/function.chop.php
 * @see rtrim()
 */
#[Pure]
function chop(string $string, string $characters = " \n\r\t\v\0"): string {}

/**
 * <div id="function.strchr" class="refentry"> <div class="refnamediv">  <h1 class="refname">strchr</h1>   <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">strchr</span> — <span class="dc-title">别名 <span class="function">{@link strstr()}</span></span></p> </div> <div class="refsect1 description" id="refsect1-function.strchr-description">  <h3 class="title">说明</h3>  <p class="simpara">   此函数是该函数的别名：   <span class="function">{@link strstr()}</span>.  </p> </div></div>
 * 
 * Alias:
 * {@see strstr}
 * @link https://php.net/manual/zh/function.strchr.php
 * Note: This function is case-sensitive. For case-insensitive searches, use stristr().
 * Note: If you only want to determine if a particular needle occurs within haystack,
 * use the faster and less memory intensive function strpos() instead.
 *
 * @param string $haystack The input string.
 * @param string $needle If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
 * @param bool $before_needle [optional] If TRUE, strstr() returns the part of the haystack before the first occurrence of the needle (excluding the needle).
 * @return string|false Returns the portion of string, or FALSE if needle is not found.
 */
#[Pure]
function strchr(string $haystack, string $needle, bool $before_needle = false): string|false {}

/**
 * <div id="function.sprintf" class="refentry"> <div class="refnamediv">  <h1 class="refname">sprintf</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">sprintf</span> — <span class="dc-title">返回格式化字符串</span></p> </div> <div class="refsect1 description" id="refsect1-function.sprintf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>sprintf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   返回一个根据格式化字符串 <span class="parameter" style="color:#3A95FF">format</span> 生成的字符串。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.sprintf-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>     <dt><span class="parameter" style="color:#3A95FF">format</span></dt> <dd>  <p class="para">   format 字符串通常由零或多个指令组成：普通字符（不包含   <span class="literal">%</span>）——直接复制到结果，<em>转换规范</em>——获取每个参数的结果。  </p>  <p class="para">   转换规范遵循此原型：   <span class="literal">%[argnum\$][flags][width][.precision]specifier</span>.  </p>  <p class="formalpara">   </p><h5 class="title">Argnum</h5>   <p class="para">    整数后跟美元符号 <span class="literal">\$</span>，用于指定转换中要处理的参数数量。   </p>    <p class="formalpara">   </p><h5 class="title">标志</h5>   <p class="para">    </p><table class="doctable informaltable">           <thead>       <tr>        <th>标志</th>        <th>说明</th>       </tr>      </thead>      <tbody class="tbody">       <tr>        <td><span class="literal">-</span></td>        <td>         在给定字段宽度内左对齐；右对齐是默认值        </td>       </tr>       <tr>        <td><span class="literal">+</span></td>        <td>         在给定字段宽度内为正数添加加号前缀         <span class="literal">+</span>；默认情况下，只有负数才会添加负号前缀。        </td>       </tr>       <tr>        <td><span class="literal"> </span>(space)</td>        <td>         用空格填充结果。         这是默认值。        </td>       </tr>       <tr>        <td><span class="literal">0</span></td>        <td>         仅对数字进行左侧零填充。         对于 <span class="literal">s</span> 说明符，也可以右侧用零填充。        </td>       </tr>       <tr>        <td><span class="literal">'</span>(char)</td>        <td>         用字符（char）填充结果。        </td>       </tr>      </tbody>         </table>       <p class="formalpara">   </p><h5 class="title">Width</h5>   <p class="para">    要么是整数，表示转换结果应该有多少个字符（最少），要么是 <span class="literal">*</span>。如果使用    <span class="literal">*</span>，那么宽度将作为额外的整数值提供，位于格式化符号之前。   </p>    <p class="formalpara">   </p><h5 class="title">Precision</h5>   <p class="para">    小数点 <span class="literal">.</span>，可选的后跟整数或者 <span class="literal">*</span>，其含义取决于格式化符号：    </p><ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       <span class="literal">e</span>、<span class="literal">E</span>、<span class="literal">f</span>、<span class="literal">F</span>       标志符：小数点后需要打印的位数（默认是 6）。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">g</span>、<span class="literal">G</span>、<span class="literal">h</span>、<span class="literal">H</span>       标志符：这是要打印的最大有效位数。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">s</span> 标志符：充当分界点，为字符串设置最大字符限制。      </span>     </li>    </ul>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <span class="simpara">      如果小数点没有明确的精度值，则假设是 0。如果使用 <span class="literal">*</span>，则精度将作为额外的整数值提供，位于格式化符号之前。     </span>    </p></blockquote>       <p class="para">   </p><table class="doctable table">    <caption><strong>标志符</strong></caption>         <thead>      <tr>       <th>标志符</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="literal">%</span></td>       <td>        字面意思的百分号字符。不需要参数。       </td>      </tr>      <tr>       <td><span class="literal">b</span></td>       <td>        参数视为整数并以二进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">c</span></td>       <td>        参数视为整数并以 ASCII 字符呈现。       </td>      </tr>      <tr>       <td><span class="literal">d</span></td>       <td>        参数视为整数并以（有符号）十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">e</span></td>       <td>        参数当做科学符号处理（例如 1.2e+2）。       </td>      </tr>      <tr>       <td><span class="literal">E</span></td>       <td>        与 <span class="literal">e</span> 标志符相同，但使用大写字母（例如 1.2E+2）。       </td>      </tr>      <tr>       <td><span class="literal">f</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">F</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（non-locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">g</span></td>       <td>        <p class="para">         通用格式。        </p>        <p class="para">         Let P equal the precision if nonzero, 6 if the precision is omitted,         or 1 if the precision is zero.         Then, if a conversion with style E would have an exponent of X:        </p>        <p class="para">         If P &gt; X ≥ −4, the conversion is with style f and precision P − (X + 1).         Otherwise, the conversion is with style e and precision P − 1.        </p>       </td>      </tr>      <tr>       <td><span class="literal">G</span></td>       <td>        Like the <span class="literal">g</span> specifier but uses        <span class="literal">E</span> and <span class="literal">f</span>.       </td>      </tr>      <tr>        <td><span class="literal">h</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses <span class="literal">F</span>.         Available as of PHP 8.0.0.        </td>       </tr>       <tr>        <td><span class="literal">H</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses         <span class="literal">E</span> and <span class="literal">F</span>. Available as of PHP 8.0.0.        </td>      </tr>      <tr>       <td><span class="literal">o</span></td>       <td>        参数视为整数并以八进制数字来呈现。       </td>      </tr>      <tr>       <td><span class="literal">s</span></td>       <td>        参数视为字符串来呈现。       </td>      </tr>      <tr>       <td><span class="literal">u</span></td>       <td>        参数视为整数并以无符号十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">x</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带小写字母）。       </td>      </tr>      <tr>       <td><span class="literal">X</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带大写字母）。       </td>      </tr>     </tbody>       </table>    <div class="warning"><strong class="warning">警告</strong>   <p class="para">    <span class="literal">c</span> 类型标志符忽略填充和宽度。   </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results.   </p>  </div>  <p class="para">   变量将会强制转换为适合标志符的类型：   </p><table class="doctable table">    <caption><strong>类型处理</strong></caption>         <thead>      <tr>       <th>类型</th>       <th>标志符</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>       <td><span class="literal">s</span></td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>       <td>        <span class="literal">d</span>,        <span class="literal">u</span>,        <span class="literal">c</span>,        <span class="literal">o</span>,        <span class="literal">x</span>,        <span class="literal">X</span>,        <span class="literal">b</span>       </td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span></td>       <td>        <span class="literal">e</span>,        <span class="literal">E</span>,        <span class="literal">f</span>,        <span class="literal">F</span>,        <span class="literal">g</span>,        <span class="literal">G</span>,        <span class="literal">h</span>,        <span class="literal">H</span>       </td>      </tr>     </tbody>       </table>   </dd>         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.sprintf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个根据格式化字符串 <span class="parameter" style="color:#3A95FF">format</span> 生成的字符串。  </p> </div> <div class="refsect1 errors" id="refsect1-function.sprintf-errors">  <h3 class="title">错误／异常</h3>    <p class="para">   从 PHP 8.0.0 开始，如果参数个数为零，将抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，当传递的参数少于所需的参数时会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>。在 PHP 8.0.0 之前，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 并发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.sprintf-changelog">  <h3 class="title">更新日志</h3>    <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数失败时不再返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果参数个数为零则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       当传递的参数少于所需的参数时抛出 <span class="classname"><a href="https://php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.sprintf-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-5088">   <p><strong>示例 #1 参数替换</strong></p>   <div class="example-contents"><p>    支持按顺序用参数替换格式字符串里的占位符。   </p></div>   <div class="example-contents">    <div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$num </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$location </span><span style="color: #007700">= </span><span style="color: #DD0000">'tree'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$format </span><span style="color: #007700">= </span><span style="color: #DD0000">'There are %d monkeys in the %s'</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$format</span><span style="color: #007700">, </span><span style="color: #9876AA">\$num</span><span style="color: #007700">, </span><span style="color: #9876AA">\$location</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">There&nbsp;are&nbsp;5&nbsp;monkeys&nbsp;in&nbsp;the&nbsp;tree</blockquote></div>   </div>  </div>  <p class="para">    假设，我们想把它国际化，在一个单独的文件中创建格式字符串，我们将它重写为：  </p>  <div class="example" id="example-5089">   <p><strong>示例 #2 错误的参数顺序</strong></p>   <div class="example-contents"><p>    格式字符串支持参数编号/交换。   </p></div>   <div class="example-contents">    <div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$num </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$location </span><span style="color: #007700">= </span><span style="color: #DD0000">'tree'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$format </span><span style="color: #007700">= </span><span style="color: #DD0000">'The %s contains %d monkeys'</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$format</span><span style="color: #007700">, </span><span style="color: #9876AA">\$num</span><span style="color: #007700">, </span><span style="color: #9876AA">\$location</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>  </div>  <p class="para">   我们现在有一个问题。   格式字符串中占位符的顺序与代码中参数的顺序不匹配。   我们希望保持代码原样，并在格式字符串中简单地指出占位符引用的参数。   我们可以这样写格式化字符串：  </p>  <div class="example" id="example-5090">   <p><strong>示例 #3 使用顺序占位符</strong></p>   <div class="example-contents">    <div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$num </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$location </span><span style="color: #007700">= </span><span style="color: #DD0000">'tree'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$format </span><span style="color: #007700">= </span><span style="color: #DD0000">'The %2\$s contains %1\$d monkeys'</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$format</span><span style="color: #007700">, </span><span style="color: #9876AA">\$num</span><span style="color: #007700">, </span><span style="color: #9876AA">\$location</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>  </div>  <p class="para">   另外一个好处是占位符可以重复使用，而无需在代码中添加更多参数。  </p>  <div class="example" id="example-5091">   <p><strong>示例 #4 重复占位符</strong></p>   <div class="example-contents">    <div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$num </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$location </span><span style="color: #007700">= </span><span style="color: #DD0000">'tree'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$format </span><span style="color: #007700">= </span><span style="color: #DD0000">'The %2\$s contains %1\$d monkeys.<br>           That\'s a nice %2\$s full of %1\$d monkeys.'</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$format</span><span style="color: #007700">, </span><span style="color: #9876AA">\$num</span><span style="color: #007700">, </span><span style="color: #9876AA">\$location</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>  </div>  <p class="para">   当使用参数替换时，<span class="literal">n\$</span>   <em>位置指示符</em> 必须紧跟在百分号（<span class="literal">%</span>）之后，在任何其他指示符之前，如下所示。  </p>  <div class="example" id="example-5092">   <p><strong>示例 #5 指定填充字符</strong></p>   <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%'.9d\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">123</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%'.09d\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">123</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">......123<br>000000123</blockquote></div>   </div>  </div>  <div class="example" id="example-5093">   <p><strong>示例 #6 位置说明符与其他说明符</strong></p>   <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$num </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$location </span><span style="color: #007700">= </span><span style="color: #DD0000">'tree'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$format </span><span style="color: #007700">= </span><span style="color: #DD0000">'The %2\$s contains %1\$04d monkeys'</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$format</span><span style="color: #007700">, </span><span style="color: #9876AA">\$num</span><span style="color: #007700">, </span><span style="color: #9876AA">\$location</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">The&nbsp;tree&nbsp;contains&nbsp;0005&nbsp;monkeys</blockquote></div>   </div>  </div>  <div class="example" id="example-5094">   <p><strong>示例 #7 <span class="function"><strong>sprintf()</strong></span>：零填充整数</strong></p>   <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$year </span><span style="color: #007700">= </span><span style="color: #9876AA">2005</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$month </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$day </span><span style="color: #007700">= </span><span style="color: #9876AA">6</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$isodate </span><span style="color: #007700">= </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$year</span><span style="color: #007700">, </span><span style="color: #9876AA">\$month</span><span style="color: #007700">, </span><span style="color: #9876AA">\$day</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$isodate</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>  </div>  <div class="example" id="example-5095">   <p><strong>示例 #8 <span class="function"><strong>sprintf()</strong></span>：货币格式</strong></p>   <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$money1 </span><span style="color: #007700">= </span><span style="color: #9876AA">68.75</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$money2 </span><span style="color: #007700">= </span><span style="color: #9876AA">54.35</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$money </span><span style="color: #007700">= </span><span style="color: #9876AA">\$money1 </span><span style="color: #007700">+ </span><span style="color: #9876AA">\$money2</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">\$money</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">\$formatted </span><span style="color: #007700">= </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%01.2f"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$money</span><span style="color: #007700">);<br>echo </span><span style="color: #9876AA">\$formatted</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">123.1<br>123.10</blockquote></div>   </div>  </div>  <div class="example" id="example-5096">   <p><strong>示例 #9 <span class="function"><strong>sprintf()</strong></span>：科学记数法</strong></p>   <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$number </span><span style="color: #007700">= </span><span style="color: #9876AA">362525200</span><span style="color: #007700">;<br><br>echo </span><span style="color: #9876AA">sprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%.3e"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$number</span><span style="color: #007700">), </span><span style="color: #9876AA">PHP_EOL</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">3.625e+8</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-function.sprintf-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link fprintf()} - 将格式化后的字符串写入到流</span></li>    <li><span class="function">{@link vprintf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link vfprintf()} - 将格式化字符串写入流</span></li>    <li><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>    <li><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    <li><span class="function">{@link date()} - 格式化 Unix 时间戳</span></li>   </ul>   </div></div>
 * 
 * Return a formatted string
 * @link https://php.net/manual/zh/function.sprintf.php
 * @param string $format <p>
 * The format string is composed of zero or more directives:
 * ordinary characters (excluding %) that are
 * copied directly to the result, and conversion
 * specifications, each of which results in fetching its
 * own parameter. This applies to both sprintf
 * and printf.
 * </p>
 * <p>
 * Each conversion specification consists of a percent sign
 * (%), followed by one or more of these
 * elements, in order:
 * An optional sign specifier that forces a sign
 * (- or +) to be used on a number. By default, only the - sign is used
 * on a number if it's negative. This specifier forces positive numbers
 * to have the + sign attached as well, and was added in PHP 4.3.0.</p>
 * @param string|int|float ...$values <p>
 * </p>
 * @return string a string produced according to the formatting string
 * format.
 */
#[Pure]
function sprintf(
    string $format,
    #[PhpStormStubsElementAvailable(from: '5.3', to: '5.6')] $values,
    mixed ...$values
): string {}

/**
 * <div id="function.printf" class="refentry"> <div class="refnamediv">  <h1 class="refname">printf</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">printf</span> — <span class="dc-title">输出格式化字符串</span></p> </div>  <div class="refsect1 description" id="refsect1-function.printf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>printf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="simpara">   依据 <span class="parameter" style="color:#3A95FF">format</span> 格式参数产生输出。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.printf-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>     <dt><span class="parameter" style="color:#3A95FF">format</span></dt> <dd>  <p class="para">   format 字符串通常由零或多个指令组成：普通字符（不包含   <span class="literal">%</span>）——直接复制到结果，<em>转换规范</em>——获取每个参数的结果。  </p>  <p class="para">   转换规范遵循此原型：   <span class="literal">%[argnum\$][flags][width][.precision]specifier</span>.  </p>  <p class="formalpara">   </p><h5 class="title">Argnum</h5>   <p class="para">    整数后跟美元符号 <span class="literal">\$</span>，用于指定转换中要处理的参数数量。   </p>    <p class="formalpara">   </p><h5 class="title">标志</h5>   <p class="para">    </p><table class="doctable informaltable">           <thead>       <tr>        <th>标志</th>        <th>说明</th>       </tr>      </thead>      <tbody class="tbody">       <tr>        <td><span class="literal">-</span></td>        <td>         在给定字段宽度内左对齐；右对齐是默认值        </td>       </tr>       <tr>        <td><span class="literal">+</span></td>        <td>         在给定字段宽度内为正数添加加号前缀         <span class="literal">+</span>；默认情况下，只有负数才会添加负号前缀。        </td>       </tr>       <tr>        <td><span class="literal"> </span>(space)</td>        <td>         用空格填充结果。         这是默认值。        </td>       </tr>       <tr>        <td><span class="literal">0</span></td>        <td>         仅对数字进行左侧零填充。         对于 <span class="literal">s</span> 说明符，也可以右侧用零填充。        </td>       </tr>       <tr>        <td><span class="literal">'</span>(char)</td>        <td>         用字符（char）填充结果。        </td>       </tr>      </tbody>         </table>       <p class="formalpara">   </p><h5 class="title">Width</h5>   <p class="para">    要么是整数，表示转换结果应该有多少个字符（最少），要么是 <span class="literal">*</span>。如果使用    <span class="literal">*</span>，那么宽度将作为额外的整数值提供，位于格式化符号之前。   </p>    <p class="formalpara">   </p><h5 class="title">Precision</h5>   <p class="para">    小数点 <span class="literal">.</span>，可选的后跟整数或者 <span class="literal">*</span>，其含义取决于格式化符号：    </p><ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       <span class="literal">e</span>、<span class="literal">E</span>、<span class="literal">f</span>、<span class="literal">F</span>       标志符：小数点后需要打印的位数（默认是 6）。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">g</span>、<span class="literal">G</span>、<span class="literal">h</span>、<span class="literal">H</span>       标志符：这是要打印的最大有效位数。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">s</span> 标志符：充当分界点，为字符串设置最大字符限制。      </span>     </li>    </ul>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <span class="simpara">      如果小数点没有明确的精度值，则假设是 0。如果使用 <span class="literal">*</span>，则精度将作为额外的整数值提供，位于格式化符号之前。     </span>    </p></blockquote>       <p class="para">   </p><table class="doctable table">    <caption><strong>标志符</strong></caption>         <thead>      <tr>       <th>标志符</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="literal">%</span></td>       <td>        字面意思的百分号字符。不需要参数。       </td>      </tr>      <tr>       <td><span class="literal">b</span></td>       <td>        参数视为整数并以二进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">c</span></td>       <td>        参数视为整数并以 ASCII 字符呈现。       </td>      </tr>      <tr>       <td><span class="literal">d</span></td>       <td>        参数视为整数并以（有符号）十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">e</span></td>       <td>        参数当做科学符号处理（例如 1.2e+2）。       </td>      </tr>      <tr>       <td><span class="literal">E</span></td>       <td>        与 <span class="literal">e</span> 标志符相同，但使用大写字母（例如 1.2E+2）。       </td>      </tr>      <tr>       <td><span class="literal">f</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">F</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（non-locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">g</span></td>       <td>        <p class="para">         通用格式。        </p>        <p class="para">         Let P equal the precision if nonzero, 6 if the precision is omitted,         or 1 if the precision is zero.         Then, if a conversion with style E would have an exponent of X:        </p>        <p class="para">         If P &gt; X ≥ −4, the conversion is with style f and precision P − (X + 1).         Otherwise, the conversion is with style e and precision P − 1.        </p>       </td>      </tr>      <tr>       <td><span class="literal">G</span></td>       <td>        Like the <span class="literal">g</span> specifier but uses        <span class="literal">E</span> and <span class="literal">f</span>.       </td>      </tr>      <tr>        <td><span class="literal">h</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses <span class="literal">F</span>.         Available as of PHP 8.0.0.        </td>       </tr>       <tr>        <td><span class="literal">H</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses         <span class="literal">E</span> and <span class="literal">F</span>. Available as of PHP 8.0.0.        </td>      </tr>      <tr>       <td><span class="literal">o</span></td>       <td>        参数视为整数并以八进制数字来呈现。       </td>      </tr>      <tr>       <td><span class="literal">s</span></td>       <td>        参数视为字符串来呈现。       </td>      </tr>      <tr>       <td><span class="literal">u</span></td>       <td>        参数视为整数并以无符号十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">x</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带小写字母）。       </td>      </tr>      <tr>       <td><span class="literal">X</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带大写字母）。       </td>      </tr>     </tbody>       </table>    <div class="warning"><strong class="warning">警告</strong>   <p class="para">    <span class="literal">c</span> 类型标志符忽略填充和宽度。   </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results.   </p>  </div>  <p class="para">   变量将会强制转换为适合标志符的类型：   </p><table class="doctable table">    <caption><strong>类型处理</strong></caption>         <thead>      <tr>       <th>类型</th>       <th>标志符</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>       <td><span class="literal">s</span></td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>       <td>        <span class="literal">d</span>,        <span class="literal">u</span>,        <span class="literal">c</span>,        <span class="literal">o</span>,        <span class="literal">x</span>,        <span class="literal">X</span>,        <span class="literal">b</span>       </td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span></td>       <td>        <span class="literal">e</span>,        <span class="literal">E</span>,        <span class="literal">f</span>,        <span class="literal">F</span>,        <span class="literal">g</span>,        <span class="literal">G</span>,        <span class="literal">h</span>,        <span class="literal">H</span>       </td>      </tr>     </tbody>       </table>   </dd>         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.printf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回输出字符串的长度。  </p> </div> <div class="refsect1 errors" id="refsect1-function.printf-errors">  <h3 class="title">错误／异常</h3>    <p class="para">   从 PHP 8.0.0 开始，如果参数个数为零，将抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，当传递的参数少于所需的参数时会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>。在 PHP 8.0.0 之前，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 并发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.printf-changelog">  <h3 class="title">更新日志</h3>    <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数失败时不再返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果参数个数为零则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       当传递的参数少于所需的参数时抛出 <span class="classname"><a href="https://php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.printf-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5076">    <p><strong>示例 #1 <span class="function"><strong>printf()</strong></span>：多种 format 格式的示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$n </span><span style="color: #007700">=  </span><span style="color: #9876AA">43951789</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$u </span><span style="color: #007700">= -</span><span style="color: #9876AA">43951789</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$c </span><span style="color: #007700">= </span><span style="color: #9876AA">65</span><span style="color: #007700">; </span><span style="color: #FF8000">// ASCII 65 is 'A'<br><br>// 注意两个 %% 的情况，这会打印一个字面上的 '%' 字符<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%b = '%b'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 二进制表示<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%c = '%c'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$c</span><span style="color: #007700">); </span><span style="color: #FF8000">// 打印 ascii 字符，与 chr() 函数相同<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%d = '%d'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 标准整数表示<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%e = '%e'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 科学计数法<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%u = '%u'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 无符号正整数表示<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%u = '%u'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$u</span><span style="color: #007700">); </span><span style="color: #FF8000">// 无符号负整数表示<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%f = '%f'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 浮点数表示<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%o = '%o'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 八进制表示<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%s = '%s'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 字符串表示<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%x = '%x'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 十六进制表示（小写）<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%X = '%X'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 十六进制表示（大写）<br><br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%+d = '%+d'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$n</span><span style="color: #007700">); </span><span style="color: #FF8000">// 正整数上的符号说明符<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%%+d = '%+d'\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$u</span><span style="color: #007700">); </span><span style="color: #FF8000">// 负整数上的符号说明符<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">%b&nbsp;=&nbsp;'10100111101010011010101101'<br>%c&nbsp;=&nbsp;'A'<br>%d&nbsp;=&nbsp;'43951789'<br>%e&nbsp;=&nbsp;'4.39518e+7'<br>%u&nbsp;=&nbsp;'43951789'<br>%u&nbsp;=&nbsp;'4251015507'<br>%f&nbsp;=&nbsp;'43951789.000000'<br>%o&nbsp;=&nbsp;'247523255'<br>%s&nbsp;=&nbsp;'43951789'<br>%x&nbsp;=&nbsp;'29ea6ad'<br>%X&nbsp;=&nbsp;'29EA6AD'<br>%+d&nbsp;=&nbsp;'+43951789'<br>%+d&nbsp;=&nbsp;'-43951789'</blockquote></div>    </div>   </div>   <div class="example" id="example-5077">    <p><strong>示例 #2 <span class="function"><strong>printf()</strong></span>：字符串说明符</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$s </span><span style="color: #007700">= </span><span style="color: #DD0000">'monkey'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$t </span><span style="color: #007700">= </span><span style="color: #DD0000">'many monkeys'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%s]\n"</span><span style="color: #007700">,        </span><span style="color: #9876AA">\$s</span><span style="color: #007700">); </span><span style="color: #FF8000">// 标准字符串输出<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%10s]\n"</span><span style="color: #007700">,      </span><span style="color: #9876AA">\$s</span><span style="color: #007700">); </span><span style="color: #FF8000">// 带空格的右对齐<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%-10s]\n"</span><span style="color: #007700">,     </span><span style="color: #9876AA">\$s</span><span style="color: #007700">); </span><span style="color: #FF8000">// 带空格的左对齐<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%010s]\n"</span><span style="color: #007700">,     </span><span style="color: #9876AA">\$s</span><span style="color: #007700">); </span><span style="color: #FF8000">// 零填充也适用于字符串<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%'#10s]\n"</span><span style="color: #007700">,    </span><span style="color: #9876AA">\$s</span><span style="color: #007700">); </span><span style="color: #FF8000">// 使用自定义填充字符“#”<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%'#*s]\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">10</span><span style="color: #007700">, </span><span style="color: #9876AA">\$s</span><span style="color: #007700">); </span><span style="color: #FF8000">// 提供填充的宽度作为附加参数<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%10.9s]\n"</span><span style="color: #007700">,    </span><span style="color: #9876AA">\$t</span><span style="color: #007700">); </span><span style="color: #FF8000">// 右对齐，但截断 8 个字符<br></span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"[%-10.9s]\n"</span><span style="color: #007700">,   </span><span style="color: #9876AA">\$t</span><span style="color: #007700">); </span><span style="color: #FF8000">// 左对齐，但截断 8 个字符<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;">     <div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">[monkey]<br>[&nbsp;&nbsp;&nbsp;&nbsp;monkey]<br>[monkey&nbsp;&nbsp;&nbsp;&nbsp;]<br>[0000monkey]<br>[####monkey]<br>[####monkey]<br>[&nbsp;many&nbsp;monk]<br>[many&nbsp;monk&nbsp;]</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.printf-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link print} - 输出字符串</span></li>    <li><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link fprintf()} - 将格式化后的字符串写入到流</span></li>    <li><span class="function">{@link vprintf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link vfprintf()} - 将格式化字符串写入流</span></li>    <li><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>    <li><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    <li><span class="function">{@link date()} - 格式化 Unix 时间戳</span></li>    <li><span class="function">{@link flush()} - 冲刷系统输出缓冲区</span></li>   </ul>   </div></div>
 * 
 * Output a formatted string
 * @link https://php.net/manual/zh/function.printf.php
 * @param string $format <p>
 * See sprintf for a description of
 * format.
 * </p>
 * @param string|int|float ...$values [optional] <p>
 * </p>
 * @return int the length of the outputted string.
 */
function printf(string $format, mixed ...$values): int {}

/**
 * <div id="function.vprintf" class="refentry"> <div class="refnamediv">  <h1 class="refname">vprintf</h1>  <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">vprintf</span> — <span class="dc-title">输出格式化字符串</span></p> </div>  <div class="refsect1 description" id="refsect1-function.vprintf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>vprintf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   根据 <span class="parameter" style="color:#3A95FF">format</span> （<span class="function">{@link sprintf()}</span>   函数文档中有相关描述）参数指定的格式，在一个格式化字符串中显示多个值。  </p>  <p class="para">   作用与 <span class="function">{@link printf()}</span> 函数类似，但是接收一个数组参数，而不是一系列可变数量的参数。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.vprintf-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>     <dt><span class="parameter" style="color:#3A95FF">format</span></dt> <dd>  <p class="para">   format 字符串通常由零或多个指令组成：普通字符（不包含   <span class="literal">%</span>）——直接复制到结果，<em>转换规范</em>——获取每个参数的结果。  </p>  <p class="para">   转换规范遵循此原型：   <span class="literal">%[argnum\$][flags][width][.precision]specifier</span>.  </p>  <p class="formalpara">   </p><h5 class="title">Argnum</h5>   <p class="para">    整数后跟美元符号 <span class="literal">\$</span>，用于指定转换中要处理的参数数量。   </p>    <p class="formalpara">   </p><h5 class="title">标志</h5>   <p class="para">    </p><table class="doctable informaltable">           <thead>       <tr>        <th>标志</th>        <th>说明</th>       </tr>      </thead>      <tbody class="tbody">       <tr>        <td><span class="literal">-</span></td>        <td>         在给定字段宽度内左对齐；右对齐是默认值        </td>       </tr>       <tr>        <td><span class="literal">+</span></td>        <td>         在给定字段宽度内为正数添加加号前缀         <span class="literal">+</span>；默认情况下，只有负数才会添加负号前缀。        </td>       </tr>       <tr>        <td><span class="literal"> </span>(space)</td>        <td>         用空格填充结果。         这是默认值。        </td>       </tr>       <tr>        <td><span class="literal">0</span></td>        <td>         仅对数字进行左侧零填充。         对于 <span class="literal">s</span> 说明符，也可以右侧用零填充。        </td>       </tr>       <tr>        <td><span class="literal">'</span>(char)</td>        <td>         用字符（char）填充结果。        </td>       </tr>      </tbody>         </table>       <p class="formalpara">   </p><h5 class="title">Width</h5>   <p class="para">    要么是整数，表示转换结果应该有多少个字符（最少），要么是 <span class="literal">*</span>。如果使用    <span class="literal">*</span>，那么宽度将作为额外的整数值提供，位于格式化符号之前。   </p>    <p class="formalpara">   </p><h5 class="title">Precision</h5>   <p class="para">    小数点 <span class="literal">.</span>，可选的后跟整数或者 <span class="literal">*</span>，其含义取决于格式化符号：    </p><ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       <span class="literal">e</span>、<span class="literal">E</span>、<span class="literal">f</span>、<span class="literal">F</span>       标志符：小数点后需要打印的位数（默认是 6）。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">g</span>、<span class="literal">G</span>、<span class="literal">h</span>、<span class="literal">H</span>       标志符：这是要打印的最大有效位数。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">s</span> 标志符：充当分界点，为字符串设置最大字符限制。      </span>     </li>    </ul>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <span class="simpara">      如果小数点没有明确的精度值，则假设是 0。如果使用 <span class="literal">*</span>，则精度将作为额外的整数值提供，位于格式化符号之前。     </span>    </p></blockquote>       <p class="para">   </p><table class="doctable table">    <caption><strong>标志符</strong></caption>         <thead>      <tr>       <th>标志符</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="literal">%</span></td>       <td>        字面意思的百分号字符。不需要参数。       </td>      </tr>      <tr>       <td><span class="literal">b</span></td>       <td>        参数视为整数并以二进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">c</span></td>       <td>        参数视为整数并以 ASCII 字符呈现。       </td>      </tr>      <tr>       <td><span class="literal">d</span></td>       <td>        参数视为整数并以（有符号）十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">e</span></td>       <td>        参数当做科学符号处理（例如 1.2e+2）。       </td>      </tr>      <tr>       <td><span class="literal">E</span></td>       <td>        与 <span class="literal">e</span> 标志符相同，但使用大写字母（例如 1.2E+2）。       </td>      </tr>      <tr>       <td><span class="literal">f</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">F</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（non-locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">g</span></td>       <td>        <p class="para">         通用格式。        </p>        <p class="para">         Let P equal the precision if nonzero, 6 if the precision is omitted,         or 1 if the precision is zero.         Then, if a conversion with style E would have an exponent of X:        </p>        <p class="para">         If P &gt; X ≥ −4, the conversion is with style f and precision P − (X + 1).         Otherwise, the conversion is with style e and precision P − 1.        </p>       </td>      </tr>      <tr>       <td><span class="literal">G</span></td>       <td>        Like the <span class="literal">g</span> specifier but uses        <span class="literal">E</span> and <span class="literal">f</span>.       </td>      </tr>      <tr>        <td><span class="literal">h</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses <span class="literal">F</span>.         Available as of PHP 8.0.0.        </td>       </tr>       <tr>        <td><span class="literal">H</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses         <span class="literal">E</span> and <span class="literal">F</span>. Available as of PHP 8.0.0.        </td>      </tr>      <tr>       <td><span class="literal">o</span></td>       <td>        参数视为整数并以八进制数字来呈现。       </td>      </tr>      <tr>       <td><span class="literal">s</span></td>       <td>        参数视为字符串来呈现。       </td>      </tr>      <tr>       <td><span class="literal">u</span></td>       <td>        参数视为整数并以无符号十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">x</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带小写字母）。       </td>      </tr>      <tr>       <td><span class="literal">X</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带大写字母）。       </td>      </tr>     </tbody>       </table>    <div class="warning"><strong class="warning">警告</strong>   <p class="para">    <span class="literal">c</span> 类型标志符忽略填充和宽度。   </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results.   </p>  </div>  <p class="para">   变量将会强制转换为适合标志符的类型：   </p><table class="doctable table">    <caption><strong>类型处理</strong></caption>         <thead>      <tr>       <th>类型</th>       <th>标志符</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>       <td><span class="literal">s</span></td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>       <td>        <span class="literal">d</span>,        <span class="literal">u</span>,        <span class="literal">c</span>,        <span class="literal">o</span>,        <span class="literal">x</span>,        <span class="literal">X</span>,        <span class="literal">b</span>       </td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span></td>       <td>        <span class="literal">e</span>,        <span class="literal">E</span>,        <span class="literal">f</span>,        <span class="literal">F</span>,        <span class="literal">g</span>,        <span class="literal">G</span>,        <span class="literal">h</span>,        <span class="literal">H</span>       </td>      </tr>     </tbody>       </table>   </dd>         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.vprintf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回输出字符串的长度。  </p> </div> <div class="refsect1 errors" id="refsect1-function.vprintf-errors">  <h3 class="title">错误／异常</h3>    <p class="para">   从 PHP 8.0.0 开始，如果参数个数为零，将抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，当传递的参数少于所需的参数时会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 并发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.vprintf-changelog">  <h3 class="title">更新日志</h3>    <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数失败时不再返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果参数个数为零则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       当传递的参数少于所需的参数时抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>    </tbody>     </table> </div>  <div class="refsect1 examples" id="refsect1-function.vprintf-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5172">    <p><strong>示例 #1 <span class="function"><strong>vprintf()</strong></span>：补零整数</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>vprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">, </span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'-'</span><span style="color: #007700">, </span><span style="color: #DD0000">'1988-8-1'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">1988-08-01</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.vprintf-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link fprintf()} - 将格式化后的字符串写入到流</span></li>    <li><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link vfprintf()} - 将格式化字符串写入流</span></li>    <li><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>    <li><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    <li><span class="function">{@link date()} - 格式化 Unix 时间戳</span></li>   </ul>   </div></div>
 * 
 * Output a formatted string
 * @link https://php.net/manual/zh/function.vprintf.php
 * @param string $format <p>
 * See sprintf for a description of
 * format.
 * </p>
 * @param array $values <p>
 * </p>
 * @return int the length of the outputted string.
 */
function vprintf(string $format, array $values): int {}

/**
 * <div id="function.vsprintf" class="refentry"> <div class="refnamediv">  <h1 class="refname">vsprintf</h1>  <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">vsprintf</span> — <span class="dc-title">返回格式化字符串</span></p> </div>  <div class="refsect1 description" id="refsect1-function.vsprintf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>vsprintf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   作用与 <span class="function">{@link sprintf()}</span> 函数类似，但是接收一个数组参数，而不是一系列可变数量的参数。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.vsprintf-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>     <dt><span class="parameter" style="color:#3A95FF">format</span></dt> <dd>  <p class="para">   format 字符串通常由零或多个指令组成：普通字符（不包含   <span class="literal">%</span>）——直接复制到结果，<em>转换规范</em>——获取每个参数的结果。  </p>  <p class="para">   转换规范遵循此原型：   <span class="literal">%[argnum\$][flags][width][.precision]specifier</span>.  </p>  <p class="formalpara">   </p><h5 class="title">Argnum</h5>   <p class="para">    整数后跟美元符号 <span class="literal">\$</span>，用于指定转换中要处理的参数数量。   </p>    <p class="formalpara">   </p><h5 class="title">标志</h5>   <p class="para">    </p><table class="doctable informaltable">           <thead>       <tr>        <th>标志</th>        <th>说明</th>       </tr>      </thead>      <tbody class="tbody">       <tr>        <td><span class="literal">-</span></td>        <td>         在给定字段宽度内左对齐；右对齐是默认值        </td>       </tr>       <tr>        <td><span class="literal">+</span></td>        <td>         在给定字段宽度内为正数添加加号前缀         <span class="literal">+</span>；默认情况下，只有负数才会添加负号前缀。        </td>       </tr>       <tr>        <td><span class="literal"> </span>(space)</td>        <td>         用空格填充结果。         这是默认值。        </td>       </tr>       <tr>        <td><span class="literal">0</span></td>        <td>         仅对数字进行左侧零填充。         对于 <span class="literal">s</span> 说明符，也可以右侧用零填充。        </td>       </tr>       <tr>        <td><span class="literal">'</span>(char)</td>        <td>         用字符（char）填充结果。        </td>       </tr>      </tbody>         </table>       <p class="formalpara">   </p><h5 class="title">Width</h5>   <p class="para">    要么是整数，表示转换结果应该有多少个字符（最少），要么是 <span class="literal">*</span>。如果使用    <span class="literal">*</span>，那么宽度将作为额外的整数值提供，位于格式化符号之前。   </p>    <p class="formalpara">   </p><h5 class="title">Precision</h5>   <p class="para">    小数点 <span class="literal">.</span>，可选的后跟整数或者 <span class="literal">*</span>，其含义取决于格式化符号：    </p><ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       <span class="literal">e</span>、<span class="literal">E</span>、<span class="literal">f</span>、<span class="literal">F</span>       标志符：小数点后需要打印的位数（默认是 6）。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">g</span>、<span class="literal">G</span>、<span class="literal">h</span>、<span class="literal">H</span>       标志符：这是要打印的最大有效位数。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">s</span> 标志符：充当分界点，为字符串设置最大字符限制。      </span>     </li>    </ul>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <span class="simpara">      如果小数点没有明确的精度值，则假设是 0。如果使用 <span class="literal">*</span>，则精度将作为额外的整数值提供，位于格式化符号之前。     </span>    </p></blockquote>       <p class="para">   </p><table class="doctable table">    <caption><strong>标志符</strong></caption>         <thead>      <tr>       <th>标志符</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="literal">%</span></td>       <td>        字面意思的百分号字符。不需要参数。       </td>      </tr>      <tr>       <td><span class="literal">b</span></td>       <td>        参数视为整数并以二进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">c</span></td>       <td>        参数视为整数并以 ASCII 字符呈现。       </td>      </tr>      <tr>       <td><span class="literal">d</span></td>       <td>        参数视为整数并以（有符号）十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">e</span></td>       <td>        参数当做科学符号处理（例如 1.2e+2）。       </td>      </tr>      <tr>       <td><span class="literal">E</span></td>       <td>        与 <span class="literal">e</span> 标志符相同，但使用大写字母（例如 1.2E+2）。       </td>      </tr>      <tr>       <td><span class="literal">f</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">F</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（non-locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">g</span></td>       <td>        <p class="para">         通用格式。        </p>        <p class="para">         Let P equal the precision if nonzero, 6 if the precision is omitted,         or 1 if the precision is zero.         Then, if a conversion with style E would have an exponent of X:        </p>        <p class="para">         If P &gt; X ≥ −4, the conversion is with style f and precision P − (X + 1).         Otherwise, the conversion is with style e and precision P − 1.        </p>       </td>      </tr>      <tr>       <td><span class="literal">G</span></td>       <td>        Like the <span class="literal">g</span> specifier but uses        <span class="literal">E</span> and <span class="literal">f</span>.       </td>      </tr>      <tr>        <td><span class="literal">h</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses <span class="literal">F</span>.         Available as of PHP 8.0.0.        </td>       </tr>       <tr>        <td><span class="literal">H</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses         <span class="literal">E</span> and <span class="literal">F</span>. Available as of PHP 8.0.0.        </td>      </tr>      <tr>       <td><span class="literal">o</span></td>       <td>        参数视为整数并以八进制数字来呈现。       </td>      </tr>      <tr>       <td><span class="literal">s</span></td>       <td>        参数视为字符串来呈现。       </td>      </tr>      <tr>       <td><span class="literal">u</span></td>       <td>        参数视为整数并以无符号十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">x</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带小写字母）。       </td>      </tr>      <tr>       <td><span class="literal">X</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带大写字母）。       </td>      </tr>     </tbody>       </table>    <div class="warning"><strong class="warning">警告</strong>   <p class="para">    <span class="literal">c</span> 类型标志符忽略填充和宽度。   </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results.   </p>  </div>  <p class="para">   变量将会强制转换为适合标志符的类型：   </p><table class="doctable table">    <caption><strong>类型处理</strong></caption>         <thead>      <tr>       <th>类型</th>       <th>标志符</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>       <td><span class="literal">s</span></td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>       <td>        <span class="literal">d</span>,        <span class="literal">u</span>,        <span class="literal">c</span>,        <span class="literal">o</span>,        <span class="literal">x</span>,        <span class="literal">X</span>,        <span class="literal">b</span>       </td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span></td>       <td>        <span class="literal">e</span>,        <span class="literal">E</span>,        <span class="literal">f</span>,        <span class="literal">F</span>,        <span class="literal">g</span>,        <span class="literal">G</span>,        <span class="literal">h</span>,        <span class="literal">H</span>       </td>      </tr>     </tbody>       </table>   </dd>         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.vsprintf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   根据 <span class="parameter" style="color:#3A95FF">format</span> 和数组参数返回处理后的字符串。  </p> </div> <div class="refsect1 errors" id="refsect1-function.vsprintf-errors">  <h3 class="title">错误／异常</h3>    <p class="para">   从 PHP 8.0.0 开始，如果参数个数为零，将抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，当传递的参数少于所需的参数时会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 并发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.vsprintf-changelog">  <h3 class="title">更新日志</h3>    <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数失败时不再返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果参数个数为零则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       当传递的参数少于所需的参数时抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.vsprintf-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5173">    <p><strong>示例 #1 <span class="function"><strong>vsprintf()</strong></span>: 前导 0 的整数</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">print </span><span style="color: #9876AA">vsprintf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">, </span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'-'</span><span style="color: #007700">, </span><span style="color: #DD0000">'1988-8-1'</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="annotation-interactive examplescode"><blockquote style="border:1px gray solid;">1988-08-01</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.vsprintf-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link fprintf()} - 将格式化后的字符串写入到流</span></li>    <li><span class="function">{@link vprintf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link vfprintf()} - 将格式化字符串写入流</span></li>    <li><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>    <li><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    <li><span class="function">{@link date()} - 格式化 Unix 时间戳</span></li>   </ul>   </div></div>
 * 
 * Return a formatted string
 * @link https://php.net/manual/zh/function.vsprintf.php
 * @param string $format <p>
 * See sprintf for a description of
 * format.
 * </p>
 * @param array $values <p>
 * </p>
 * @return string Return array values as a formatted string according to
 * format (which is described in the documentation
 * for sprintf).
 */
#[Pure]
function vsprintf(string $format, array $values): string {}

/**
 * <div id="function.fprintf" class="refentry"> <div class="refnamediv">  <h1 class="refname">fprintf</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">fprintf</span> — <span class="dc-title">将格式化后的字符串写入到流</span></p> </div>  <div class="refsect1 description" id="refsect1-function.fprintf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>fprintf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> <span class="parameter" style="color:#3A95FF">\$stream</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter" style="color:#3A95FF">...\$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   写入根据 <span class="parameter" style="color:#3A95FF">format</span> 格式化后的字符串到由   <span class="parameter" style="color:#3A95FF">stream</span> 句柄打开的流中。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.fprintf-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">stream</span></dt>     <dd>      <p class="para">文件系统指针，是典型地由<span class="function">{@link fopen()}</span> 创建的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span>(资源)。</p>     </dd>         <dt><span class="parameter" style="color:#3A95FF">format</span></dt> <dd>  <p class="para">   format 字符串通常由零或多个指令组成：普通字符（不包含   <span class="literal">%</span>）——直接复制到结果，<em>转换规范</em>——获取每个参数的结果。  </p>  <p class="para">   转换规范遵循此原型：   <span class="literal">%[argnum\$][flags][width][.precision]specifier</span>.  </p>  <p class="formalpara">   </p><h5 class="title">Argnum</h5>   <p class="para">    整数后跟美元符号 <span class="literal">\$</span>，用于指定转换中要处理的参数数量。   </p>    <p class="formalpara">   </p><h5 class="title">标志</h5>   <p class="para">    </p><table class="doctable informaltable">           <thead>       <tr>        <th>标志</th>        <th>说明</th>       </tr>      </thead>      <tbody class="tbody">       <tr>        <td><span class="literal">-</span></td>        <td>         在给定字段宽度内左对齐；右对齐是默认值        </td>       </tr>       <tr>        <td><span class="literal">+</span></td>        <td>         在给定字段宽度内为正数添加加号前缀         <span class="literal">+</span>；默认情况下，只有负数才会添加负号前缀。        </td>       </tr>       <tr>        <td><span class="literal"> </span>(space)</td>        <td>         用空格填充结果。         这是默认值。        </td>       </tr>       <tr>        <td><span class="literal">0</span></td>        <td>         仅对数字进行左侧零填充。         对于 <span class="literal">s</span> 说明符，也可以右侧用零填充。        </td>       </tr>       <tr>        <td><span class="literal">'</span>(char)</td>        <td>         用字符（char）填充结果。        </td>       </tr>      </tbody>         </table>       <p class="formalpara">   </p><h5 class="title">Width</h5>   <p class="para">    要么是整数，表示转换结果应该有多少个字符（最少），要么是 <span class="literal">*</span>。如果使用    <span class="literal">*</span>，那么宽度将作为额外的整数值提供，位于格式化符号之前。   </p>    <p class="formalpara">   </p><h5 class="title">Precision</h5>   <p class="para">    小数点 <span class="literal">.</span>，可选的后跟整数或者 <span class="literal">*</span>，其含义取决于格式化符号：    </p><ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       <span class="literal">e</span>、<span class="literal">E</span>、<span class="literal">f</span>、<span class="literal">F</span>       标志符：小数点后需要打印的位数（默认是 6）。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">g</span>、<span class="literal">G</span>、<span class="literal">h</span>、<span class="literal">H</span>       标志符：这是要打印的最大有效位数。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">s</span> 标志符：充当分界点，为字符串设置最大字符限制。      </span>     </li>    </ul>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <span class="simpara">      如果小数点没有明确的精度值，则假设是 0。如果使用 <span class="literal">*</span>，则精度将作为额外的整数值提供，位于格式化符号之前。     </span>    </p></blockquote>       <p class="para">   </p><table class="doctable table">    <caption><strong>标志符</strong></caption>         <thead>      <tr>       <th>标志符</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="literal">%</span></td>       <td>        字面意思的百分号字符。不需要参数。       </td>      </tr>      <tr>       <td><span class="literal">b</span></td>       <td>        参数视为整数并以二进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">c</span></td>       <td>        参数视为整数并以 ASCII 字符呈现。       </td>      </tr>      <tr>       <td><span class="literal">d</span></td>       <td>        参数视为整数并以（有符号）十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">e</span></td>       <td>        参数当做科学符号处理（例如 1.2e+2）。       </td>      </tr>      <tr>       <td><span class="literal">E</span></td>       <td>        与 <span class="literal">e</span> 标志符相同，但使用大写字母（例如 1.2E+2）。       </td>      </tr>      <tr>       <td><span class="literal">f</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">F</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（non-locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">g</span></td>       <td>        <p class="para">         通用格式。        </p>        <p class="para">         Let P equal the precision if nonzero, 6 if the precision is omitted,         or 1 if the precision is zero.         Then, if a conversion with style E would have an exponent of X:        </p>        <p class="para">         If P &gt; X ≥ −4, the conversion is with style f and precision P − (X + 1).         Otherwise, the conversion is with style e and precision P − 1.        </p>       </td>      </tr>      <tr>       <td><span class="literal">G</span></td>       <td>        Like the <span class="literal">g</span> specifier but uses        <span class="literal">E</span> and <span class="literal">f</span>.       </td>      </tr>      <tr>        <td><span class="literal">h</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses <span class="literal">F</span>.         Available as of PHP 8.0.0.        </td>       </tr>       <tr>        <td><span class="literal">H</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses         <span class="literal">E</span> and <span class="literal">F</span>. Available as of PHP 8.0.0.        </td>      </tr>      <tr>       <td><span class="literal">o</span></td>       <td>        参数视为整数并以八进制数字来呈现。       </td>      </tr>      <tr>       <td><span class="literal">s</span></td>       <td>        参数视为字符串来呈现。       </td>      </tr>      <tr>       <td><span class="literal">u</span></td>       <td>        参数视为整数并以无符号十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">x</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带小写字母）。       </td>      </tr>      <tr>       <td><span class="literal">X</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带大写字母）。       </td>      </tr>     </tbody>       </table>    <div class="warning"><strong class="warning">警告</strong>   <p class="para">    <span class="literal">c</span> 类型标志符忽略填充和宽度。   </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results.   </p>  </div>  <p class="para">   变量将会强制转换为适合标志符的类型：   </p><table class="doctable table">    <caption><strong>类型处理</strong></caption>         <thead>      <tr>       <th>类型</th>       <th>标志符</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>       <td><span class="literal">s</span></td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>       <td>        <span class="literal">d</span>,        <span class="literal">u</span>,        <span class="literal">c</span>,        <span class="literal">o</span>,        <span class="literal">x</span>,        <span class="literal">X</span>,        <span class="literal">b</span>       </td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span></td>       <td>        <span class="literal">e</span>,        <span class="literal">E</span>,        <span class="literal">f</span>,        <span class="literal">F</span>,        <span class="literal">g</span>,        <span class="literal">G</span>,        <span class="literal">h</span>,        <span class="literal">H</span>       </td>      </tr>     </tbody>       </table>   </dd>         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.fprintf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回写入的字符串长度。  </p> </div> <div class="refsect1 errors" id="refsect1-function.fprintf-errors">  <h3 class="title">错误／异常</h3>    <p class="para">   从 PHP 8.0.0 开始，如果参数个数为零，将抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，当传递的参数少于所需的参数时会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>。在 PHP 8.0.0 之前，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 并发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.fprintf-changelog">  <h3 class="title">更新日志</h3>    <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数失败时不再返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果参数个数为零则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       当传递的参数少于所需的参数时抛出 <span class="classname"><a href="https://php.net/manual/zh/class.argumentcounterror.php" class="classname">ArgumentCountError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.fprintf-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5045">    <p><strong>示例 #1 <span class="function"><strong>fprintf()</strong></span>：零填充整数</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">if (!(</span><span style="color: #9876AA">\$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'date.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'w'</span><span style="color: #007700">))) {<br>    return;<br>}<br><br></span><span style="color: #9876AA">\$year </span><span style="color: #007700">= </span><span style="color: #9876AA">2005</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$month </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$day </span><span style="color: #007700">= </span><span style="color: #9876AA">6</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">fprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$year</span><span style="color: #007700">, </span><span style="color: #9876AA">\$month</span><span style="color: #007700">, </span><span style="color: #9876AA">\$day</span><span style="color: #007700">);<br></span><span style="color: #FF8000">// 将格式化的 ISO 日期写入 date.txt<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   <div class="example" id="example-5046">    <p><strong>示例 #2 <span class="function"><strong>fprintf()</strong></span>：格式化货币</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">if (!(</span><span style="color: #9876AA">\$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'currency.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'w'</span><span style="color: #007700">))) {<br>    return;<br>}<br><br></span><span style="color: #9876AA">\$money1 </span><span style="color: #007700">= </span><span style="color: #9876AA">68.75</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$money2 </span><span style="color: #007700">= </span><span style="color: #9876AA">54.35</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$money </span><span style="color: #007700">= </span><span style="color: #9876AA">\$money1 </span><span style="color: #007700">+ </span><span style="color: #9876AA">\$money2</span><span style="color: #007700">;<br></span><span style="color: #FF8000">// \$money 将输出“123.1”<br></span><span style="color: #9876AA">\$len </span><span style="color: #007700">= </span><span style="color: #9876AA">fprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">'%01.2f'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$money</span><span style="color: #007700">);<br></span><span style="color: #FF8000">// 将“123.10”写入到 currency.txt<br><br></span><span style="color: #007700">echo </span><span style="color: #DD0000">"wrote </span><span style="color: #9876AA">\$len</span><span style="color: #DD0000"> bytes to currency.txt"</span><span style="color: #007700">;<br></span><span style="color: #FF8000">// 使用 fprintf 的返回值来确定写入了多少字节<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div>  <div class="refsect1 seealso" id="refsect1-function.fprintf-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link vprintf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link vfprintf()} - 将格式化字符串写入流</span></li>    <li><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>    <li><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    <li><span class="function">{@link date()} - 格式化 Unix 时间戳</span></li>   </ul>   </div></div>
 * 
 * Write a formatted string to a stream
 * @link https://php.net/manual/zh/function.fprintf.php
 * @param resource $stream &fs.file.pointer;
 * @param string $format <p>
 * See sprintf for a description of
 * format.
 * </p>
 * @param mixed ...$values [optional] <p>
 * </p>
 * @return int the length of the string written.
 */
function fprintf($stream, string $format, mixed ...$values): int {}

/**
 * <div id="function.vfprintf" class="refentry"> <div class="refnamediv">  <h1 class="refname">vfprintf</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">vfprintf</span> — <span class="dc-title">将格式化字符串写入流</span></p> </div>  <div class="refsect1 description" id="refsect1-function.vfprintf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>vfprintf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> <span class="parameter" style="color:#3A95FF">\$stream</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$values</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">   向由 <span class="parameter" style="color:#3A95FF">stream</span> 指定的流资源句柄中写入根据 <span class="parameter" style="color:#3A95FF">format</span> 格式化后的字符串。  </p>  <p class="para">   作用与 <span class="function">{@link fprintf()}</span> 函数类似，但是接收一个数组参数，而不是一系列可变数量的参数。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.vfprintf-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">stream</span></dt>     <dd>      <p class="para">      </p>     </dd>         <dt><span class="parameter" style="color:#3A95FF">format</span></dt> <dd>  <p class="para">   format 字符串通常由零或多个指令组成：普通字符（不包含   <span class="literal">%</span>）——直接复制到结果，<em>转换规范</em>——获取每个参数的结果。  </p>  <p class="para">   转换规范遵循此原型：   <span class="literal">%[argnum\$][flags][width][.precision]specifier</span>.  </p>  <p class="formalpara">   </p><h5 class="title">Argnum</h5>   <p class="para">    整数后跟美元符号 <span class="literal">\$</span>，用于指定转换中要处理的参数数量。   </p>    <p class="formalpara">   </p><h5 class="title">标志</h5>   <p class="para">    </p><table class="doctable informaltable">           <thead>       <tr>        <th>标志</th>        <th>说明</th>       </tr>      </thead>      <tbody class="tbody">       <tr>        <td><span class="literal">-</span></td>        <td>         在给定字段宽度内左对齐；右对齐是默认值        </td>       </tr>       <tr>        <td><span class="literal">+</span></td>        <td>         在给定字段宽度内为正数添加加号前缀         <span class="literal">+</span>；默认情况下，只有负数才会添加负号前缀。        </td>       </tr>       <tr>        <td><span class="literal"> </span>(space)</td>        <td>         用空格填充结果。         这是默认值。        </td>       </tr>       <tr>        <td><span class="literal">0</span></td>        <td>         仅对数字进行左侧零填充。         对于 <span class="literal">s</span> 说明符，也可以右侧用零填充。        </td>       </tr>       <tr>        <td><span class="literal">'</span>(char)</td>        <td>         用字符（char）填充结果。        </td>       </tr>      </tbody>         </table>       <p class="formalpara">   </p><h5 class="title">Width</h5>   <p class="para">    要么是整数，表示转换结果应该有多少个字符（最少），要么是 <span class="literal">*</span>。如果使用    <span class="literal">*</span>，那么宽度将作为额外的整数值提供，位于格式化符号之前。   </p>    <p class="formalpara">   </p><h5 class="title">Precision</h5>   <p class="para">    小数点 <span class="literal">.</span>，可选的后跟整数或者 <span class="literal">*</span>，其含义取决于格式化符号：    </p><ul class="itemizedlist">     <li class="listitem">      <span class="simpara">       <span class="literal">e</span>、<span class="literal">E</span>、<span class="literal">f</span>、<span class="literal">F</span>       标志符：小数点后需要打印的位数（默认是 6）。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">g</span>、<span class="literal">G</span>、<span class="literal">h</span>、<span class="literal">H</span>       标志符：这是要打印的最大有效位数。      </span>     </li>     <li class="listitem">      <span class="simpara">       <span class="literal">s</span> 标志符：充当分界点，为字符串设置最大字符限制。      </span>     </li>    </ul>    <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      <span class="simpara">      如果小数点没有明确的精度值，则假设是 0。如果使用 <span class="literal">*</span>，则精度将作为额外的整数值提供，位于格式化符号之前。     </span>    </p></blockquote>       <p class="para">   </p><table class="doctable table">    <caption><strong>标志符</strong></caption>         <thead>      <tr>       <th>标志符</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="literal">%</span></td>       <td>        字面意思的百分号字符。不需要参数。       </td>      </tr>      <tr>       <td><span class="literal">b</span></td>       <td>        参数视为整数并以二进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">c</span></td>       <td>        参数视为整数并以 ASCII 字符呈现。       </td>      </tr>      <tr>       <td><span class="literal">d</span></td>       <td>        参数视为整数并以（有符号）十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">e</span></td>       <td>        参数当做科学符号处理（例如 1.2e+2）。       </td>      </tr>      <tr>       <td><span class="literal">E</span></td>       <td>        与 <span class="literal">e</span> 标志符相同，但使用大写字母（例如 1.2E+2）。       </td>      </tr>      <tr>       <td><span class="literal">f</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">F</span></td>       <td>        参数当做浮点数处理且作为浮点数呈现（non-locale aware）。       </td>      </tr>      <tr>       <td><span class="literal">g</span></td>       <td>        <p class="para">         通用格式。        </p>        <p class="para">         Let P equal the precision if nonzero, 6 if the precision is omitted,         or 1 if the precision is zero.         Then, if a conversion with style E would have an exponent of X:        </p>        <p class="para">         If P &gt; X ≥ −4, the conversion is with style f and precision P − (X + 1).         Otherwise, the conversion is with style e and precision P − 1.        </p>       </td>      </tr>      <tr>       <td><span class="literal">G</span></td>       <td>        Like the <span class="literal">g</span> specifier but uses        <span class="literal">E</span> and <span class="literal">f</span>.       </td>      </tr>      <tr>        <td><span class="literal">h</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses <span class="literal">F</span>.         Available as of PHP 8.0.0.        </td>       </tr>       <tr>        <td><span class="literal">H</span></td>        <td>         Like the <span class="literal">g</span> specifier but uses         <span class="literal">E</span> and <span class="literal">F</span>. Available as of PHP 8.0.0.        </td>      </tr>      <tr>       <td><span class="literal">o</span></td>       <td>        参数视为整数并以八进制数字来呈现。       </td>      </tr>      <tr>       <td><span class="literal">s</span></td>       <td>        参数视为字符串来呈现。       </td>      </tr>      <tr>       <td><span class="literal">u</span></td>       <td>        参数视为整数并以无符号十进制数字呈现。       </td>      </tr>      <tr>       <td><span class="literal">x</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带小写字母）。       </td>      </tr>      <tr>       <td><span class="literal">X</span></td>       <td>        参数视为整数并作为十六进制数字呈现（带大写字母）。       </td>      </tr>     </tbody>       </table>    <div class="warning"><strong class="warning">警告</strong>   <p class="para">    <span class="literal">c</span> 类型标志符忽略填充和宽度。   </p>  </div>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results.   </p>  </div>  <p class="para">   变量将会强制转换为适合标志符的类型：   </p><table class="doctable table">    <caption><strong>类型处理</strong></caption>         <thead>      <tr>       <th>类型</th>       <th>标志符</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>       <td><span class="literal">s</span></td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>       <td>        <span class="literal">d</span>,        <span class="literal">u</span>,        <span class="literal">c</span>,        <span class="literal">o</span>,        <span class="literal">x</span>,        <span class="literal">X</span>,        <span class="literal">b</span>       </td>      </tr>      <tr>       <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.float.php" class="type float" style="color:#EAB766">float</a></span></td>       <td>        <span class="literal">e</span>,        <span class="literal">E</span>,        <span class="literal">f</span>,        <span class="literal">F</span>,        <span class="literal">g</span>,        <span class="literal">G</span>,        <span class="literal">h</span>,        <span class="literal">H</span>       </td>      </tr>     </tbody>       </table>   </dd>         <dt><span class="parameter" style="color:#3A95FF">values</span></dt>     <dd>      <p class="para">      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.vfprintf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回输出字符串的长度。  </p> </div> <div class="refsect1 errors" id="refsect1-function.vfprintf-errors">  <h3 class="title">错误／异常</h3>    <p class="para">   从 PHP 8.0.0 开始，如果参数个数为零，将抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则会抛出   <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   从 PHP 8.0.0 开始，当传递的参数少于所需的参数时会抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。在 PHP 8.0.0 之前，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 并发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.vfprintf-changelog">  <h3 class="title">更新日志</h3>    <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       此函数失败时不再返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果参数个数为零则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[width]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       如果 <span class="literal">[precision]</span> 小于零或大于 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.php-int-max">PHP_INT_MAX</a></span></strong>，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>     <tr>      <td>8.0.0</td>      <td>       当传递的参数少于所需的参数时抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>；以前该函数则会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.vfprintf-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5171">    <p><strong>示例 #1 <span class="function"><strong>vfprintf()</strong></span>: 前导 0 的整数</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">if (!(</span><span style="color: #9876AA">\$fp </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'date.txt'</span><span style="color: #007700">, </span><span style="color: #DD0000">'w'</span><span style="color: #007700">)))<br>    return;<br><br></span><span style="color: #9876AA">\$year </span><span style="color: #007700">= </span><span style="color: #9876AA">2025</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$month </span><span style="color: #007700">= </span><span style="color: #9876AA">5</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$day </span><span style="color: #007700">= </span><span style="color: #9876AA">6</span><span style="color: #007700">;<br></span><span style="color: #9876AA">vfprintf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fp</span><span style="color: #007700">, </span><span style="color: #DD0000">"%04d-%02d-%02d"</span><span style="color: #007700">, array(</span><span style="color: #9876AA">\$year</span><span style="color: #007700">, </span><span style="color: #9876AA">\$month</span><span style="color: #007700">, </span><span style="color: #9876AA">\$day</span><span style="color: #007700">));<br></span><span style="color: #FF8000">// 将向 date.txt 写入格式化的 ISO 标准日期<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.vfprintf-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link fprintf()} - 将格式化后的字符串写入到流</span></li>    <li><span class="function">{@link vprintf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>    <li><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    <li><span class="function">{@link date()} - 格式化 Unix 时间戳</span></li>   </ul>   </div></div>
 * 
 * Write a formatted string to a stream
 * @link https://php.net/manual/zh/function.vfprintf.php
 * @param resource $stream <p>
 * </p>
 * @param string $format <p>
 * See sprintf for a description of
 * format.
 * </p>
 * @param array $values <p>
 * </p>
 * @return int the length of the outputted string.
 */
function vfprintf($stream, string $format, array $values): int {}

/**
 * <div id="function.sscanf" class="refentry"> <div class="refnamediv">  <h1 class="refname">sscanf</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">sscanf</span> — <span class="dc-title">根据指定格式解析输入的字符</span></p> </div>  <div class="refsect1 description" id="refsect1-function.sscanf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>sscanf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;...\$vars</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>sscanf()</strong></span> 函数输入类似 <span class="function">{@link printf()}</span>。<span class="function"><strong>sscanf()</strong></span>   读取字符串 <span class="parameter" style="color:#3A95FF">string</span>，然后根据指定格式 <span class="parameter" style="color:#3A95FF">format</span> 解析。  </p>  <p class="para">   指定的格式字符串中的任意空白匹配输入字符串的任意空白。也就是说即使是格式字符串中的一个制表符（<span class="literal">\t</span>）也能匹配输入字符串中的单个空白字符。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.sscanf-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       将要被解析的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">format</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">string</span> 的格式解释，在 <span class="function">{@link sprintf()}</span> 的文档中进行了描述，但有以下区别：       </p><ul class="simplelist">        <li>         函数不支持区域设置。        </li>        <li>         不支持 <span class="literal">F</span>、<span class="literal">g</span>、<span class="literal">G</span> 和 <span class="literal">b</span>。        </li>        <li>         <span class="literal">D</span> 代表十进制数字。        </li>        <li>         <span class="literal">i</span> stands for integer with base detection.        </li>        <li>         <span class="literal">n</span> 代表到目前为止处理的字符数。        </li>        <li>         <span class="literal">s</span> 在任何空白字符处停止阅读。        </li>        <li>         <span class="literal">*</span> 代替 <span class="literal">argnum\$</span> 禁止分配此转换规范。        </li>       </ul>           </dd>             <dt><span class="parameter" style="color:#3A95FF">vars</span></dt>     <dd>      <p class="para">       可选参数将以引用方式传入，它们的值将被设置为解析值。      </p>     </dd>       </dl>   </div>  <div class="refsect1 returnvalues" id="refsect1-function.sscanf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果仅传入了两个参数给这个函数，解析后的值作为数组返回。否则，如果传入可选参数，函数将返回赋值数量。可选参数必须通过引用传递。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">format</span> 要求的子字符串比 <span class="parameter" style="color:#3A95FF">string</span>   内可用的子字符串多，则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-function.sscanf-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-5097">    <p><strong>示例 #1 <span class="function"><strong>sscanf()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 获取序列号<br></span><span style="color: #007700">list(</span><span style="color: #9876AA">\$serial</span><span style="color: #007700">) = </span><span style="color: #9876AA">sscanf</span><span style="color: #007700">(</span><span style="color: #DD0000">"SN/2350001"</span><span style="color: #007700">, </span><span style="color: #DD0000">"SN/%d"</span><span style="color: #007700">);<br></span><span style="color: #FF8000">// 和生产日期<br></span><span style="color: #9876AA">\$mandate </span><span style="color: #007700">= </span><span style="color: #DD0000">"January 01 2000"</span><span style="color: #007700">;<br>list(</span><span style="color: #9876AA">\$month</span><span style="color: #007700">, </span><span style="color: #9876AA">\$day</span><span style="color: #007700">, </span><span style="color: #9876AA">\$year</span><span style="color: #007700">) = </span><span style="color: #9876AA">sscanf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$mandate</span><span style="color: #007700">, </span><span style="color: #DD0000">"%s %d %d"</span><span style="color: #007700">);<br>echo </span><span style="color: #DD0000">"Item </span><span style="color: #9876AA">\$serial</span><span style="color: #DD0000"> was manufactured on: </span><span style="color: #9876AA">\$year</span><span style="color: #DD0000">-" </span><span style="color: #007700">. </span><span style="color: #9876AA">substr</span><span style="color: #007700">(</span><span style="color: #9876AA">\$month</span><span style="color: #007700">, </span><span style="color: #9876AA">0</span><span style="color: #007700">, </span><span style="color: #9876AA">3</span><span style="color: #007700">) . </span><span style="color: #DD0000">"-</span><span style="color: #9876AA">\$day</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   如果传递可选参数，函数将返回赋值的数量。  </p>  <p class="para">   </p><div class="example" id="example-5098">    <p><strong>示例 #2 <span class="function"><strong>sscanf()</strong></span>——使用可选参数</strong></p>    <div class="example-contents"><div class="annotation-interactive phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 获取作者信息并生成 DocBook 实体<br></span><span style="color: #9876AA">\$auth </span><span style="color: #007700">= </span><span style="color: #DD0000">"24\tLewis Carroll"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$n </span><span style="color: #007700">= </span><span style="color: #9876AA">sscanf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$auth</span><span style="color: #007700">, </span><span style="color: #DD0000">"%d\t%s %s"</span><span style="color: #007700">, </span><span style="color: #9876AA">\$id</span><span style="color: #007700">, </span><span style="color: #9876AA">\$first</span><span style="color: #007700">, </span><span style="color: #9876AA">\$last</span><span style="color: #007700">);<br>echo </span><span style="color: #DD0000">"&lt;author id='</span><span style="color: #9876AA">\$id</span><span style="color: #DD0000">'&gt;<br>    &lt;firstname&gt;</span><span style="color: #9876AA">\$first</span><span style="color: #DD0000">&lt;/firstname&gt;<br>    &lt;surname&gt;</span><span style="color: #9876AA">\$last</span><span style="color: #DD0000">&lt;/surname&gt;<br>&lt;/author&gt;\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.sscanf-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link fprintf()} - 将格式化后的字符串写入到流</span></li>    <li><span class="function">{@link vprintf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link vsprintf()} - 返回格式化字符串</span></li>    <li><span class="function">{@link vfprintf()} - 将格式化字符串写入流</span></li>    <li><span class="function">{@link fscanf()} - 从文件中格式化输入</span></li>    <li><span class="function">{@link number_format()} - 以千位分隔符方式格式化一个数字</span></li>    <li><span class="function">{@link date()} - 格式化 Unix 时间戳</span></li>   </ul>   </div></div>
 * 
 * Parses input from a string according to a format
 * @link https://php.net/manual/zh/function.sscanf.php
 * @param string $string <p>
 * The input string being parsed.
 * </p>
 * @param string $format <p>
 * The interpreted format for str, which is
 * described in the documentation for sprintf with
 * following differences:
 * Function is not locale-aware.
 * F, g, G and
 * b are not supported.
 * D stands for decimal number.
 * i stands for integer with base detection.
 * n stands for number of characters processed so far.
 * </p>
 * @param mixed &...$vars [optional]
 * @return array|int|null If only
 * two parameters were passed to this function, the values parsed
 * will be returned as an array. Otherwise, if optional parameters are passed,
 * the function will return the number of assigned values. The optional
 * parameters must be passed by reference.
 */
function sscanf(string $string, string $format, #[TypeContract(exists: "int|null", notExists: "array|null")] mixed &...$vars): array|int|null {}

/**
 * <div id="function.fscanf" class="refentry"> <div class="refnamediv">  <h1 class="refname">fscanf</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.1, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">fscanf</span> — <span class="dc-title">从文件中格式化输入</span></p> </div>  <div class="refsect1 description" id="refsect1-function.fscanf-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>fscanf</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> <span class="parameter" style="color:#3A95FF">\$stream</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$format</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.mixed.php" class="type mixed" style="color:#EAB766">mixed</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;...\$vars</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>fscanf()</strong></span> 函数和 <span class="function">{@link sscanf()}</span> 相似，但是它从与   <span class="parameter" style="color:#3A95FF">stream</span> 关联的文件中接受输入并根据指定的   <span class="parameter" style="color:#3A95FF">format</span> 来解释输入。  </p>  <p class="para">   格式字符串中的任何空白会与输入流中的任何空白匹配。这意味着甚至格式字符串中的制表符（<span class="literal">\t</span>）也会与输入流中的一个空格字符匹配。  </p>  <p class="para">   每次调用 <span class="function"><strong>fscanf()</strong></span> 都会从文件中读取一行。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.fscanf-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">stream</span></dt>     <dd>      <p class="para">文件系统指针，是典型地由<span class="function">{@link fopen()}</span> 创建的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span>(资源)。</p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">format</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">string</span> 的格式解释，在 <span class="function">{@link sprintf()}</span> 的文档中进行了描述，但有以下区别：       </p><ul class="simplelist">        <li>         函数不支持区域设置。        </li>        <li>         不支持 <span class="literal">F</span>、<span class="literal">g</span>、<span class="literal">G</span> 和 <span class="literal">b</span>。        </li>        <li>         <span class="literal">D</span> 代表十进制数字。        </li>        <li>         <span class="literal">i</span> stands for integer with base detection.        </li>        <li>         <span class="literal">n</span> 代表到目前为止处理的字符数。        </li>        <li>         <span class="literal">s</span> 在任何空白字符处停止阅读。        </li>        <li>         <span class="literal">*</span> 代替 <span class="literal">argnum\$</span> 禁止分配此转换规范。        </li>       </ul>           </dd>             <dt><span class="parameter" style="color:#3A95FF">vars</span></dt>     <dd>      <p class="para">       可选赋值。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.fscanf-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   如果只给此函数传递了两个参数，解析后的值会被作为数组返回。否则，如果提供了可选参数，此函数将返回被赋值的数目。   可选参数必须用引用传递。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">format</span> 中预期的子字符串超出 <span class="parameter" style="color:#3A95FF">string</span>   中有效的子字符串，则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。其它错误将返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-function.fscanf-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-2352">    <p><strong>示例 #1 <span class="function"><strong>fscanf()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$handle </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">"users.txt"</span><span style="color: #007700">, </span><span style="color: #DD0000">"r"</span><span style="color: #007700">);<br>while (</span><span style="color: #9876AA">\$userinfo </span><span style="color: #007700">= </span><span style="color: #9876AA">fscanf</span><span style="color: #007700">(</span><span style="color: #9876AA">\$handle</span><span style="color: #007700">, </span><span style="color: #DD0000">"%s\t%s\t%s\n"</span><span style="color: #007700">)) {<br>    list (</span><span style="color: #9876AA">\$name</span><span style="color: #007700">, </span><span style="color: #9876AA">\$profession</span><span style="color: #007700">, </span><span style="color: #9876AA">\$countrycode</span><span style="color: #007700">) = </span><span style="color: #9876AA">\$userinfo</span><span style="color: #007700">;<br>    </span><span style="color: #FF8000">//... do something with the values<br></span><span style="color: #007700">}<br></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">\$handle</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-2353">    <p><strong>示例 #2 users.txt 的内容</strong></p>    <div class="example-contents"><div class="txtcode"><blockquote style="border:1px gray solid;">javier&nbsp;&nbsp;argonaut&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pe<br>hiroshi&nbsp;sculptor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jp<br>robert&nbsp;&nbsp;slacker&nbsp;us<br>luigi&nbsp;&nbsp;&nbsp;florist&nbsp;it</blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.fscanf-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link fread()} - 读取文件（可安全用于二进制文件）</span></li>    <li><span class="function">{@link fgets()} - 从文件指针中读取一行</span></li>    <li><span class="function">{@link fgetss()} - 从文件指针中读取一行并过滤掉 HTML 标记</span></li>    <li><span class="function">{@link sscanf()} - 根据指定格式解析输入的字符</span></li>    <li><span class="function">{@link printf()} - 输出格式化字符串</span></li>    <li><span class="function">{@link sprintf()} - 返回格式化字符串</span></li>   </ul>   </div></div>
 * 
 * Parses input from a file according to a format
 * @link https://php.net/manual/zh/function.fscanf.php
 * @param resource $stream &fs.file.pointer;
 * @param string $format <p>
 * The specified format as described in the
 * sprintf documentation.
 * </p>
 * @param mixed &...$vars [optional]
 * @return array|int|false|null If only two parameters were passed to this function, the values parsed will be
 * returned as an array. Otherwise, if optional parameters are passed, the
 * function will return the number of assigned values. The optional
 * parameters must be passed by reference.
 */
function fscanf($stream, string $format, #[TypeContract(exists: "int|false|null", notExists: "array|false|null")] mixed &...$vars): array|int|false|null {}

/**
 * <div id="function.parse-url" class="refentry"> <div class="refnamediv">  <h1 class="refname">parse_url</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">parse_url</span> — <span class="dc-title">解析 URL，返回其组成部分</span></p> </div>  <div class="refsect1 description" id="refsect1-function.parse-url-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>parse_url</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$url</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$component</span><span class="initializer"> = -1</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   本函数解析 URL 并返回关联数组，包含在 URL 中出现的各种组成部分。数组的元素值<em>不会</em>   URL 解码。  </p>  <p class="para">   本函数<strong>不是</strong>用来验证给定 URL   的有效性的，只是将其分解为下面列出的部分。也会接受不完整或无效的 URL，<span class="function"><strong>parse_url()</strong></span> 会尝试尽量正确解析。  </p>  <div class="caution"><strong class="caution">警告</strong>   <p class="para">    此函数可能无法对相对和无效 URL 提供正确的结果，结果甚至可能会跟常见的 HTTP 客户端行为不匹配。如果需要解析来自不受信任输入的    URL，则需要另外验证，例如，使用带 <strong><span><a href="https://php.net/manual/zh/filter.constants.php#constant.filter-validate-url">FILTER_VALIDATE_URL</a></span></strong> 过滤器的 <span class="function">{@link filter_var()}</span>。   </p>  </div> </div> <div class="refsect1 parameters" id="refsect1-function.parse-url-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">url</span></dt>     <dd>      <p class="para">       要解析的 URL。      </p>     </dd>       </dl>   <dl>         <dt><span class="parameter" style="color:#3A95FF">component</span></dt>     <dd>      <p class="para">       指定 <strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-scheme">PHP_URL_SCHEME</a></span></strong>、<strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-host">PHP_URL_HOST</a></span></strong>、<strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-port">PHP_URL_PORT</a></span></strong>、<strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-user">PHP_URL_USER</a></span></strong>、<strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-pass">PHP_URL_PASS</a></span></strong>、<strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-path">PHP_URL_PATH</a></span></strong>、<strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-query">PHP_URL_QUERY</a></span></strong>       或 <strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-fragment">PHP_URL_FRAGMENT</a></span></strong> 的其中一个来获取 URL 中指定的部分的       <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>。（当指定为 <strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-port">PHP_URL_PORT</a></span></strong> 时，返回值将是 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>）。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.parse-url-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   对严重不合格的 URL，<span class="function"><strong>parse_url()</strong></span> 可能会返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。   </p>     <p class="para">    如果省略了 <span class="parameter" style="color:#3A95FF">component</span> 参数，将返回关联数组 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>。至少会有一个元素出现在数组中。数组中可能的键有以下几种：   </p><ul class="itemizedlist">    <li class="listitem">     <span class="simpara">      <var class="varname">scheme</var>——如 <span class="literal">http</span>     </span>    </li>    <li class="listitem">     <span class="simpara">      <var class="varname">host</var>      </span>    </li>    <li class="listitem">     <span class="simpara">      <var class="varname">port</var>     </span>    </li>    <li class="listitem">     <span class="simpara">      <var class="varname">user</var>     </span>    </li>    <li class="listitem">     <span class="simpara">      <var class="varname">pass</var>     </span>    </li>    <li class="listitem">     <span class="simpara">      <var class="varname">path</var>     </span>    </li>    <li class="listitem">     <span class="simpara">      <var class="varname">query</var>——在问号 <span class="literal">?</span> 之后     </span>    </li>    <li class="listitem">     <span class="simpara">      <var class="varname">fragment</var>——在注释符号 <span class="literal">#</span> 之后     </span>    </li>   </ul>    <p class="para">   如果指定 <span class="parameter" style="color:#3A95FF">component</span> 参数，<span class="function"><strong>parse_url()</strong></span> 返回 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> （或在指定为   <strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-url-port">PHP_URL_PORT</a></span></strong> 时返回 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>）而不是 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>。如果 URL   中指定的组成部分不存在，将会返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。自 PHP 8.0.0 起，<span class="function"><strong>parse_url()</strong></span> 开始对 query 和 fragment   区分不存在和空值。  </p>  <p class="para">   </p><div class="informalexample">    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="returnvaluescode"><blockquote style="border:1px gray solid;">http://example.com/foo&nbsp;â&nbsp;query&nbsp;=&nbsp;null,&nbsp;fragment&nbsp;=&nbsp;null<br>http://example.com/foo?&nbsp;â&nbsp;query&nbsp;=&nbsp;"",&nbsp;&nbsp;&nbsp;fragment&nbsp;=&nbsp;null<br>http://example.com/foo#&nbsp;â&nbsp;query&nbsp;=&nbsp;null,&nbsp;fragment&nbsp;=&nbsp;""<br>http://example.com/foo?#&nbsp;â&nbsp;query&nbsp;=&nbsp;"",&nbsp;&nbsp;&nbsp;fragment&nbsp;=&nbsp;""</blockquote></div>    </div>   </div>    <p class="para">    之前所有的情况都会导致 query 和 fragment 为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。  </p>  <p class="para">   注意组件中的控制字符（参见 <span class="function">{@link ctype_cntrl()}</span>）替换为下划线（<span class="literal">_</span>）。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.parse-url-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="function"><strong>parse_url()</strong></span> 现在对 query 和 fragment   区分不存在和空值。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.parse-url-examples">  <h3 class="title">示例</h3>  <p class="para">  </p><div class="example" id="example-4111">   <p><strong>示例 #1 <span class="function"><strong>parse_url()</strong></span> 示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$url </span><span style="color: #007700">= </span><span style="color: #DD0000">'http://username:password@hostname:9090/path?arg=value#anchor'</span><span style="color: #007700">;<br><br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_URL_SCHEME</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_URL_USER</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_URL_PASS</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_URL_HOST</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_URL_PORT</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_URL_PATH</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_URL_QUERY</span><span style="color: #007700">));<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">, </span><span style="color: #9876AA">PHP_URL_FRAGMENT</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(8)&nbsp;{<br>&nbsp;&nbsp;["scheme"]=&gt;<br>&nbsp;&nbsp;string(4)&nbsp;"http"<br>&nbsp;&nbsp;["host"]=&gt;<br>&nbsp;&nbsp;string(8)&nbsp;"hostname"<br>&nbsp;&nbsp;["port"]=&gt;<br>&nbsp;&nbsp;int(9090)<br>&nbsp;&nbsp;["user"]=&gt;<br>&nbsp;&nbsp;string(8)&nbsp;"username"<br>&nbsp;&nbsp;["pass"]=&gt;<br>&nbsp;&nbsp;string(8)&nbsp;"password"<br>&nbsp;&nbsp;["path"]=&gt;<br>&nbsp;&nbsp;string(5)&nbsp;"/path"<br>&nbsp;&nbsp;["query"]=&gt;<br>&nbsp;&nbsp;string(9)&nbsp;"arg=value"<br>&nbsp;&nbsp;["fragment"]=&gt;<br>&nbsp;&nbsp;string(6)&nbsp;"anchor"<br>}<br>string(4)&nbsp;"http"<br>string(8)&nbsp;"username"<br>string(8)&nbsp;"password"<br>string(8)&nbsp;"hostname"<br>int(9090)<br>string(5)&nbsp;"/path"<br>string(9)&nbsp;"arg=value"<br>string(6)&nbsp;"anchor"</blockquote></div>   </div>  </div>    <p class="para">   </p><div class="example" id="example-4112">    <p><strong>示例 #2 <span class="function"><strong>parse_url()</strong></span> 解析丢失协议的示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$url </span><span style="color: #007700">= </span><span style="color: #DD0000">'//www.example.com/path?googleguy=googley'</span><span style="color: #007700">;<br><br></span><span style="color: #FF8000">// 在 5.4.7 之前这会输出路径 "//www.example.com/path"<br></span><span style="color: #9876AA">var_dump</span><span style="color: #007700">(</span><span style="color: #9876AA">parse_url</span><span style="color: #007700">(</span><span style="color: #9876AA">\$url</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">array(3)&nbsp;{<br>&nbsp;&nbsp;["host"]=&gt;<br>&nbsp;&nbsp;string(15)&nbsp;"www.example.com"<br>&nbsp;&nbsp;["path"]=&gt;<br>&nbsp;&nbsp;string(5)&nbsp;"/path"<br>&nbsp;&nbsp;["query"]=&gt;<br>&nbsp;&nbsp;string(17)&nbsp;"googleguy=googley"<br>}</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.parse-url-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    <span class="function"><strong>parse_url()</strong></span> 是专门用来解析 URL 而不是 URI 的。不过为遵从 PHP    向后兼容的需要有个例外，对 <span class="literal">file://</span> 协议允许三个斜线（<span class="literal">file:///...</span>）。其它任何协议都不能这样。   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.parse-url-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link pathinfo()} - 返回文件路径的信息</span></li>    <li><span class="function">{@link parse_str()} - 解析 URL 查询字符串</span></li>    <li><span class="function">{@link http_build_query()} - 生成 URL-encode 之后的请求字符串</span></li>    <li><span class="function">{@link dirname()} - 返回路径中的目录部分</span></li>    <li><span class="function">{@link basename()} - 返回路径中的文件名部分</span></li>    <li><a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC 3986</a></li>   </ul>   </div></div>
 * 
 * Parse a URL and return its components
 * @link https://php.net/manual/zh/function.parse-url.php
 * @param string $url <p>
 * The URL to parse. Invalid characters are replaced by
 * _.
 * </p>
 * @param int $component [optional] <p>
 * Specify one of PHP_URL_SCHEME,
 * PHP_URL_HOST, PHP_URL_PORT,
 * PHP_URL_USER, PHP_URL_PASS,
 * PHP_URL_PATH, PHP_URL_QUERY
 * or PHP_URL_FRAGMENT to retrieve just a specific
 * URL component as a string.
 * </p>
 * @return array|string|int|null|false On seriously malformed URLs, parse_url() may return FALSE.
 * If the component parameter is omitted, an associative array is returned.
 * At least one element will be present within the array. Potential keys within this array are:
 * scheme - e.g. http
 * host
 * port
 * user
 * pass
 * path
 * query - after the question mark ?
 * fragment - after the hashmark #
 * </p>
 * <p>
 * If the component parameter is specified a
 * string is returned instead of an array.
 */
#[ArrayShape(["scheme" => "string", "host" => "string", "port" => "int", "user" => "string", "pass" => "string", "query" => "string", "path" => "string", "fragment" => "string"])]
#[Pure]
function parse_url(string $url, int $component = -1): array|string|int|false|null {}

/**
 * <div id="function.urlencode" class="refentry"> <div class="refnamediv">  <h1 class="refname">urlencode</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">urlencode</span> — <span class="dc-title">编码 URL 字符串</span></p> </div> <div class="refsect1 description" id="refsect1-function.urlencode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>urlencode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   此函数便于将字符串编码并将其用于 URL 的请求部分，同时它还便于将变量传递给下一页。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.urlencode-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       要编码的字符串。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.urlencode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回字符串，此字符串中除了 <span class="literal">-_.</span>    之外的所有非字母数字字符都将被替换成百分号（<span class="literal">%</span>）后跟两位十六进制数，空格则编码为加号（<span class="literal">+</span>）。此编码与   WWW 表单 POST 数据的编码方式是一样的，同时与 <span class="literal">application/x-www-form-urlencoded</span>   的媒体类型编码方式一样。由于历史原因，此编码在将空格编码为加号（+）方面与   <a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC3986</a> 编码（参见 <span class="function">{@link rawurlencode()}</span>）不同。  </p> </div> <div class="refsect1 examples" id="refsect1-function.urlencode-examples">  <h3 class="title">示例</h3>   <p class="para">     </p><div class="example" id="example-4117">    <p><strong>示例 #1 <span class="function"><strong>urlencode()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$userinput </span><span style="color: #007700">= </span><span style="color: #DD0000">'Data123!@-_ +'</span><span style="color: #007700">;<br>echo </span><span style="color: #DD0000">"UserInput: </span><span style="color: #9876AA">\$userinput</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #DD0000">'&lt;a href="mycgi?foo='</span><span style="color: #007700">, </span><span style="color: #9876AA">urlencode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$userinput</span><span style="color: #007700">), </span><span style="color: #DD0000">'"&gt;'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">UserInput:&nbsp;Data123!@-_&nbsp;+<br><a></a></blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-4118">    <p><strong>示例 #2 <span class="function"><strong>urlencode()</strong></span> 与 <span class="function">{@link htmlentities()}</span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$foo </span><span style="color: #007700">= </span><span style="color: #DD0000">'Data123!@-_ +'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$bar </span><span style="color: #007700">= </span><span style="color: #DD0000">"Not the same content as </span><span style="color: #9876AA">\$foo</span><span style="color: #DD0000">"</span><span style="color: #007700">;<br>echo </span><span style="color: #DD0000">"foo: </span><span style="color: #9876AA">\$foo</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #DD0000">"bar: </span><span style="color: #9876AA">\$bar</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$query_string </span><span style="color: #007700">= </span><span style="color: #DD0000">'foo=' </span><span style="color: #007700">. </span><span style="color: #9876AA">urlencode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$foo</span><span style="color: #007700">) . </span><span style="color: #DD0000">'&amp;bar=' </span><span style="color: #007700">. </span><span style="color: #9876AA">urlencode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$bar</span><span style="color: #007700">);<br>echo </span><span style="color: #DD0000">'&lt;a href="mycgi?' </span><span style="color: #007700">. </span><span style="color: #9876AA">htmlentities</span><span style="color: #007700">(</span><span style="color: #9876AA">\$query_string</span><span style="color: #007700">) . </span><span style="color: #DD0000">'"&gt;'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">foo:&nbsp;Data123!@-_&nbsp;+<br>bar:&nbsp;Not&nbsp;the&nbsp;same&nbsp;content&nbsp;as&nbsp;Data123!@-_&nbsp;+<br><a></a></blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.urlencode-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    注意：小心与 HTML 实体相匹配的变量。像 &amp;amp、&amp;copy 和 &amp;pound     都将被浏览器解析，并使用实际实体替代所期待的变量名。这是明显的混乱，W3C    已经告诫人们好几年了。参考地址：<a href="http://www.w3.org/TR/html4/appendix/notes.html#h-B.2.2" class="link external">»&nbsp;http://www.w3.org/TR/html4/appendix/notes.html#h-B.2.2</a>。   </p>   <p class="para">    PHP 通过 arg_separator.ini 指令，支持将参数分割符变成 W3C     所建议的分号。不幸的是大多数用户代理并不发送分号分隔符格式的表单数据。较为简单的解决办法是使用    &amp;amp; 代替 &amp; 作为分隔符。你不需要为此修改 PHP    的 arg_separator。让它仍为 &amp;，而仅使用 <span class="function">{@link htmlentities()}</span>    或 <span class="function">{@link htmlspecialchars()}</span> 对你的 URL 进行编码。   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.urlencode-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>    <li><span class="function">{@link htmlentities()} - 将字符转换为 HTML 转义字符</span></li>    <li><span class="function">{@link rawurlencode()} - 按照 RFC 3986 对 URL 进行编码</span></li>    <li><span class="function">{@link rawurldecode()} - 对已编码的 URL 字符串进行解码</span></li>    <li><a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC 3986</a></li>   </ul>   </div></div>
 * 
 * URL-encodes string
 * @link https://php.net/manual/zh/function.urlencode.php
 * @param string $string <p>
 * The string to be encoded.
 * </p>
 * @return string a string in which all non-alphanumeric characters except
 * -_. have been replaced with a percent
 * (%) sign followed by two hex digits and spaces encoded
 * as plus (+) signs. It is encoded the same way that the
 * posted data from a WWW form is encoded, that is the same way as in
 * application/x-www-form-urlencoded media type. This
 * differs from the RFC 3986 encoding (see
 * rawurlencode) in that for historical reasons, spaces
 * are encoded as plus (+) signs.
 */
#[Pure]
function urlencode(string $string): string {}

/**
 * <div id="function.urldecode" class="refentry"> <div class="refnamediv">  <h1 class="refname">urldecode</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">urldecode</span> — <span class="dc-title">解码已编码的 URL 字符串</span></p> </div> <div class="refsect1 description" id="refsect1-function.urldecode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>urldecode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   解码给出的已编码字符串中的任何   <span class="literal">%<span class="replaceable">##</span></span>。   加号（'<span class="literal">+</span>'）被解码成一个空格字符。     </p> </div>  <div class="refsect1 parameters" id="refsect1-function.urldecode-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       要解码的字符串。      </p>     </dd>       </dl>   </div>  <div class="refsect1 returnvalues" id="refsect1-function.urldecode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回解码后的字符串。  </p> </div> <div class="refsect1 examples" id="refsect1-function.urldecode-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-4116">    <p><strong>示例 #1 <span class="function"><strong>urldecode()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$query </span><span style="color: #007700">= </span><span style="color: #DD0000">"my=apples&amp;are=green+and+red"</span><span style="color: #007700">;<br><br>foreach (</span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'&amp;'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$query</span><span style="color: #007700">) as </span><span style="color: #9876AA">\$chunk</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$param </span><span style="color: #007700">= </span><span style="color: #9876AA">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">"="</span><span style="color: #007700">, </span><span style="color: #9876AA">\$chunk</span><span style="color: #007700">);<br><br>    if (</span><span style="color: #9876AA">\$param</span><span style="color: #007700">) {<br>        </span><span style="color: #9876AA">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"Value for parameter \"%s\" is \"%s\"&lt;br/&gt;\n"</span><span style="color: #007700">, </span><span style="color: #9876AA">urldecode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$param</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]), </span><span style="color: #9876AA">urldecode</span><span style="color: #007700">(</span><span style="color: #9876AA">\$param</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]));<br>    }<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.urldecode-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    超全局变量  <var class="varname"><a href="https://php.net/manual/zh/reserved.variables.get.php" class="classname">\$_GET</a></var> 和 <var class="varname"><a href="https://php.net/manual/zh/reserved.variables.request.php" class="classname">\$_REQUEST</a></var> 已经被解码了。对    <var class="varname"><a href="https://php.net/manual/zh/reserved.variables.get.php" class="classname">\$_GET</a></var> 或 <var class="varname"><a href="https://php.net/manual/zh/reserved.variables.request.php" class="classname">\$_REQUEST</a></var> 里的元素使用    <span class="function"><strong>urldecode()</strong></span> 将会导致不可预计和危险的结果。   </p>  </div> </div> <div class="refsect1 seealso" id="refsect1-function.urldecode-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>    <li><span class="function">{@link rawurlencode()} - 按照 RFC 3986 对 URL 进行编码</span></li>    <li><span class="function">{@link rawurldecode()} - 对已编码的 URL 字符串进行解码</span></li>    <li><a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC 3986</a></li>   </ul>   </div></div>
 * 
 * Decodes URL-encoded string
 * @link https://php.net/manual/zh/function.urldecode.php
 * @param string $string <p>
 * The string to be decoded.
 * </p>
 * @return string the decoded string.
 */
#[Pure]
function urldecode(string $string): string {}

/**
 * <div id="function.rawurlencode" class="refentry"> <div class="refnamediv">  <h1 class="refname">rawurlencode</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">rawurlencode</span> — <span class="dc-title">按照 RFC 3986 对 URL 进行编码</span></p> </div> <div class="refsect1 description" id="refsect1-function.rawurlencode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>rawurlencode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   根据 <a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC 3986</a> 编码指定的字符。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.rawurlencode-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       要编码的 URL。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.rawurlencode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回字符串，此字符串中除了 <span class="literal">-_.</span>    之外的所有非字母数字字符都将被替换成百分号（<span class="literal">%</span>）后跟两位十六进制数。这是在   <a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC 3986</a> 中描述的编码，是为了保护原义字符以免其被解释为特殊的    URL 定界符，同时保护 URL 格式以免其被传输媒体（像一些邮件系统）使用字符转换时弄乱。  </p> </div> <div class="refsect1 examples" id="refsect1-function.rawurlencode-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-4114">    <p><strong>示例 #1 在 FTP URL 里包含一个密码</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">echo </span><span style="color: #DD0000">'&lt;a href="ftp://user:'</span><span style="color: #007700">, </span><span style="color: #9876AA">rawurlencode</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo @+%/'</span><span style="color: #007700">),<br>     </span><span style="color: #DD0000">'@ftp.example.com/x.txt"&gt;'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;"><a></a></blockquote></div>    </div>   </div>    <p class="para">   或者，如果你想通过 URL 的 PATH_INFO 构成部分去传递信息：  </p>  <p class="para">   </p><div class="example" id="example-4115">    <p><strong>示例 #2 <span class="function"><strong>rawurlencode()</strong></span> 示例 2</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">echo </span><span style="color: #DD0000">'&lt;a href="http://example.com/department_list_script/'</span><span style="color: #007700">,<br>    </span><span style="color: #9876AA">rawurlencode</span><span style="color: #007700">(</span><span style="color: #DD0000">'sales and marketing/Miami'</span><span style="color: #007700">), </span><span style="color: #DD0000">'"&gt;'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;"><a></a></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.rawurlencode-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link rawurldecode()} - 对已编码的 URL 字符串进行解码</span></li>    <li><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>    <li><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>    <li><a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC 3986</a></li>   </ul>   </div></div>
 * 
 * URL-encode according to RFC 3986
 * @link https://php.net/manual/zh/function.rawurlencode.php
 * @param string $string <p>
 * The URL to be encoded.
 * </p>
 * @return string a string in which all non-alphanumeric characters except
 * -_. have been replaced with a percent
 * (%) sign followed by two hex digits. This is the
 * encoding described in RFC 1738 for
 * protecting literal characters from being interpreted as special URL
 * delimiters, and for protecting URLs from being mangled by transmission
 * media with character conversions (like some email systems).
 */
#[Pure]
function rawurlencode(string $string): string {}

/**
 * <div id="function.rawurldecode" class="refentry"> <div class="refnamediv">  <h1 class="refname">rawurldecode</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">rawurldecode</span> — <span class="dc-title">对已编码的 URL 字符串进行解码</span></p> </div>   <div class="refsect1 description" id="refsect1-function.rawurldecode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>rawurldecode</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$string</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   返回字符串，此字符串中百分号（<span class="literal">%</span>）后跟两位十六进制数的序列都将被替换成原义字符。  </p> </div>   <div class="refsect1 parameters" id="refsect1-function.rawurldecode-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">string</span></dt>     <dd>      <p class="para">       要解码的 URL。      </p>     </dd>       </dl>   </div>  <div class="refsect1 returnvalues" id="refsect1-function.rawurldecode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回解码后的 URL 字符串。  </p> </div>  <div class="refsect1 examples" id="refsect1-function.rawurldecode-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-4113">    <p><strong>示例 #1 <span class="function"><strong>rawurldecode()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">echo </span><span style="color: #9876AA">rawurldecode</span><span style="color: #007700">(</span><span style="color: #DD0000">'foo%20bar%40baz'</span><span style="color: #007700">); </span><span style="color: #FF8000">// foo bar@baz<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.rawurldecode-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">   <span class="function"><strong>rawurldecode()</strong></span> 不会把加号（'+'）解码为空格，而    <span class="function">{@link urldecode()}</span> 可以。   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.rawurldecode-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link rawurlencode()} - 按照 RFC 3986 对 URL 进行编码</span></li>    <li><span class="function">{@link urldecode()} - 解码已编码的 URL 字符串</span></li>    <li><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>    <li><a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC 3986</a></li>   </ul>   </div> </div>
 * 
 * Decode URL-encoded strings
 * @link https://php.net/manual/zh/function.rawurldecode.php
 * @param string $string <p>
 * The URL to be decoded.
 * </p>
 * @return string the decoded URL, as a string.
 */
#[Pure]
function rawurldecode(string $string): string {}

/**
 * <div id="function.http-build-query" class="refentry"> <div class="refnamediv">  <h1 class="refname">http_build_query</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">http_build_query</span> — <span class="dc-title">生成 URL-encode 之后的请求字符串</span></p> </div>  <div class="refsect1 description" id="refsect1-function.http-build-query-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>http_build_query</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.object.php" class="type object" style="color:#EAB766">object</a></span></span> <span class="parameter" style="color:#3A95FF">\$data</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$numeric_prefix</span><span class="initializer"> = ""</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$arg_separator</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$encoding_type</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-query-rfc1738">PHP_QUERY_RFC1738</a></span></strong></span></span><br>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   使用给出的关联（或下标）数组生成一个经过   URL-encode 的请求字符串。  </p> </div>   <div class="refsect1 parameters" id="refsect1-function.http-build-query-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">data</span></dt>     <dd>      <p class="para">       可以是数组或包含属性的对象。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">data</span> 是数组，可以是一维结构，也可以是由数组组成的数组（其依次可以包含其它数组）。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">data</span> 是一个对象，只有 public 的属性会加入结果。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">numeric_prefix</span></dt>     <dd>      <p class="para">       如果在基础数组中使用了数字下标同时给出了该参数，此参数值将会作为基础数组中的数字下标元素的前缀。      </p>      <p class="para">       这是为了让   PHP 或其它 CGI   程序在稍后对数据进行解码时获取合法的变量名。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">arg_separator</span></dt>     <dd>      <p class="para">       参数分隔符。如果未设置或为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>，<a href="https://php.net/manual/zh/ini.core.php#ini.arg-separator.output" class="link">arg_separator.output</a>       用于分隔参数。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">encoding_type</span></dt>     <dd>      <p class="para">       默认使用 <strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-query-rfc1738">PHP_QUERY_RFC1738</a></span></strong>。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">encoding_type</span> 是 <strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-query-rfc1738">PHP_QUERY_RFC1738</a></span></strong>，则编码将会以       <a href="https://datatracker.ietf.org/doc/html/rfc1738" class="link external">»&nbsp;RFC 1738</a> 标准和 <span class="literal">application/x-www-form-urlencoded</span>       媒体类型进行编码，空格会被编码成加号（<span class="literal">+</span>）。      </p>      <p class="para">       如果 <span class="parameter" style="color:#3A95FF">encoding_type</span> 是 <strong><span><a href="https://php.net/manual/zh/url.constants.php#constant.php-query-rfc3986">PHP_QUERY_RFC3986</a></span></strong>，将根据       <a href="https://datatracker.ietf.org/doc/html/rfc3986" class="link external">»&nbsp;RFC 3986</a> 编码，空格会被百分号编码（<span class="literal">%20</span>）。      </p>     </dd>       </dl>   </div>   <div class="refsect1 returnvalues" id="refsect1-function.http-build-query-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回一个 URL 编码后的字符串。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.http-build-query-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       <span class="parameter" style="color:#3A95FF">arg_separator</span> 现在可为 null。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.http-build-query-examples">  <h3 class="title">示例</h3>  <div class="example" id="example-4107">   <p><strong>示例 #1 <span class="function"><strong>http_build_query()</strong></span> 使用示例</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$data </span><span style="color: #007700">= array(<br>    </span><span style="color: #DD0000">'foo' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">'baz' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'boom'</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">'cow' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'milk'</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">'null' </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">null</span><span style="color: #007700">,<br>    </span><span style="color: #DD0000">'php' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'hypertext processor'<br></span><span style="color: #007700">);<br><br>echo </span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">\$data</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">\$data</span><span style="color: #007700">, </span><span style="color: #DD0000">''</span><span style="color: #007700">, </span><span style="color: #DD0000">'&amp;amp;'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor<br>foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor</blockquote></div>   </div>  </div>  <div class="example" id="example-4108">   <p><strong>示例 #2 <span class="function"><strong>http_build_query()</strong></span> 使用数字下标的元素</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$data </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'foo'</span><span style="color: #007700">, </span><span style="color: #DD0000">'bar'</span><span style="color: #007700">, </span><span style="color: #DD0000">'baz'</span><span style="color: #007700">, </span><span style="color: #9876AA">null</span><span style="color: #007700">, </span><span style="color: #DD0000">'boom'</span><span style="color: #007700">, </span><span style="color: #DD0000">'cow' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'milk'</span><span style="color: #007700">, </span><span style="color: #DD0000">'php' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'hypertext processor'</span><span style="color: #007700">);<br><br>echo </span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">\$data</span><span style="color: #007700">) . </span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br>echo </span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">\$data</span><span style="color: #007700">, </span><span style="color: #DD0000">'myvar_'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">0=foo&amp;1=bar&amp;2=baz&amp;4=boom&amp;cow=milk&amp;php=hypertext+processor<br>myvar_0=foo&amp;myvar_1=bar&amp;myvar_2=baz&amp;myvar_4=boom&amp;cow=milk&amp;php=hypertext+processor</blockquote></div>   </div>  </div>  <div class="example" id="example-4109">   <p><strong>示例 #3 <span class="function"><strong>http_build_query()</strong></span> 使用复杂的数组</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$data </span><span style="color: #007700">= array(<br>    </span><span style="color: #DD0000">'user' </span><span style="color: #007700">=&gt; array(<br>        </span><span style="color: #DD0000">'name' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'Bob Smith'</span><span style="color: #007700">,<br>        </span><span style="color: #DD0000">'age'  </span><span style="color: #007700">=&gt; </span><span style="color: #9876AA">47</span><span style="color: #007700">,<br>        </span><span style="color: #DD0000">'sex'  </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'M'</span><span style="color: #007700">,<br>        </span><span style="color: #DD0000">'dob'  </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'5/12/1956'<br>    </span><span style="color: #007700">),<br>    </span><span style="color: #DD0000">'pastimes' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'golf'</span><span style="color: #007700">, </span><span style="color: #DD0000">'opera'</span><span style="color: #007700">, </span><span style="color: #DD0000">'poker'</span><span style="color: #007700">, </span><span style="color: #DD0000">'rap'</span><span style="color: #007700">),<br>    </span><span style="color: #DD0000">'children' </span><span style="color: #007700">=&gt; array(<br>        </span><span style="color: #DD0000">'bobby' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'age'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">12</span><span style="color: #007700">, </span><span style="color: #DD0000">'sex'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'M'</span><span style="color: #007700">),<br>        </span><span style="color: #DD0000">'sally' </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">'age'</span><span style="color: #007700">=&gt;</span><span style="color: #9876AA">8</span><span style="color: #007700">, </span><span style="color: #DD0000">'sex'</span><span style="color: #007700">=&gt;</span><span style="color: #DD0000">'F'</span><span style="color: #007700">)<br>    ),<br>    </span><span style="color: #DD0000">'CEO'<br></span><span style="color: #007700">);<br><br>echo </span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">\$data</span><span style="color: #007700">, </span><span style="color: #DD0000">'flags_'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>    上面的例子将输出：（为了可读性，字已经换行了）   </p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">user%5Bname%5D=Bob+Smith&amp;user%5Bage%5D=47&amp;user%5Bsex%5D=M&amp;<br>user%5Bdob%5D=5%2F12%2F1956&amp;pastimes%5B0%5D=golf&amp;pastimes%5B1%5D=opera&amp;<br>pastimes%5B2%5D=poker&amp;pastimes%5B3%5D=rap&amp;children%5Bbobby%5D%5Bage%5D=12&amp;<br>children%5Bbobby%5D%5Bsex%5D=M&amp;children%5Bsally%5D%5Bage%5D=8&amp;<br>children%5Bsally%5D%5Bsex%5D=F&amp;flags_0=CEO</blockquote></div>   </div>   <div class="example-contents"><p>    </p><blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:      </p><p class="para">      只有基础数组中的数字下标元素“CEO”才获取了前缀，其它数字下标元素（如      pastimes 下的元素）则不需要为了合法的变量名而加上前缀。     </p>    </blockquote>   </div>  </div>  <div class="example" id="example-4110">   <p><strong>示例 #4 <span class="function"><strong>http_build_query()</strong></span> 使用对象</strong></p>   <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">class </span><span style="color: #9876AA">parentClass </span><span style="color: #007700">{<br>    public    </span><span style="color: #9876AA">\$pub      </span><span style="color: #007700">= </span><span style="color: #DD0000">'publicParent'</span><span style="color: #007700">;<br>    protected </span><span style="color: #9876AA">\$prot     </span><span style="color: #007700">= </span><span style="color: #DD0000">'protectedParent'</span><span style="color: #007700">;<br>    private   </span><span style="color: #9876AA">\$priv     </span><span style="color: #007700">= </span><span style="color: #DD0000">'privateParent'</span><span style="color: #007700">;<br>    public    </span><span style="color: #9876AA">\$pub_bar  </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br>    protected </span><span style="color: #9876AA">\$prot_bar </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br>    private   </span><span style="color: #9876AA">\$priv_bar </span><span style="color: #007700">= </span><span style="color: #9876AA">null</span><span style="color: #007700">;<br><br>    public function </span><span style="color: #9876AA">__construct</span><span style="color: #007700">(){<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">pub_bar  </span><span style="color: #007700">= new </span><span style="color: #9876AA">childClass</span><span style="color: #007700">();<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">prot_bar </span><span style="color: #007700">= new </span><span style="color: #9876AA">childClass</span><span style="color: #007700">();<br>        </span><span style="color: #9876AA">\$this</span><span style="color: #007700">-&gt;</span><span style="color: #9876AA">priv_bar </span><span style="color: #007700">= new </span><span style="color: #9876AA">childClass</span><span style="color: #007700">();<br>    }<br>}<br><br>class </span><span style="color: #9876AA">childClass </span><span style="color: #007700">{<br>    public    </span><span style="color: #9876AA">\$pub  </span><span style="color: #007700">= </span><span style="color: #DD0000">'publicChild'</span><span style="color: #007700">;<br>    protected </span><span style="color: #9876AA">\$prot </span><span style="color: #007700">= </span><span style="color: #DD0000">'protectedChild'</span><span style="color: #007700">;<br>    private   </span><span style="color: #9876AA">\$priv </span><span style="color: #007700">= </span><span style="color: #DD0000">'privateChild'</span><span style="color: #007700">;<br>}<br><br></span><span style="color: #9876AA">\$parent </span><span style="color: #007700">= new </span><span style="color: #9876AA">parentClass</span><span style="color: #007700">();<br><br>echo </span><span style="color: #9876AA">http_build_query</span><span style="color: #007700">(</span><span style="color: #9876AA">\$parent</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>   </div>   <div class="example-contents"><p>以上示例会输出：</p></div>   <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">pub=publicParent&amp;pub_bar%5Bpub%5D=publicChild</blockquote></div>   </div>  </div> </div> <div class="refsect1 seealso" id="refsect1-function.http-build-query-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link parse_str()} - 解析 URL 查询字符串</span></li>    <li><span class="function">{@link parse_url()} - 解析 URL，返回其组成部分</span></li>    <li><span class="function">{@link urlencode()} - 编码 URL 字符串</span></li>    <li><span class="function">{@link array_walk()} - 使用用户自定义函数对数组中的每个元素做回调处理</span></li>   </ul>   </div> </div>
 * 
 * Generate URL-encoded query string
 * @link https://php.net/manual/zh/function.http-build-query.php
 * @param object|array $data <p>
 * May be an array or object containing properties.
 * </p>
 * <p>
 * If query_data is an array, it may be a simple one-dimensional structure,
 * or an array of arrays (which in turn may contain other arrays).
 * </p>
 * <p>
 * If query_data is an object, then only public properties will be incorporated into the result.
 * </p>
 * @param string $numeric_prefix [optional] <p>
 * If numeric indices are used in the base array and this parameter is
 * provided, it will be prepended to the numeric index for elements in
 * the base array only.
 * </p>
 * <p>
 * This is meant to allow for legal variable names when the data is
 * decoded by PHP or another CGI application later on.
 * </p>
 * @param string|null $arg_separator <p>
 * arg_separator.output
 * is used to separate arguments, unless this parameter is specified,
 * and is then used.
 * </p>
 * @param int $encoding_type By default, PHP_QUERY_RFC1738.
 *  <p>If enc_type is PHP_QUERY_RFC1738, then encoding is performed per » RFC 1738 and the application/x-www-form-urlencoded media type,
 *  which implies that spaces are encoded as plus (+) signs.
 *  <p>If enc_type is PHP_QUERY_RFC3986, then encoding is performed according to » RFC 3986, and spaces will be percent encoded (%20).
 * @return string a URL-encoded string.
 */
#[Pure]
function http_build_query(object|array $data, string $numeric_prefix = "", ?string $arg_separator = null, int $encoding_type = PHP_QUERY_RFC1738): string {}

/**
 * <div id="function.readlink" class="refentry"> <div class="refnamediv">  <h1 class="refname">readlink</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">readlink</span> — <span class="dc-title">返回符号连接指向的目标</span></p> </div>  <div class="refsect1 description" id="refsect1-function.readlink-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>readlink</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$path</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>readlink()</strong></span> 和同名的 C   函数做同样的事，返回符号连接的内容。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.readlink-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">path</span></dt>     <dd>      <p class="para">       链接符号的路径。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.readlink-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回链接的路径内容，出错则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    如果 <span class="parameter" style="color:#3A95FF">path</span> 不是符号链接，则该函数将失败，但在 Windows    上除外，其中将返回规范化的路径。   </span>  </p></blockquote> </div> <div class="refsect1 examples" id="refsect1-function.readlink-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-2390">    <p><strong>示例 #1 <span class="function"><strong>readlink()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #FF8000">// output e.g. /boot/vmlinux-2.4.20-xfs<br></span><span style="color: #007700">echo </span><span style="color: #9876AA">readlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'/vmlinuz'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.readlink-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link is_link()} - 判断给定文件名是否为一个符号连接</span></li>    <li><span class="function">{@link symlink()} - 建立符号连接</span></li>    <li><span class="function">{@link linkinfo()} - 获取一个连接的信息</span></li>   </ul>   </div></div>
 * 
 * Returns the target of a symbolic link
 * @link https://php.net/manual/zh/function.readlink.php
 * @param string $path <p>
 * The symbolic link path.
 * </p>
 * @return string|false the contents of the symbolic link path or false on error.
 */
#[Pure(true)]
function readlink(string $path): string|false {}

/**
 * <div id="function.linkinfo" class="refentry"> <div class="refnamediv">  <h1 class="refname">linkinfo</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">linkinfo</span> — <span class="dc-title">获取一个连接的信息</span></p> </div> <div class="refsect1 description" id="refsect1-function.linkinfo-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>linkinfo</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$path</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取一个连接的信息。  </p>  <p class="para">   本函数用来验证一个连接（由 <span class="parameter" style="color:#3A95FF">path</span>   所指向的）是否确实存在（使用  <var class="filename">stat.h</var> 中的 S_ISLNK   宏同样的方法）。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.linkinfo-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">path</span></dt>     <dd>      <p class="para">       连接的路径。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.linkinfo-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="function"><strong>linkinfo()</strong></span> 返回 <span class="literal">lstat</span>   系统调用所返回的 UNIX C stat 结构中的 <span class="literal">st_dev</span>   字段。成功时返回非负数，如果链接未找到则返回 -1，如果跟 open.base_dir 冲突则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-function.linkinfo-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-2372">    <p><strong>示例 #1 <span class="function"><strong>linkinfo()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br><br></span><span style="color: #007700">echo </span><span style="color: #9876AA">linkinfo</span><span style="color: #007700">(</span><span style="color: #DD0000">'/vmlinuz'</span><span style="color: #007700">); </span><span style="color: #FF8000">// 835<br><br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.linkinfo-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link symlink()} - 建立符号连接</span></li>    <li><span class="function">{@link link()} - 建立一个硬连接</span></li>    <li><span class="function">{@link readlink()} - 返回符号连接指向的目标</span></li>   </ul>   </div></div>
 * 
 * Gets information about a link
 * @link https://php.net/manual/zh/function.linkinfo.php
 * @param string $path <p>
 * Path to the link.
 * </p>
 * @return int|false linkinfo returns the st_dev field
 * of the Unix C stat structure returned by the lstat
 * system call. Returns 0 or false in case of error.
 */
#[Pure(true)]
function linkinfo(string $path): int|false {}

/**
 * <div id="function.symlink" class="refentry"> <div class="refnamediv">  <h1 class="refname">symlink</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">symlink</span> — <span class="dc-title">建立符号连接</span></p> </div> <div class="refsect1 description" id="refsect1-function.symlink-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>symlink</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$target</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$link</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>symlink()</strong></span> 对于已有的   <span class="parameter" style="color:#3A95FF">target</span> 建立一个名为   <span class="parameter" style="color:#3A95FF">link</span> 的符号连接。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.symlink-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">target</span></dt>     <dd>      <p class="para">       连接的目标。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">link</span></dt>     <dd>      <p class="para">       连接的名称。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.symlink-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-function.symlink-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">link</span> 已存在，函数将失败，并发出   <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。在 Windows 上，如果   <span class="parameter" style="color:#3A95FF">target</span> 不存在，函数也会失败，并发出   <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-function.symlink-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-2400">    <p><strong>示例 #1 创建一个符号连接</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$target </span><span style="color: #007700">= </span><span style="color: #DD0000">'uploads.php'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$link </span><span style="color: #007700">= </span><span style="color: #DD0000">'uploads'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">symlink</span><span style="color: #007700">(</span><span style="color: #9876AA">\$target</span><span style="color: #007700">, </span><span style="color: #9876AA">\$link</span><span style="color: #007700">);<br><br>echo </span><span style="color: #9876AA">readlink</span><span style="color: #007700">(</span><span style="color: #9876AA">\$link</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.symlink-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link is_link()} - 判断给定文件名是否为一个符号连接</span></li>    <li><span class="function">{@link link()} - 建立一个硬连接</span></li>    <li><span class="function">{@link readlink()} - 返回符号连接指向的目标</span></li>    <li><span class="function">{@link linkinfo()} - 获取一个连接的信息</span></li>    <li><span class="function">{@link unlink()} - 删除文件</span></li>   </ul>   </div></div>
 * 
 * Creates a symbolic link
 * @link https://php.net/manual/zh/function.symlink.php
 * @param string $target <p>
 * Target of the link.
 * </p>
 * @param string $link <p>
 * The link name.
 * </p>
 * @return bool true on success or false on failure.
 */
function symlink(string $target, string $link): bool {}

/**
 * <div id="function.link" class="refentry"> <div class="refnamediv">  <h1 class="refname">link</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">link</span> — <span class="dc-title">建立一个硬连接</span></p> </div> <div class="refsect1 description" id="refsect1-function.link-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>link</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$target</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$link</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>link()</strong></span> 建立一个硬连接。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.link-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">target</span></dt>     <dd>      <p class="para">       要链接的目标。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">link</span></dt>     <dd>      <p class="para">       链接的名称。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.link-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-function.link-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">link</span> 已存在或者 <span class="parameter" style="color:#3A95FF">target</span>   不存在，此函数会失败并发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-function.link-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-2371">    <p><strong>示例 #1 创建简单的硬链接</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$target </span><span style="color: #007700">= </span><span style="color: #DD0000">'source.ext'</span><span style="color: #007700">; </span><span style="color: #FF8000">// This is the file that already exists<br></span><span style="color: #9876AA">\$link </span><span style="color: #007700">= </span><span style="color: #DD0000">'newfile.ext'</span><span style="color: #007700">; </span><span style="color: #FF8000">// This the filename that you want to link it to<br><br></span><span style="color: #9876AA">link</span><span style="color: #007700">(</span><span style="color: #9876AA">\$target</span><span style="color: #007700">, </span><span style="color: #9876AA">\$link</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.link-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: <span class="simpara">此函数不能作用于<a href="https://php.net/manual/zh/features.remote-files.php" class="link">远程文件</a>，被检查的文件必须是可通过服务器的文件系统访问的。</span></p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <span class="simpara">    仅适用于 Windows：此函数需要 PHP 在提升模式或者禁用 UAC 时运行。   </span>  </p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.link-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link symlink()} - 建立符号连接</span></li>    <li><span class="function">{@link readlink()} - 返回符号连接指向的目标</span></li>    <li><span class="function">{@link linkinfo()} - 获取一个连接的信息</span></li>    <li><span class="function">{@link unlink()} - 删除文件</span></li>   </ul>   </div></div>
 * 
 * Create a hard link
 * @link https://php.net/manual/zh/function.link.php
 * @param string $target Target of the link.
 * @param string $link The link name.
 * @return bool true on success or false on failure.
 */
function link(string $target, string $link): bool {}

/**
 * <div id="function.unlink" class="refentry"> <div class="refnamediv">  <h1 class="refname">unlink</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">unlink</span> — <span class="dc-title">删除文件</span></p> </div> <div class="refsect1 description" id="refsect1-function.unlink-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>unlink</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$filename</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span></span> <span class="parameter" style="color:#3A95FF">\$context</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   删除 <span class="parameter" style="color:#3A95FF">filename</span>。和 Unix C 的   unlink() 函数相似。   发生错误时会产生一个 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> 级别的错误。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.unlink-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">filename</span></dt>     <dd>      <p class="para">       文件的路径。      </p>      <p class="para">       如果文件是符号链接，将会删除符号链接。在 Windows 上，删除目录的符号链接，必须使用 <span class="function">{@link rmdir()}</span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">context</span></dt>     <dd>      <p class="para"><a href="https://php.net/manual/zh/stream.contexts.php" class="link">上下文流（context stream）</a><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span>。</p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.unlink-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.unlink-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>7.3.0</td>      <td>       现在 Windows 也可以用 <span class="function"><strong>unlink()</strong></span> 删除文件句柄还在使用中的文件了，在此之前是无法删除的。       然而，还是无法重新创建文件，需要等到所有句柄都关闭才可以。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.unlink-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-2406">    <p><strong>示例 #1 基本的 <span class="function"><strong>unlink()</strong></span> 用法</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$fh </span><span style="color: #007700">= </span><span style="color: #9876AA">fopen</span><span style="color: #007700">(</span><span style="color: #DD0000">'test.html'</span><span style="color: #007700">, </span><span style="color: #DD0000">'a'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fh</span><span style="color: #007700">, </span><span style="color: #DD0000">'&lt;h1&gt;Hello world!&lt;/h1&gt;'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">\$fh</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">unlink</span><span style="color: #007700">(</span><span style="color: #DD0000">'test.html'</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.unlink-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link rmdir()} - 删除目录</span></li>   </ul>   </div></div>
 * 
 * Deletes a file
 * @link https://php.net/manual/zh/function.unlink.php
 * @param string $filename <p>
 * Path to the file.
 * </p>
 * @param resource $context [optional]
 * @return bool true on success or false on failure.
 */
function unlink(string $filename, $context): bool {}

/**
 * <div id="function.exec" class="refentry"> <div class="refnamediv">  <h1 class="refname">exec</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">exec</span> — <span class="dc-title">执行一个外部程序</span></p> </div> <div class="refsect1 description" id="refsect1-function.exec-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>exec</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$command</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$output</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$result_code</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>exec()</strong></span> 执行   <span class="parameter" style="color:#3A95FF">command</span> 参数所指定的命令。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.exec-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">command</span></dt>     <dd>      <p class="para">       要执行的命令。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">output</span></dt>     <dd>      <p class="para">        如果提供了 <span class="parameter" style="color:#3A95FF">output</span> 参数，        那么会用命令执行的输出填充此数组，        每行输出填充数组中的一个元素。        数组中的数据不包含行尾的空白字符，例如 <span class="literal">\n</span> 字符。        请注意，如果数组中已经包含了部分元素，<span class="function"><strong>exec()</strong></span>        函数会在数组末尾追加内容。如果你不想在数组末尾进行追加，        请在传入 <span class="function"><strong>exec()</strong></span> 函数之前        对数组使用 <span class="function">{@link unset()}</span> 函数进行重置。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">result_code</span></dt>     <dd>      <p class="para">        如果同时提供         <span class="parameter" style="color:#3A95FF">output</span> 和 <span class="parameter" style="color:#3A95FF">result_code</span>        参数，命令执行后的返回状态会被写入到此变量。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.exec-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    命令执行结果的最后一行内容。    如果你需要获取未经处理的全部输出数据，    请使用 <span class="function">{@link passthru()}</span> 函数。  </p>  <p class="para">   失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p>  <p class="para">    如果想要获取命令的输出内容，    请确保使用 <span class="parameter" style="color:#3A95FF">output</span> 参数。  </p> </div> <div class="refsect1 errors" id="refsect1-function.exec-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="function"><strong>exec()</strong></span> 无法执行 <span class="parameter" style="color:#3A95FF">command</span>，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">command</span> 为空或者包含 null 字节，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.exec-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">command</span> 为空或者包含 null 字节，<span class="function"><strong>exec()</strong></span> 现在将抛出       <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。之前会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> 并返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 examples" id="refsect1-function.exec-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3576">    <p><strong>示例 #1 <span class="function"><strong>exec()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 输出运行中的 php/httpd 进程的创建者用户名<br>// （在可以执行 "whoami" 命令的系统上）<br></span><span style="color: #9876AA">\$output</span><span style="color: #007700">=</span><span style="color: #9876AA">null</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$retval</span><span style="color: #007700">=</span><span style="color: #9876AA">null</span><span style="color: #007700">;<br></span><span style="color: #9876AA">exec</span><span style="color: #007700">(</span><span style="color: #DD0000">'whoami'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$output</span><span style="color: #007700">, </span><span style="color: #9876AA">\$retval</span><span style="color: #007700">);<br>echo </span><span style="color: #DD0000">"Returned with status </span><span style="color: #9876AA">\$retval</span><span style="color: #DD0000"> and output:\n"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">print_r</span><span style="color: #007700">(</span><span style="color: #9876AA">\$output</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Returned&nbsp;with&nbsp;status&nbsp;0&nbsp;and&nbsp;output:<br>Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[0]&nbsp;=&gt;&nbsp;cmb<br>)</blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.exec-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong><p class="para">当传入用户提供的数据到本函数时，应使用<span class="function">{@link escapeshellarg()}</span> 或 <span class="function">{@link escapeshellcmd()}</span>来防止用户欺骗系统执行任意命令。</p></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: </p><p class="para">如何程序使用此函数启动，为了能保持在后台运行，此程序必须将输出重定向到文件或其它输出流。否则会导致PHP 挂起，直至程序执行结束。</p></blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: </p><p class="para">在 Windows 下，<span class="function"><strong>exec()</strong></span>函数会先启动 cmd.exe 来执行指定的命令。如果你希望启动一个额外的应用而不用先启动 cmd.exe可使用 <span class="function">{@link proc_open()}</span> 函数加上 <span class="parameter" style="color:#3A95FF">bypass_shell</span> 参数。</p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.exec-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>    <li><span class="function">{@link passthru()} - 执行外部程序并且显示原始输出</span></li>    <li><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>    <li><span class="function">{@link pcntl_exec()} - 在当前进程空间执行指定程序</span></li>    <li><a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>   </ul>   </div></div>
 * 
 * Execute an external program
 * @link https://php.net/manual/zh/function.exec.php
 * @param string $command <p>
 * The command that will be executed.
 * </p>
 * @param array &$output [optional] <p>
 * If the output argument is present, then the
 * specified array will be filled with every line of output from the
 * command. Trailing whitespace, such as \n, is not
 * included in this array. Note that if the array already contains some
 * elements, exec will append to the end of the array.
 * If you do not want the function to append elements, call
 * unset on the array before passing it to
 * exec.
 * </p>
 * @param int &$result_code [optional] <p>
 * If the result_code argument is present
 * along with the output argument, then the
 * return status of the executed command will be written to this
 * variable.
 * </p>
 * @return string|false The last line from the result of the command. If you need to execute a
 * command and have all the data from the command passed directly back without
 * any interference, use the passthru function.
 * </p>
 * <p>
 * To get the output of the executed command, be sure to set and use the
 * output parameter.
 */
function exec(string $command, &$output, &$result_code): string|false {}

/**
 * <div id="function.system" class="refentry"> <div class="refnamediv">  <h1 class="refname">system</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">system</span> — <span class="dc-title">执行外部程序，并且显示输出</span></p> </div> <div class="refsect1 description" id="refsect1-function.system-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>system</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$command</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$result_code</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">    同 C 版本的 <span class="function"><strong>system()</strong></span> 函数一样，本函数执行    <span class="parameter" style="color:#3A95FF">command</span> 参数所指定的命令，并且输出执行结果。  </p>  <p class="para">    如果 PHP 运行在服务器模块中，<span class="function"><strong>system()</strong></span>    函数还会尝试在每行输出完毕之后，自动刷新 web 服务器的输出缓存。  </p>  <p class="para">    如果要获取一个命令未经任何处理的原始输出，请使用    <span class="function">{@link passthru()}</span> 函数。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.system-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">command</span></dt>     <dd>      <p class="para">       要执行的命令。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">result_code</span></dt>     <dd>      <p class="para">        如果提供 <span class="parameter" style="color:#3A95FF">result_code</span>        参数，则外部命令执行后的返回状态将会被设置到此变量中。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.system-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    成功则返回命令输出的最后一行，失败则返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>  </p> </div> <div class="refsect1 examples" id="refsect1-function.system-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3581">    <p><strong>示例 #1 <span class="function"><strong>system()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #007700">echo </span><span style="color: #DD0000">'&lt;pre&gt;'</span><span style="color: #007700">;<br><br></span><span style="color: #FF8000">// 输出 shell 命令 "ls" 的返回结果<br>// 并且将输出的最后一样内容返回到 \$last_line。<br>// 将命令的返回值保存到 \$retval。<br></span><span style="color: #9876AA">\$last_line </span><span style="color: #007700">= </span><span style="color: #9876AA">system</span><span style="color: #007700">(</span><span style="color: #DD0000">'ls'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$retval</span><span style="color: #007700">);<br><br></span><span style="color: #FF8000">// 打印更多信息<br></span><span style="color: #007700">echo </span><span style="color: #DD0000">'<br>&lt;/pre&gt;<br>&lt;hr /&gt;Last line of the output: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">\$last_line </span><span style="color: #007700">. </span><span style="color: #DD0000">'<br>&lt;hr /&gt;Return value: ' </span><span style="color: #007700">. </span><span style="color: #9876AA">\$retval</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.system-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong><p class="para">当传入用户提供的数据到本函数时，应使用<span class="function">{@link escapeshellarg()}</span> 或 <span class="function">{@link escapeshellcmd()}</span>来防止用户欺骗系统执行任意命令。</p></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: </p><p class="para">如何程序使用此函数启动，为了能保持在后台运行，此程序必须将输出重定向到文件或其它输出流。否则会导致PHP 挂起，直至程序执行结束。</p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.system-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link exec()} - 执行一个外部程序</span></li>    <li><span class="function">{@link passthru()} - 执行外部程序并且显示原始输出</span></li>    <li><span class="function">{@link popen()} - 打开进程文件指针</span></li>    <li><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>    <li><span class="function">{@link pcntl_exec()} - 在当前进程空间执行指定程序</span></li>    <li><a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>   </ul>   </div></div>
 * 
 * Execute an external program and display the output
 * @link https://php.net/manual/zh/function.system.php
 * @param string $command <p>
 * The command that will be executed.
 * </p>
 * @param int &$result_code [optional] <p>
 * If the result_code argument is present, then the
 * return status of the executed command will be written to this
 * variable.
 * </p>
 * @return string|false the last line of the command output on success, and false
 * on failure.
 */
function system(string $command, &$result_code): string|false {}

/**
 * <div id="function.escapeshellcmd" class="refentry"> <div class="refnamediv">  <h1 class="refname">escapeshellcmd</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">escapeshellcmd</span> — <span class="dc-title">shell 元字符转义</span></p> </div> <div class="refsect1 description" id="refsect1-function.escapeshellcmd-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>escapeshellcmd</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$command</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>escapeshellcmd()</strong></span> 对字符串中可能会欺骗    shell 命令执行任意命令的字符进行转义。   此函数保证用户输入的数据在传送到    <span class="function">{@link exec()}</span> 或   <span class="function">{@link system()}</span> 函数，或者 <a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行操作符</a> 之前进行转义。  </p>  <p class="para">   反斜线（\）会在以下字符之前插入：<span class="literal">&amp;#;`|*?~&lt;&gt;^()[]{}\$\</span>、<span class="literal">\x0A</span>   和 <span class="literal">\xFF</span>。 <span class="literal">'</span> 和 <span class="literal">"</span>   仅在不配对儿的时候被转义。在 Windows 平台上，所有这些字符以及 <span class="literal">%</span>   和 <span class="literal">!</span> 字符前面都有一个插入符号（<span class="literal">^</span>）。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.escapeshellcmd-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">command</span></dt>     <dd>      <p class="para">        要转义的命令。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.escapeshellcmd-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   转义后的字符串。  </p> </div> <div class="refsect1 examples" id="refsect1-function.escapeshellcmd-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3575">    <p><strong>示例 #1 <span class="function"><strong>escapeshellcmd()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// 我们故意允许任意数量的参数<br></span><span style="color: #9876AA">\$command </span><span style="color: #007700">= </span><span style="color: #DD0000">'./configure '</span><span style="color: #007700">.</span><span style="color: #9876AA">\$_POST</span><span style="color: #007700">[</span><span style="color: #DD0000">'configure_options'</span><span style="color: #007700">];<br><br></span><span style="color: #9876AA">\$escaped_command </span><span style="color: #007700">= </span><span style="color: #9876AA">escapeshellcmd</span><span style="color: #007700">(</span><span style="color: #9876AA">\$command</span><span style="color: #007700">);<br> <br></span><span style="color: #9876AA">system</span><span style="color: #007700">(</span><span style="color: #9876AA">\$escaped_command</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.escapeshellcmd-notes">  <h3 class="title">注释</h3>   <div class="warning"><strong class="warning">警告</strong>    <p class="para">     <span class="function"><strong>escapeshellcmd()</strong></span> 应被用在完整的命令字符串上。     即使如此，攻击者还是可以传入任意数量的参数。     请使用 <span class="function">{@link escapeshellarg()}</span> 函数     对单个参数进行转义。    </p>   </div>   <div class="warning"><strong class="warning">警告</strong>    <p class="para">     <span class="function"><strong>escapeshellcmd()</strong></span> 不会对空格转义，这在 Windows     上对这样的路径（比如<span class="literal">C:\Program     Files\ProgramName\program.exe</span>）可能会有出现问题。可以使用如下代码暂时解决：    </p><div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$cmd </span><span style="color: #007700">= </span><span style="color: #9876AA">preg_replace</span><span style="color: #007700">(</span><span style="color: #DD0000">'`(?&lt;!^) `'</span><span style="color: #007700">, </span><span style="color: #DD0000">'^ '</span><span style="color: #007700">, </span><span style="color: #9876AA">escapeshellcmd</span><span style="color: #007700">(</span><span style="color: #9876AA">\$cmd</span><span style="color: #007700">));</span></span></blockquote></div>    </div>       </div> </div>  <div class="refsect1 seealso" id="refsect1-function.escapeshellcmd-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link escapeshellarg()} - 把字符串转义为可以在 shell 命令里使用的参数</span></li>    <li><span class="function">{@link exec()} - 执行一个外部程序</span></li>    <li><span class="function">{@link popen()} - 打开进程文件指针</span></li>    <li><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>    <li><a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>   </ul>   </div></div>
 * 
 * Escape shell metacharacters
 * @link https://php.net/manual/zh/function.escapeshellcmd.php
 * @param string $command <p>
 * The command that will be escaped.
 * </p>
 * @return string The escaped string.
 */
#[Pure]
function escapeshellcmd(string $command): string {}

/**
 * <div id="function.escapeshellarg" class="refentry"> <div class="refnamediv">  <h1 class="refname">escapeshellarg</h1>  <p class="verinfo">(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">escapeshellarg</span> — <span class="dc-title">把字符串转义为可以在 shell 命令里使用的参数</span></p> </div> <div class="refsect1 description" id="refsect1-function.escapeshellarg-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>escapeshellarg</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$arg</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>escapeshellarg()</strong></span> 将给字符串增加一个单引号并且能引用或者转义任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell   函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含<span class="function">{@link exec()}</span>、<span class="function">{@link system()}</span>   和<a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a> 。  </p>  <p class="para">   在 Windows 上，<span class="function"><strong>escapeshellarg()</strong></span>   用空格替换了百分号、感叹号（延迟变量替换）和双引号，并在字符串两边加上双引号。此外，每条连续的反斜线(<span class="literal">\</span>)都会被一个额外的反斜线所转义。  </p>   </div> <div class="refsect1 parameters" id="refsect1-function.escapeshellarg-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">arg</span></dt>     <dd>      <p class="para">       需要被转义的参数。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.escapeshellarg-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   转换之后字符串。  </p> </div> <div class="refsect1 examples" id="refsect1-function.escapeshellarg-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3574">    <p><strong>示例 #1 <span class="function"><strong>escapeshellarg()</strong></span> 的例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>system</span><span style="color: #007700">(</span><span style="color: #DD0000">'ls '</span><span style="color: #007700">.</span><span style="color: #9876AA">escapeshellarg</span><span style="color: #007700">(</span><span style="color: #9876AA">\$dir</span><span style="color: #007700">));<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.escapeshellarg-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>    <li><span class="function">{@link exec()} - 执行一个外部程序</span></li>    <li><span class="function">{@link popen()} - 打开进程文件指针</span></li>    <li><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>    <li><a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>   </ul>   </div></div>
 * 
 * Escape a string to be used as a shell argument
 * @link https://php.net/manual/zh/function.escapeshellarg.php
 * @param string $arg <p>
 * The argument that will be escaped.
 * </p>
 * @return string The escaped string.
 */
#[Pure]
function escapeshellarg(string $arg): string {}

/**
 * <div id="function.passthru" class="refentry"> <div class="refnamediv">  <h1 class="refname">passthru</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">passthru</span> — <span class="dc-title">执行外部程序并且显示原始输出</span></p> </div> <div class="refsect1 description" id="refsect1-function.passthru-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>passthru</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$command</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$result_code</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">    同 <span class="function">{@link exec()}</span> 函数类似，    <span class="function"><strong>passthru()</strong></span> 函数    也是用来执行外部命令（<span class="parameter" style="color:#3A95FF">command</span>）的。    当所执行的 Unix 命令输出二进制数据，    并且需要直接传送到浏览器的时候，    需要用此函数来替代 <span class="function">{@link exec()}</span>     或 <span class="function">{@link system()}</span> 函数。    常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。    通过设置 Content-type 为 <span class="literal">image/gif</span>，    然后调用 pbmplus 程序输出 gif 文件，    就可以从 PHP 脚本中直接输出图像到浏览器。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.passthru-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">command</span></dt>     <dd>      <p class="para">       要执行的命令。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">result_code</span></dt>     <dd>      <p class="para">        如果提供  <span class="parameter" style="color:#3A95FF">result_code</span> 参数，        Unix 命令的返回状态会被记录到此参数。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.passthru-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-function.passthru-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   如果 <span class="function"><strong>passthru()</strong></span> 无法执行 <span class="parameter" style="color:#3A95FF">command</span>，会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong>。  </p>  <p class="para">   如果 <span class="parameter" style="color:#3A95FF">command</span> 为空或者包含 null 字节，则抛出 <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.passthru-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.0.0</td>      <td>       如果 <span class="parameter" style="color:#3A95FF">command</span> 为空或者包含 null 字节，<span class="function"><strong>passthru()</strong></span> 现在将抛出       <span class="classname"><a href="https://php.net/manual/zh/class.valueerror.php" class="classname">ValueError</a></span>。之前会发出 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> 并返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 notes" id="refsect1-function.passthru-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong><p class="para">当传入用户提供的数据到本函数时，应使用<span class="function">{@link escapeshellarg()}</span> 或 <span class="function">{@link escapeshellcmd()}</span>来防止用户欺骗系统执行任意命令。</p></div>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>: </p><p class="para">如何程序使用此函数启动，为了能保持在后台运行，此程序必须将输出重定向到文件或其它输出流。否则会导致PHP 挂起，直至程序执行结束。</p></blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.passthru-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link exec()} - 执行一个外部程序</span></li>    <li><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>    <li><span class="function">{@link popen()} - 打开进程文件指针</span></li>    <li><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>    <li><a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>   </ul>   </div></div>
 * 
 * Execute an external program and display raw output
 * @link https://php.net/manual/zh/function.passthru.php
 * @param string $command <p>
 * The command that will be executed.
 * </p>
 * @param int &$result_code [optional] <p>
 * If the result_code argument is present, the
 * return status of the Unix command will be placed here.
 * </p>
 * @return bool|null null on success or false on failure.
 */
#[LanguageLevelTypeAware(['8.2' => 'null|false'], default: 'null|bool')]
function passthru(string $command, &$result_code): ?bool {}

/**
 * <div id="function.shell-exec" class="refentry"> <div class="refnamediv">  <h1 class="refname">shell_exec</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">shell_exec</span> — <span class="dc-title">通过 shell 执行命令并将完整的输出以字符串的方式返回</span></p> </div> <div class="refsect1 description" id="refsect1-function.shell-exec-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>shell_exec</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$command</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">null</a></span></span></div>  <p class="para rdfs-comment">   本函数同<a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    在 Windows 上，底层管道以文本模式打开，这可能导致函数无法进行二进制输出。考虑使用    <span class="function">{@link popen()}</span> 避免这种情况。   </p>  </blockquote> </div> <div class="refsect1 parameters" id="refsect1-function.shell-exec-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">command</span></dt>     <dd>      <p class="para">       要执行的命令。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.shell-exec-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> 包含已执行命令的输出，如果无法建立管道，则为   <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>，如果发生错误或者命令不产生输出则为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    当进程执行过程中发生错误，或者进程不产生输出的情况下，都会返回    <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>。使用本函数无法检测执行是否成功。当需要访问程序退出代码时，应使用    <span class="function">{@link exec()}</span>。   </p>  </blockquote> </div> <div class="refsect1 errors" id="refsect1-function.shell-exec-errors">  <h3 class="title">错误／异常</h3>  <p class="para">   无法建立管道时会产生 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> 级别的错误。  </p> </div> <div class="refsect1 examples" id="refsect1-function.shell-exec-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3580">    <p><strong>示例 #1 <span class="function"><strong>shell_exec()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$output </span><span style="color: #007700">= </span><span style="color: #9876AA">shell_exec</span><span style="color: #007700">(</span><span style="color: #DD0000">'ls -lart'</span><span style="color: #007700">);<br>echo </span><span style="color: #DD0000">"&lt;pre&gt;</span><span style="color: #9876AA">\$output</span><span style="color: #DD0000">&lt;/pre&gt;"</span><span style="color: #007700">;<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.shell-exec-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link exec()} - 执行一个外部程序</span></li>    <li><span class="function">{@link escapeshellcmd()} - shell 元字符转义</span></li>   </ul>   </div></div>
 * 
 * Execute command via shell and return the complete output as a string
 * @link https://php.net/manual/zh/function.shell-exec.php
 * @param string $command <p>
 * The command that will be executed.
 * </p>
 * @return string|false|null A string containing the output from the executed command, false if the pipe cannot be established or null if an error occurs or the command produces no output.
 */
function shell_exec(string $command): string|false|null {}

/**
 * <div id="function.proc-open" class="refentry">   <div class="refnamediv">    <h1 class="refname">proc_open</h1>    <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">proc_open</span> — <span class="dc-title">     执行一个命令，并且打开用来输入/输出的文件指针。    </span></p>   </div>   <div class="refsect1 description" id="refsect1-function.proc-open-description">    <h3 class="title">说明</h3>     <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>proc_open</strong></span>(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$command</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter" style="color:#3A95FF">\$descriptor_spec</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> <span class="parameter reference" style="color:#3A95FF">&amp;\$pipes</span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></span> <span class="parameter" style="color:#3A95FF">\$cwd</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$env_vars</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="methodparam"><span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.null.php" class="type null" style="color:#EAB766">?</a></span><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></span> <span class="parameter" style="color:#3A95FF">\$options</span><span class="initializer"> = <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong></span></span><br>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>    <p class="para rdfs-comment">     类似 <span class="function">{@link popen()}</span> 函数，     但是 <span class="function"><strong>proc_open()</strong></span> 提供了更加强大的控制程序执行的能力。    </p>   </div> <div class="refsect1 parameters" id="refsect1-function.proc-open-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">command</span></dt>     <dd>      <p class="para">       以 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> 形式执行的命令行。特殊字符必须经过转义，并且使用正确的引号。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        <span class="simpara">        在 <em>Windows</em> 上, 除非在 <span class="parameter" style="color:#3A95FF">options</span> 中        把 <span class="literal">bypass_shell</span> 设置为  <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>        ，否则 <span class="parameter" style="color:#3A95FF">command</span> 会被传递给 <strong class="command">cmd.exe</strong> （实际上是 <span class="literal">%ComSpec%</span>）        其中的 <span class="literal">/c</span> 标志是 <em>未加引号的</em> 字符串 （也就是和 <span class="function"><strong>proc_open()</strong></span> 一样）。        这可能会导致 <strong class="command">cmd.exe</strong> 删除 <span class="parameter" style="color:#3A95FF">command</span> 中的引号 （详见 <strong class="command">cmd.exe</strong> 文档），        从而导致意外的，甚至是潜在的危险行为，因为        <strong class="command">cmd.exe</strong> 错误消息可能包含 （部分） 传递的 <span class="parameter" style="color:#3A95FF">command</span> （见下面的例子）。       </span>      </p></blockquote>      <p class="para">       从 PHP 7.4.0 开始，<span class="parameter" style="color:#3A95FF">command</span> 参数可以使用 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 类型传递。       在这种情况下，进程将直接打开（不通过 shell ）。       而 PHP 会处理任何必要的参数转义。      </p>      <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:        </p><p class="para">        在 Windows 上， <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span> 元素的参数转义假定        执行命令的命令行解析与 VC 运行时进行的命令行参数解析兼容。       </p>      </blockquote>     </dd>             <dt><span class="parameter" style="color:#3A95FF">descriptor_spec</span></dt>     <dd>      <p class="para">        一个索引数组。        数组的键表示描述符，数组元素值表示 PHP 如何将这些描述符传送至子进程。        0 表示标准输入（stdin），1 表示标准输出（stdout），2 表示标准错误（stderr）。      </p>      <p class="para">       数组中的元素可以是：       </p><ul class="simplelist">        <li>            包含了要传送至进程的管道的描述信息的数组。第一个元素为描述符类型，第二个元素是针对该描述符的选项。有效的类型有：<span class="literal">pipe</span>（第二个元素可以是：<span class="literal">r</span>         向进程传送该管道的读取端，<span class="literal">w</span> 向进程传送该管道的写入端），以及         <span class="literal">file</span>（第二个元素为文件名）。注意除了 <span class="literal">w</span>         之外的任何内容都视为 <span class="literal">r</span>。        </li>        <li>          流资源表示真实文件描述符（例如：已打开的文件，套接字，<strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.stdin">STDIN</a></span></strong>）。        </li>       </ul>            <p class="para">        文件描述符的值不限于 0，1 和 2，你可以使用任何有效的文件描述符        并将其传送至子进程。        这使得你的脚本可以和其他脚本交互操作。        例如，可以通过指定文件描述符将密码以更加安全的方式        传送至诸如 PGP，GPG 和 openssl 程序，        同时也可以很方便的获取这些程序的状态信息。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">pipes</span></dt>     <dd>      <p class="para">        将被置为索引数组，        其中的元素是被执行程序创建的管道对应到 PHP 这一端的文件指针。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">cwd</span></dt>     <dd>      <p class="para">        要执行命令的初始工作目录。        必须是 <strong>绝对</strong> 路径，        设置此参数为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong>         表示使用默认值（当前 PHP 进程的工作目录）。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">env_vars</span></dt>     <dd>      <p class="para">        要执行的命令所使用的环境变量。        设置此参数为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.null">null</a></span></strong> 表示使用和当前 PHP 进程相同的环境变量。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">options</span></dt>     <dd>      <p class="para">        你还可以指定一些附加选项。        目前支持的选项包括：       </p><ul class="simplelist">        <li>         <span class="literal">suppress_errors</span> （仅用于 Windows 平台）：         设置为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 表示抑制本函数产生的错误。        </li>        <li>         <span class="literal">bypass_shell</span> （仅用于 Windows 平台）：         设置为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 表示绕过 <span class="literal">cmd.exe</span> shell。        </li>        <li>         <span class="literal">blocking_pipes</span> （仅用于 Windows 平台）：         设置为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 表示强制堵塞管道。        </li>        <li>         <span class="literal">create_process_group</span> （仅用于 Windows 平台）：         设置为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 表示允许子进程处理 <span class="literal">CTRL</span> 事件。        </li>        <li>         <span class="literal">create_new_console</span> （仅用于 Windows 平台）：         表示新进程有一个新的控制台，用于代替父进程的控制台。        </li>       </ul>           </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.proc-open-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回表示进程的资源类型，    当使用完毕之后，请调用 <span class="function">{@link proc_close()}</span> 函数来关闭此资源。    如果失败，返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 errors" id="refsect1-function.proc-open-errors">  <h3 class="title">错误／异常</h3>  <p class="simpara">   自 PHP 8.3.0 起，如果 <span class="parameter" style="color:#3A95FF">command</span> 是没有元素的空数组，则会抛出 <span class="exceptionname"><a href="https://php.net/manual/zh/class.valueerror.php" class="exceptionname">ValueError</a></span>。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.proc-open-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>8.3.0</td>       <td>        如果 <span class="parameter" style="color:#3A95FF">command</span> 是没有元素的空数组，将会抛出 <span class="exceptionname"><a href="https://php.net/manual/zh/class.valueerror.php" class="exceptionname">ValueError</a></span>。       </td>      </tr>      <tr>       <td>7.4.4</td>       <td>        为 <span class="parameter" style="color:#3A95FF">options</span> 参数增加 <span class="literal">create_new_console</span> 选项。       </td>      </tr>      <tr>       <td>7.4.0</td>       <td>        <span class="function"><strong>proc_open()</strong></span> 的 <span class="parameter" style="color:#3A95FF">command</span> 参数现在也允许数组类型。       </td>      </tr>      <tr>       <td>7.4.0</td>       <td>        为 <span class="parameter" style="color:#3A95FF">options</span> 参数增加 <span class="literal">create_process_group</span> 选项。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.proc-open-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3578">    <p><strong>示例 #1 <span class="function"><strong>proc_open()</strong></span> 示例</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$descriptorspec </span><span style="color: #007700">= array(<br>   </span><span style="color: #9876AA">0 </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"pipe"</span><span style="color: #007700">, </span><span style="color: #DD0000">"r"</span><span style="color: #007700">),  </span><span style="color: #FF8000">// 标准输入，子进程从此管道中读取数据<br>   </span><span style="color: #9876AA">1 </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"pipe"</span><span style="color: #007700">, </span><span style="color: #DD0000">"w"</span><span style="color: #007700">),  </span><span style="color: #FF8000">// 标准输出，子进程向此管道中写入数据<br>   </span><span style="color: #9876AA">2 </span><span style="color: #007700">=&gt; array(</span><span style="color: #DD0000">"file"</span><span style="color: #007700">, </span><span style="color: #DD0000">"/tmp/error-output.txt"</span><span style="color: #007700">, </span><span style="color: #DD0000">"a"</span><span style="color: #007700">) </span><span style="color: #FF8000">// 标准错误，写入到一个文件<br></span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">\$cwd </span><span style="color: #007700">= </span><span style="color: #DD0000">'/tmp'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$env </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'some_option' </span><span style="color: #007700">=&gt; </span><span style="color: #DD0000">'aeiou'</span><span style="color: #007700">);<br><br></span><span style="color: #9876AA">\$process </span><span style="color: #007700">= </span><span style="color: #9876AA">proc_open</span><span style="color: #007700">(</span><span style="color: #DD0000">'php'</span><span style="color: #007700">, </span><span style="color: #9876AA">\$descriptorspec</span><span style="color: #007700">, </span><span style="color: #9876AA">\$pipes</span><span style="color: #007700">, </span><span style="color: #9876AA">\$cwd</span><span style="color: #007700">, </span><span style="color: #9876AA">\$env</span><span style="color: #007700">);<br><br>if (</span><span style="color: #9876AA">is_resource</span><span style="color: #007700">(</span><span style="color: #9876AA">\$process</span><span style="color: #007700">)) {<br>    </span><span style="color: #FF8000">// \$pipes 现在看起来是这样的：<br>    // 0 =&gt; 可以向子进程标准输入写入的句柄<br>    // 1 =&gt; 可以从子进程标准输出读取的句柄<br>    // 错误输出将被追加到文件 /tmp/error-output.txt<br><br>    </span><span style="color: #9876AA">fwrite</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pipes</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">], </span><span style="color: #DD0000">'&lt;?php print_r(\$_ENV); ?&gt;'</span><span style="color: #007700">);<br>    </span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pipes</span><span style="color: #007700">[</span><span style="color: #9876AA">0</span><span style="color: #007700">]);<br><br>    echo </span><span style="color: #9876AA">stream_get_contents</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pipes</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]);<br>    </span><span style="color: #9876AA">fclose</span><span style="color: #007700">(</span><span style="color: #9876AA">\$pipes</span><span style="color: #007700">[</span><span style="color: #9876AA">1</span><span style="color: #007700">]);<br>    <br><br>    </span><span style="color: #FF8000">// 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。<br>    </span><span style="color: #9876AA">\$return_value </span><span style="color: #007700">= </span><span style="color: #9876AA">proc_close</span><span style="color: #007700">(</span><span style="color: #9876AA">\$process</span><span style="color: #007700">);<br><br>    echo </span><span style="color: #DD0000">"command returned </span><span style="color: #9876AA">\$return_value</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例的输出类似于：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;"><div class="examplescode"><blockquote style="border:1px gray solid;">Array<br>(<br>&nbsp;&nbsp;&nbsp;&nbsp;[some_option]&nbsp;=&gt;&nbsp;aeiou<br>&nbsp;&nbsp;&nbsp;&nbsp;[PWD]&nbsp;=&gt;&nbsp;/tmp<br>&nbsp;&nbsp;&nbsp;&nbsp;[SHLVL]&nbsp;=&gt;&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;[_]&nbsp;=&gt;&nbsp;/usr/local/bin/php<br>)<br>command&nbsp;returned&nbsp;0</blockquote></div>    </div>   </div>    <p class="para">   </p><div class="example" id="example-3579">    <p><strong>示例 #2 <span class="function"><strong>proc_open()</strong></span> 在 Windows 上的怪异行为</strong></p>    <div class="example-contents"><p>     虽然人们可能期望下面的程序能够搜索文件     <var class="filename">filename.txt</var> 进行文本搜索，     并打印结果，但它的行为相当不同。    </p></div>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$descriptorspec </span><span style="color: #007700">= [</span><span style="color: #9876AA">STDIN</span><span style="color: #007700">, </span><span style="color: #9876AA">STDOUT</span><span style="color: #007700">, </span><span style="color: #9876AA">STDOUT</span><span style="color: #007700">];<br></span><span style="color: #9876AA">\$cmd </span><span style="color: #007700">= </span><span style="color: #DD0000">'"findstr" "search" "filename.txt"'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$proc </span><span style="color: #007700">= </span><span style="color: #9876AA">proc_open</span><span style="color: #007700">(</span><span style="color: #9876AA">\$cmd</span><span style="color: #007700">, </span><span style="color: #9876AA">\$descriptorspec</span><span style="color: #007700">, </span><span style="color: #9876AA">\$pipes</span><span style="color: #007700">);<br></span><span style="color: #9876AA">proc_close</span><span style="color: #007700">(</span><span style="color: #9876AA">\$proc</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>    <div class="example-contents"><p>以上示例会输出：</p></div>    <div class="example-contents screen" style="border-color:gray;background:#1E1F22;">     <div class="examplescode"><blockquote style="border:1px gray solid;">'findstr"&nbsp;"search"&nbsp;"filename.txt'&nbsp;is&nbsp;not&nbsp;recognized&nbsp;as&nbsp;an&nbsp;internal&nbsp;or&nbsp;external&nbsp;command,<br>operable&nbsp;program&nbsp;or&nbsp;batch&nbsp;file.</blockquote></div>    </div>    <div class="example-contents"><p>     要解决该行为，通常只需将 <span class="parameter" style="color:#3A95FF">command</span> 加上引号：    </p></div>    <div class="example-contents">     <div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000">\$cmd = '""findstr" "search" "filename.txt""';</span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 notes" id="refsect1-function.proc-open-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    Windows 兼容性：超过 2 的描述符也可以作为可继承的句柄传送到子进程。    但是，由于 Windows 的架构并不将文件描述符和底层句柄进行关联，    所以，子进程无法访问这样的句柄。    标准输入，标准输出和标注错误会按照预期工作。   </p>  </blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    </p><p class="para">    如果你只需要单向的进程管道，    使用 <span class="function">{@link popen()}</span> 函数会更加简单。   </p>  </blockquote> </div>  <div class="refsect1 seealso" id="refsect1-function.proc-open-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link popen()} - 打开进程文件指针</span></li>    <li><span class="function">{@link exec()} - 执行一个外部程序</span></li>    <li><span class="function">{@link system()} - 执行外部程序，并且显示输出</span></li>    <li><span class="function">{@link passthru()} - 执行外部程序并且显示原始输出</span></li>    <li><span class="function">{@link stream_select()} - Runs the equivalent of the select() system call on the given   arrays of streams with a timeout specified by seconds and microseconds</span></li>    <li>The <a href="https://php.net/manual/zh/language.operators.execution.php" class="link">执行运算符</a></li>   </ul>   </div></div>
 * 
 * Execute a command and open file pointers for input/output
 * @link https://php.net/manual/zh/function.proc-open.php
 * @param array|string $command <p>
 * Execute a command and open file pointers for input/output
 * </p>
 * <p>
 * As of PHP 7.4.0, cmd may be passed as array of command parameters.
 * In this case the process will be opened directly
 * (without going through a shell) and PHP will take care of any
 * necessary argument escaping.
 * </p>
 * @param array $descriptor_spec <p>
 * An indexed array where the key represents the descriptor number and the
 * value represents how PHP will pass that descriptor to the child
 * process. 0 is stdin, 1 is stdout, while 2 is stderr.
 * </p>
 * <p>
 * Each element can be:
 * An array describing the pipe to pass to the process. The first
 * element is the descriptor type and the second element is an option for
 * the given type. Valid types are pipe (the second
 * element is either r to pass the read end of the pipe
 * to the process, or w to pass the write end) and
 * file (the second element is a filename).
 * A stream resource representing a real file descriptor (e.g. opened file,
 * a socket, STDIN).
 * </p>
 * <p>
 * The file descriptor numbers are not limited to 0, 1 and 2 - you may
 * specify any valid file descriptor number and it will be passed to the
 * child process. This allows your script to interoperate with other
 * scripts that run as "co-processes". In particular, this is useful for
 * passing passphrases to programs like PGP, GPG and openssl in a more
 * secure manner. It is also useful for reading status information
 * provided by those programs on auxiliary file descriptors.
 * </p>
 * @param array &$pipes <p>
 * Will be set to an indexed array of file pointers that correspond to
 * PHP's end of any pipes that are created.
 * </p>
 * @param string|null $cwd [optional] <p>
 * The initial working dir for the command. This must be an
 * absolute directory path, or null
 * if you want to use the default value (the working dir of the current
 * PHP process)
 * </p>
 * @param array|null $env_vars [optional] <p>
 * An array with the environment variables for the command that will be
 * run, or null to use the same environment as the current PHP process
 * </p>
 * @param array|null $options [optional] <p>
 * Allows you to specify additional options. Currently supported options
 * include:
 * suppress_errors (windows only): suppresses errors generated by this
 * function when it's set to TRUE
 * generated by this function when it's set to true
 * bypass_shell (windows only): bypass cmd.exe shell when set to TRUE
 * context: stream context used when opening files
 * (created with stream_context_create)
 * blocking_pipes: (windows only): force blocking pipes when set to TRUE
 * create_process_group (windows only): allow the child process to handle
 * CTRL events when set to TRUE
 * create_new_console (windows only): the new process has a new console,
 * instead of inheriting its parent's console
 * </p>
 * @return resource|false a resource representing the process, which should be freed using
 * proc_close when you are finished with it. On failure
 * returns false.
 */
function proc_open(array|string $command, array $descriptor_spec, &$pipes, ?string $cwd, ?array $env_vars, ?array $options) {}

/**
 * <div id="function.proc-close" class="refentry"> <div class="refnamediv">  <h1 class="refname">proc_close</h1>  <p class="verinfo">(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">proc_close</span> — <span class="dc-title">关闭由 <span class="function">{@link proc_open()}</span> 打开的进程并且返回进程退出码</span></p> </div> <div class="refsect1 description" id="refsect1-function.proc-close-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>proc_close</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> <span class="parameter" style="color:#3A95FF">\$process</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></div>  <p class="para rdfs-comment">    <span class="function"><strong>proc_close()</strong></span> 同 <span class="function">{@link pclose()}</span> 函数类似，只是    <span class="function"><strong>proc_close()</strong></span> 只能用来关闭由 <span class="function">{@link proc_open()}</span>    函数打开的进程。<span class="function"><strong>proc_close()</strong></span>    函数会等待进程终止，并返回它的退出代码。调用此函数时，为避免死锁，该进程打开的管道将关闭——在管道处于打开状态时，子进程将不能退出。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.proc-close-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">process</span></dt>     <dd>      <p class="para">       要关闭的由 <span class="function">{@link proc_open()}</span> 打开的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> 。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.proc-close-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">    返回进程的终止状态码。    如果发生错误，将返回  <span class="literal">-1</span>。  </p>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:  </p><p class="para">  如果 PHP 是通过 --enable-sigchild 编译的，此函数将没有返回值。 </p></blockquote> </div></div>
 * 
 * Close a process opened by {@see proc_open} and return the exit code of that process
 * @link https://php.net/manual/zh/function.proc-close.php
 * @param resource $process <p>
 * The proc_open resource that will
 * be closed.
 * </p>
 * @return int the termination status of the process that was run.
 */
function proc_close($process): int {}

/**
 * <div id="function.proc-terminate" class="refentry"> <div class="refnamediv">  <h1 class="refname">proc_terminate</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">proc_terminate</span> — <span class="dc-title">杀死由 proc_open 打开的进程</span></p> </div> <div class="refsect1 description" id="refsect1-function.proc-terminate-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>proc_terminate</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> <span class="parameter" style="color:#3A95FF">\$process</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$signal</span><span class="initializer"> = 15</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   向 <span class="parameter" style="color:#3A95FF">process</span>（由 <span class="function">{@link proc_open()}</span>   创建）发送信号通知其终止。<span class="function"><strong>proc_terminate()</strong></span>    调用之后将会立即返回，而不会等待进程终止。  </p>  <p class="para">   <span class="function"><strong>proc_terminate()</strong></span> 允许终止进程并继续其他的任务。可以使用   <span class="function">{@link proc_get_status()}</span> 函数轮询进程（查看是否已经停止）。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.proc-terminate-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">process</span></dt>     <dd>      <p class="para">       将要关闭的由 <span class="function">{@link proc_open()}</span> 打开的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span>。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">signal</span></dt>     <dd>      <p class="para">        可选参数，仅用于 <span>POSIX</span> 操作系统。可以使用        <span class="literal">kill(2)</span> 系统调用指定要发送到进程的信号。默认值为        <span class="literal">SIGTERM</span>。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.proc-terminate-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回已运行进程的终止状态。  </p> </div> <div class="refsect1 seealso" id="refsect1-function.proc-terminate-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link proc_open()} - 执行一个命令，并且打开用来输入/输出的文件指针。</span></li>    <li><span class="function">{@link proc_close()} - 关闭由 proc_open 打开的进程并且返回进程退出码</span></li>    <li><span class="function">{@link proc_get_status()} - 获取由 proc_open 函数打开的进程的信息</span></li>   </ul>   </div></div>
 * 
 * Kills a process opened by proc_open
 * @link https://php.net/manual/zh/function.proc-terminate.php
 * @param resource $process <p>
 * The proc_open resource that will
 * be closed.
 * </p>
 * @param int $signal [optional] <p>
 * This optional parameter is only useful on POSIX
 * operating systems; you may specify a signal to send to the process
 * using the kill(2) system call. The default is
 * SIGTERM.
 * </p>
 * @return bool the termination status of the process that was run.
 */
function proc_terminate($process, int $signal = 15): bool {}

/**
 * <div id="function.proc-get-status" class="refentry"> <div class="refnamediv">  <h1 class="refname">proc_get_status</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">proc_get_status</span> — <span class="dc-title">获取由 <span class="function">{@link proc_open()}</span> 函数打开的进程的信息</span></p> </div> <div class="refsect1 description" id="refsect1-function.proc-get-status-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>proc_get_status</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span> <span class="parameter" style="color:#3A95FF">\$process</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>proc_get_status()</strong></span> 函数可以获取由   <span class="function">{@link proc_open()}</span> 函数打开的进程的信息。  </p> </div>  <div class="refsect1 parameters" id="refsect1-function.proc-get-status-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">process</span></dt>     <dd>      <p class="para">       要检查的由 <span class="function">{@link proc_open()}</span> 打开的进程 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.resource.php" class="type resource" style="color:#EAB766">resource</a></span>。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.proc-get-status-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   收集了进程信息的 <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.array.php" class="type array" style="color:#EAB766">array</a></span>。返回的数组包含下列元素：  </p>  <p class="para">  </p><table class="doctable informaltable">       <thead>     <tr><th>元素</th><th>类型</th><th>描述</th></tr>    </thead>    <tbody class="tbody">     <tr>      <td>command</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span></td>      <td>       传入 <span class="function">{@link proc_open()}</span> 函数的命令行字符串。      </td>     </tr>     <tr>      <td>pid</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>      <td>进程 ID</td>     </tr>     <tr>      <td>running</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></td>      <td>       <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 表示进程还在运行中， <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 表示进程已经终止      </td>     </tr>     <tr>      <td>signaled</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></td>      <td>       <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 表示子进程被未捕获的信号所终止。       在 Windows 平台永远为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>     <tr>      <td>stopped</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></td>      <td>        <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 表示子进程被信号停止。        在 Windows 平台永远为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。      </td>     </tr>     <tr>      <td>exitcode</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>      <td>        进程的退出码（仅在 <span class="literal">running</span> 为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong> 时有意义）。PHP        8.3.0 之前，此函数仅第一次调用返回实际的值，后续调用均返回 <span class="literal">-1</span>。      </td>     </tr>     <tr>      <td>cached</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></td>      <td>       自 PHP 8.3.0 起，当 exit 代码已缓存时为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>。缓存是必要的，确保 exit 代码不会在后续调用进程 API 时丢失。      </td>     </tr>     <tr>      <td>termsig</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>      <td>        导致子进程终止执行的信号值        （仅在 <span class="literal">signaled</span> 为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 时有意义）。      </td>     </tr>     <tr>      <td>stopsig</td>      <td><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span></td>      <td>        导致子进程停止执行的信号值        （仅在 <span class="literal">stopped</span> 为 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong> 时有意义）。      </td>     </tr>    </tbody>     </table>   </div> <div class="refsect1 changelog" id="refsect1-function.proc-get-status-changelog">  <h3 class="title">更新日志</h3>  <table class="doctable informaltable">       <thead>     <tr>      <th>版本</th>      <th>说明</th>     </tr>    </thead>    <tbody class="tbody">     <tr>      <td>8.3.0</td>      <td>       返回的数组中添加了<span class="literal">"cached"</span> 条目。PHP 8.3.0 之前，只有第一次调用才会返回真正的       exit 代码。<span class="literal">"cached"</span> 条目表示已缓存 exit 代码。      </td>     </tr>    </tbody>     </table> </div> <div class="refsect1 seealso" id="refsect1-function.proc-get-status-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link proc_open()} - 执行一个命令，并且打开用来输入/输出的文件指针。</span></li>   </ul>   </div></div>
 * 
 * Get information about a process opened by {@see proc_open}
 * @link https://php.net/manual/zh/function.proc-get-status.php
 * @param resource $process <p>
 * The proc_open resource that will
 * be evaluated.
 * </p>
 * @return array|false An array of collected information on success, and false
 * on failure. The returned array contains the following elements:
 * </p>
 * <p>
 * <tr valign="top"><td>element</td><td>type</td><td>description</td></tr>
 * <tr valign="top">
 * <td>command</td>
 * <td>string</td>
 * <td>
 * The command string that was passed to proc_open.
 * </td>
 * </tr>
 * <tr valign="top">
 * <td>pid</td>
 * <td>int</td>
 * <td>process id</td>
 * </tr>
 * <tr valign="top">
 * <td>running</td>
 * <td>bool</td>
 * <td>
 * true if the process is still running, false if it has
 * terminated.
 * </td>
 * </tr>
 * <tr valign="top">
 * <td>signaled</td>
 * <td>bool</td>
 * <td>
 * true if the child process has been terminated by
 * an uncaught signal. Always set to false on Windows.
 * </td>
 * </tr>
 * <tr valign="top">
 * <td>stopped</td>
 * <td>bool</td>
 * <td>
 * true if the child process has been stopped by a
 * signal. Always set to false on Windows.
 * </td>
 * </tr>
 * <tr valign="top">
 * <td>exitcode</td>
 * <td>int</td>
 * <td>
 * The exit code returned by the process (which is only
 * meaningful if running is false).
 * Only first call of this function return real value, next calls return
 * -1.
 * </td>
 * </tr>
 * <tr valign="top">
 * <td>termsig</td>
 * <td>int</td>
 * <td>
 * The number of the signal that caused the child process to terminate
 * its execution (only meaningful if signaled is true).
 * </td>
 * </tr>
 * <tr valign="top">
 * <td>stopsig</td>
 * <td>int</td>
 * <td>
 * The number of the signal that caused the child process to stop its
 * execution (only meaningful if stopped is true).
 * </td>
 * </tr>
 */
#[ArrayShape(["command" => "string", "pid" => "int", "running" => "bool", "signaled" => "bool", "stopped" => "bool", "exitcode" => "int", "termsig" => "int", "stopsig" => "int"])]
#[LanguageLevelTypeAware(["8.0" => "array"], default: "array|false")]
function proc_get_status($process) {}

/**
 * <div id="function.proc-nice" class="refentry"> <div class="refnamediv">  <h1 class="refname">proc_nice</h1>  <p class="verinfo">(PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">proc_nice</span> — <span class="dc-title">修改当前进程的优先级</span></p> </div> <div class="refsect1 description" id="refsect1-function.proc-nice-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>proc_nice</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$priority</span></span>): <span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.boolean.php" class="type bool" style="color:#EAB766">bool</a></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>proc_nice()</strong></span> 修改当前进程的优先级，   修改量由 <span class="parameter" style="color:#3A95FF">priority</span> 参数指定。   <span class="parameter" style="color:#3A95FF">priority</span> 为正数会降低当前进程优先级，   反之，为负数会提高优先级。  </p>  <p class="para">   <span class="function"><strong>proc_nice()</strong></span> 和   <span class="function">{@link proc_open()}</span> 函数以及和 <span class="function">{@link proc_open()}</span> 相关的函数并无什么关系。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.proc-nice-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">priority</span></dt>     <dd>      <p class="para">       新的优先级值，具体的设定取决于所运行的平台。      </p>      <p class="para">       在 Unix 系统上，较小的值表示较高的优先级，例如：<span class="literal">-20</span>，       而正数值表示更低的优先级。      </p>      <p class="para">       在 Windows 平台上，<span class="parameter" style="color:#3A95FF">priority</span> 参数       的含义如下：      </p>      <table class="doctable informaltable">               <thead>         <tr>          <th>优先级</th>          <th>可能的值</th>         </tr>        </thead>        <tbody class="tbody">         <tr>          <td style="vertical-align: top;">高优先级</td>          <td style="vertical-align: top;">           <span class="parameter" style="color:#3A95FF">priority</span> <span class="literal">&lt; -9</span>          </td>         </tr>         <tr>          <td style="vertical-align: top;">较高优先级</td>          <td style="vertical-align: top;">           <span class="parameter" style="color:#3A95FF">priority</span> <span class="literal">&lt; -4</span>          </td>         </tr>         <tr>          <td style="vertical-align: top;">正常优先级</td>          <td style="vertical-align: top;">           <span class="parameter" style="color:#3A95FF">priority</span> <span class="literal">&lt; 5</span> &amp;            <span class="parameter" style="color:#3A95FF">priority</span> <span class="literal">&gt; -5</span>          </td>         </tr>         <tr>          <td style="vertical-align: top;">较低优先级</td>          <td style="vertical-align: top;">           <span class="parameter" style="color:#3A95FF">priority</span> <span class="literal">&gt; 5</span>          </td>         </tr>         <tr>          <td style="vertical-align: top;">低优先级</td>          <td style="vertical-align: top;">           <span class="parameter" style="color:#3A95FF">priority</span> <span class="literal">&gt; 9</span>          </td>         </tr>        </tbody>             </table>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.proc-nice-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   成功时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.true">true</a></span></strong>， 或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。。   如果发生错误，例如用户无权修改当前进程的优先级，   会生成 <strong><span><a href="https://php.net/manual/zh/errorfunc.constants.php#constant.e-warning">E_WARNING</a></span></strong> 级别的错误。  </p> </div> <div class="refsect1 changelog" id="refsect1-function.proc-nice-changelog">  <h3 class="title">更新日志</h3>  <p class="para">   </p><table class="doctable informaltable">         <thead>      <tr>       <th>版本</th>       <th>说明</th>      </tr>     </thead>     <tbody class="tbody">      <tr>       <td>7.2.0</td>       <td>        在 Windows 平台上可用。       </td>      </tr>     </tbody>       </table>   </div> <div class="refsect1 examples" id="refsect1-function.proc-nice-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-3577">    <p><strong>示例 #1 使用 <span class="function">{@link proc_open()}</span> 函数将进程设置为高优先级</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br></span><span style="color: #FF8000">// Highest priority<br></span><span style="color: #9876AA">proc_nice</span><span style="color: #007700">(-</span><span style="color: #9876AA">20</span><span style="color: #007700">);<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div>  <div class="refsect1 notes" id="refsect1-function.proc-nice-notes">  <h3 class="title">注释</h3>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <strong>可用性</strong><br>   </p><p class="para">    仅在具有 'nice' 能力的系统上才可以使用 <span class="function"><strong>proc_nice()</strong></span> 函数。    下列系统含有 'nice'：SVr4, SVID EXT, AT&amp;T, X/OPEN, BSD 4.3。   </p>  </blockquote>  <blockquote class="note" style="border:1px gray solid"><p><strong class="note" style="border:1px gray solid">注意</strong>:    <strong>Windows 平台</strong><br>   </p><p class="para">    <span class="function"><strong>proc_nice()</strong></span> 函数会改变当前<em>进程</em>优先级，即使 PHP 是使用线程安全模式编译的。   </p>  </blockquote> </div> <div class="refsect1 seealso" id="refsect1-function.proc-nice-seealso">  <h3 class="title">参见</h3>  <ul class="simplelist">   <li><span class="function">{@link pcntl_setpriority()} - 修改任意进程的优先级</span></li>  </ul> </div></div>
 * 
 * Change the priority of the current process. <br/>
 * Since 7.2.0 supported on Windows platforms.
 * @link https://php.net/manual/zh/function.proc-nice.php
 * @param int $priority <p>
 * The increment value of the priority change.
 * </p>
 * @return bool true on success or false on failure.
 * If an error occurs, like the user lacks permission to change the priority,
 * an error of level E_WARNING is also generated.
 */
function proc_nice(int $priority): bool {}

/**
 * <div id="function.getservbyname" class="refentry"> <div class="refnamediv">  <h1 class="refname">getservbyname</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getservbyname</span> — <span class="dc-title">获取互联网服务协议对应的端口</span></p> </div>  <div class="refsect1 description" id="refsect1-function.getservbyname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getservbyname</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$service</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$protocol</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>getservbyname()</strong></span>    返回互联网服务 <span class="parameter" style="color:#3A95FF">service</span> 指定的协议 <span class="parameter" style="color:#3A95FF">protocol</span> 中对应的端口，   依据 <var class="filename">/etc/services</var>。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.getservbyname-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">service</span></dt>     <dd>      <p class="para">       互联网服务名称的字符串。      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">protocol</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">protocol</span> 既可以是 <span class="literal">"tcp"</span>       也可以是 <span class="literal">"udp"</span> (小写)。      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.getservbyname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回端口号，如果 <span class="parameter" style="color:#3A95FF">service</span> 或 <span class="parameter" style="color:#3A95FF">protocol</span> 未找到返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 examples" id="refsect1-function.getservbyname-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-4698">    <p><strong>示例 #1 <span class="function"><strong>getservbyname()</strong></span> 例子</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$services </span><span style="color: #007700">= array(</span><span style="color: #DD0000">'http'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ftp'</span><span style="color: #007700">, </span><span style="color: #DD0000">'ssh'</span><span style="color: #007700">, </span><span style="color: #DD0000">'telnet'</span><span style="color: #007700">, </span><span style="color: #DD0000">'imap'</span><span style="color: #007700">,<br></span><span style="color: #DD0000">'smtp'</span><span style="color: #007700">, </span><span style="color: #DD0000">'nicname'</span><span style="color: #007700">, </span><span style="color: #DD0000">'gopher'</span><span style="color: #007700">, </span><span style="color: #DD0000">'finger'</span><span style="color: #007700">, </span><span style="color: #DD0000">'pop3'</span><span style="color: #007700">, </span><span style="color: #DD0000">'www'</span><span style="color: #007700">);<br><br>foreach (</span><span style="color: #9876AA">\$services </span><span style="color: #007700">as </span><span style="color: #9876AA">\$service</span><span style="color: #007700">) {<br>    </span><span style="color: #9876AA">\$port </span><span style="color: #007700">= </span><span style="color: #9876AA">getservbyname</span><span style="color: #007700">(</span><span style="color: #9876AA">\$service</span><span style="color: #007700">, </span><span style="color: #DD0000">'tcp'</span><span style="color: #007700">);<br>    echo </span><span style="color: #9876AA">\$service </span><span style="color: #007700">. </span><span style="color: #DD0000">": " </span><span style="color: #007700">. </span><span style="color: #9876AA">\$port </span><span style="color: #007700">. </span><span style="color: #DD0000">"&lt;br /&gt;\n"</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.getservbyname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link getservbyport()} - Get Internet service which corresponds to port and protocol</span></li>    <li>     <a href="http://www.iana.org/assignments/port-numbers" class="link external">»&nbsp;http://www.iana.org/assignments/port-numbers</a>     端口号的完整列表    </li>   </ul>   </div></div>
 * 
 * Get port number associated with an Internet service and protocol
 * @link https://php.net/manual/zh/function.getservbyname.php
 * @param string $service <p>
 * The Internet service name, as a string.
 * </p>
 * @param string $protocol <p>
 * protocol is either "tcp"
 * or "udp" (in lowercase).
 * </p>
 * @return int|false the port number, or false if service or
 * protocol is not found.
 */
#[Pure]
function getservbyname(string $service, string $protocol): int|false {}

/**
 * <div id="function.getservbyport" class="refentry"> <div class="refnamediv">  <h1 class="refname">getservbyport</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getservbyport</span> — <span class="dc-title">Get Internet service which corresponds to port and protocol</span></p> </div>  <div class="refsect1 description" id="refsect1-function.getservbyport-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getservbyport</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$port</span></span>, <span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$protocol</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>getservbyport()</strong></span> returns the Internet service   associated with <span class="parameter" style="color:#3A95FF">port</span> for the specified   <span class="parameter" style="color:#3A95FF">protocol</span> as per <var class="filename">/etc/services</var>.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.getservbyport-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">port</span></dt>     <dd>      <p class="para">       The port number.      </p>     </dd>             <dt><span class="parameter" style="color:#3A95FF">protocol</span></dt>     <dd>      <p class="para">       <span class="parameter" style="color:#3A95FF">protocol</span> is either <span class="literal">"tcp"</span>       or <span class="literal">"udp"</span> (in lowercase).      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.getservbyport-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the Internet service name as a string,  或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div> <div class="refsect1 seealso" id="refsect1-function.getservbyport-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link getservbyname()} - 获取互联网服务协议对应的端口</span></li>   </ul>   </div></div>
 * 
 * Get Internet service which corresponds to port and protocol
 * @link https://php.net/manual/zh/function.getservbyport.php
 * @param int $port <p>
 * The port number.
 * </p>
 * @param string $protocol <p>
 * protocol is either "tcp"
 * or "udp" (in lowercase).
 * </p>
 * @return string|false the Internet service name as a string.
 */
#[Pure]
function getservbyport(int $port, string $protocol): string|false {}

/**
 * <div id="function.getprotobyname" class="refentry"> <div class="refnamediv">  <h1 class="refname">getprotobyname</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getprotobyname</span> — <span class="dc-title">Get protocol number associated with protocol name</span></p> </div>  <div class="refsect1 description" id="refsect1-function.getprotobyname-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getprotobyname</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span> <span class="parameter" style="color:#3A95FF">\$protocol</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>getprotobyname()</strong></span> returns the protocol number   associated with the protocol <span class="parameter" style="color:#3A95FF">protocol</span> as per   <var class="filename">/etc/protocols</var>.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.getprotobyname-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">protocol</span></dt>     <dd>      <p class="para">       The protocol name.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.getprotobyname-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the protocol number,  或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div> <div class="refsect1 examples" id="refsect1-function.getprotobyname-examples">  <h3 class="title">示例</h3>  <p class="para">   </p><div class="example" id="example-4697">    <p><strong>示例 #1 <span class="function"><strong>getprotobyname()</strong></span> example</strong></p>    <div class="example-contents"><div class="phpcode" style="border-color:gray;background:#1E1F22;"><blockquote style="border:1px gray solid;white-space:pre-wrap"><span style="color: #000000"><span style="color: #9876AA">&lt;?php<br>\$protocol </span><span style="color: #007700">= </span><span style="color: #DD0000">'tcp'</span><span style="color: #007700">;<br></span><span style="color: #9876AA">\$get_prot </span><span style="color: #007700">= </span><span style="color: #9876AA">getprotobyname</span><span style="color: #007700">(</span><span style="color: #9876AA">\$protocol</span><span style="color: #007700">);<br>if (</span><span style="color: #9876AA">\$get_prot </span><span style="color: #007700">=== </span><span style="color: #9876AA">FALSE</span><span style="color: #007700">) {<br>    echo </span><span style="color: #DD0000">'Invalid Protocol'</span><span style="color: #007700">;<br>} else {<br>    echo </span><span style="color: #DD0000">'Protocol #' </span><span style="color: #007700">. </span><span style="color: #9876AA">\$get_prot</span><span style="color: #007700">;<br>}<br></span><span style="color: #9876AA">?&gt;</span></span></blockquote></div>    </div>   </div>   </div> <div class="refsect1 seealso" id="refsect1-function.getprotobyname-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link getprotobynumber()} - Get protocol name associated with protocol number</span></li>   </ul>   </div></div>
 * 
 * Get protocol number associated with protocol name
 * @link https://php.net/manual/zh/function.getprotobyname.php
 * @param string $protocol <p>
 * The protocol name.
 * </p>
 * @return int|false the protocol number or -1 if the protocol is not found.
 */
#[Pure]
function getprotobyname(string $protocol): int|false {}

/**
 * <div id="function.getprotobynumber" class="refentry"> <div class="refnamediv">  <h1 class="refname">getprotobynumber</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getprotobynumber</span> — <span class="dc-title">Get protocol name associated with protocol number</span></p> </div>  <div class="refsect1 description" id="refsect1-function.getprotobynumber-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getprotobynumber</strong></span>(<span class="methodparam"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span> <span class="parameter" style="color:#3A95FF">\$protocol</span></span>): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.string.php" class="type string" style="color:#EAB766">string</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   <span class="function"><strong>getprotobynumber()</strong></span> returns the protocol name   associated with protocol <span class="parameter" style="color:#3A95FF">protocol</span> as per   <var class="filename">/etc/protocols</var>.  </p> </div> <div class="refsect1 parameters" id="refsect1-function.getprotobynumber-parameters">  <h3 class="title">参数</h3>  <p class="para">   </p><dl>         <dt><span class="parameter" style="color:#3A95FF">protocol</span></dt>     <dd>      <p class="para">       The protocol number.      </p>     </dd>       </dl>   </div> <div class="refsect1 returnvalues" id="refsect1-function.getprotobynumber-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   Returns the protocol name as a string,  或者在失败时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>.  </p> </div> <div class="refsect1 seealso" id="refsect1-function.getprotobynumber-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link getprotobyname()} - Get protocol number associated with protocol name</span></li>   </ul>   </div></div>
 * 
 * Get protocol name associated with protocol number
 * @link https://php.net/manual/zh/function.getprotobynumber.php
 * @param int $protocol <p>
 * The protocol number.
 * </p>
 * @return string|false the protocol name as a string.
 */
#[Pure]
function getprotobynumber(int $protocol): string|false {}

/**
 * <div id="function.getmyuid" class="refentry"> <div class="refnamediv">  <h1 class="refname">getmyuid</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getmyuid</span> — <span class="dc-title">获取 PHP 脚本所有者的 UID</span></p> </div>  <div class="refsect1 description" id="refsect1-function.getmyuid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getmyuid</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="simpara">   获取当前脚本的用户 ID。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.getmyuid-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-function.getmyuid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前脚本的用户 ID，或在错误时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-function.getmyuid-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link getmygid()} - 获取当前 PHP 脚本拥有者的 GID</span></li>    <li><span class="function">{@link getmypid()} - 获取 PHP 进程的 ID</span></li>    <li><span class="function">{@link get_current_user()} - 获取当前 PHP 脚本所有者名称</span></li>    <li><span class="function">{@link getmyinode()} - 获取当前脚本的索引节点（inode）</span></li>    <li><span class="function">{@link getlastmod()} - 获取页面最后修改的时间</span></li>   </ul>   </div></div>
 * 
 * Gets PHP script owner's UID
 * @link https://php.net/manual/zh/function.getmyuid.php
 * @return int|false the user ID of the current script, or false on error.
 */
#[Pure]
function getmyuid(): int|false {}

/**
 * <div id="function.getmygid" class="refentry"> <div class="refnamediv">  <h1 class="refname">getmygid</h1>  <p class="verinfo">(PHP 4 &gt;= 4.1.0, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getmygid</span> — <span class="dc-title">获取当前 PHP 脚本拥有者的 GID</span></p> </div>  <div class="refsect1 description" id="refsect1-function.getmygid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getmygid</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="simpara">   获取当前 PHP 脚本拥有者的用户组 ID。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.getmygid-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-function.getmygid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前 PHP 脚本拥有者的用户组 ID，或在错误时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-function.getmygid-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link getmyuid()} - 获取 PHP 脚本所有者的 UID</span></li>    <li><span class="function">{@link getmypid()} - 获取 PHP 进程的 ID</span></li>    <li><span class="function">{@link get_current_user()} - 获取当前 PHP 脚本所有者名称</span></li>    <li><span class="function">{@link getmyinode()} - 获取当前脚本的索引节点（inode）</span></li>    <li><span class="function">{@link getlastmod()} - 获取页面最后修改的时间</span></li>   </ul>   </div></div>
 * 
 * Get PHP script owner's GID
 * @link https://php.net/manual/zh/function.getmygid.php
 * @return int|false the group ID of the current script, or false on error.
 */
#[Pure]
function getmygid(): int|false {}

/**
 * <div id="function.getmypid" class="refentry"> <div class="refnamediv">  <h1 class="refname">getmypid</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getmypid</span> — <span class="dc-title">获取 PHP 进程的 ID</span></p> </div>  <div class="refsect1 description" id="refsect1-function.getmypid-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getmypid</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取当前 PHP 进程 ID。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.getmypid-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-function.getmypid-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   返回当前 PHP 进程 ID，或在错误时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 notes" id="refsect1-function.getmypid-notes">  <h3 class="title">注释</h3>  <div class="warning"><strong class="warning">警告</strong>   <p class="para">    进程 ID 并不是唯一的，所以他们是一个弱熵源。    对安全性有依赖的上下文中我们不推荐依赖于 pid。   </p>  </div> </div> <div class="refsect1 seealso" id="refsect1-function.getmypid-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link getmygid()} - 获取当前 PHP 脚本拥有者的 GID</span></li>    <li><span class="function">{@link getmyuid()} - 获取 PHP 脚本所有者的 UID</span></li>    <li><span class="function">{@link get_current_user()} - 获取当前 PHP 脚本所有者名称</span></li>    <li><span class="function">{@link getmyinode()} - 获取当前脚本的索引节点（inode）</span></li>    <li><span class="function">{@link getlastmod()} - 获取页面最后修改的时间</span></li>   </ul>   </div></div>
 * 
 * Gets PHP's process ID
 * @link https://php.net/manual/zh/function.getmypid.php
 * @return int|false the current PHP process ID, or false on error.
 */
#[Pure]
function getmypid(): int|false {}

/**
 * <div id="function.getmyinode" class="refentry"> <div class="refnamediv">  <h1 class="refname">getmyinode</h1>  <p class="verinfo">(PHP 4, PHP 5, PHP 7, PHP 8)</p><p class="refpurpose"><span class="refname">getmyinode</span> — <span class="dc-title">获取当前脚本的索引节点（inode）</span></p> </div>  <div class="refsect1 description" id="refsect1-function.getmyinode-description">  <h3 class="title">说明</h3>  <div class="methodsynopsis dc-description">   <span class="methodname" style="color:#CC7832"><strong>getmyinode</strong></span>(): <span class="type" style="color:#EAB766"><span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.integer.php" class="type int" style="color:#EAB766">int</a></span>|<span class="type" style="color:#EAB766"><a href="https://php.net/manual/zh/language.types.singleton.php" class="type false" style="color:#EAB766">false</a></span></span></div>  <p class="para rdfs-comment">   获取当前脚本的索引节点（inode）。  </p> </div> <div class="refsect1 parameters" id="refsect1-function.getmyinode-parameters">  <h3 class="title">参数</h3>  <p class="para">此函数没有参数。</p> </div> <div class="refsect1 returnvalues" id="refsect1-function.getmyinode-returnvalues">  <h3 class="title">返回值</h3>  <p class="para">   以整型返回当前脚本的索引节点（inode），或在错误时返回 <strong><span><a href="https://php.net/manual/zh/reserved.constants.php#constant.false">false</a></span></strong>。  </p> </div> <div class="refsect1 seealso" id="refsect1-function.getmyinode-seealso">  <h3 class="title">参见</h3>  <p class="para">   </p><ul class="simplelist">    <li><span class="function">{@link getmygid()} - 获取当前 PHP 脚本拥有者的 GID</span></li>    <li><span class="function">{@link getmyuid()} - 获取 PHP 脚本所有者的 UID</span></li>    <li><span class="function">{@link getmypid()} - 获取 PHP 进程的 ID</span></li>    <li><span class="function">{@link get_current_user()} - 获取当前 PHP 脚本所有者名称</span></li>    <li><span class="function">{@link getlastmod()} - 获取页面最后修改的时间</span></li>   </ul>   </div></div>
 * 
 * Gets the inode of the current script
 * @link https://php.net/manual/zh/function.getmyinode.php
 * @return int|false the current script's inode as an integer, or false on error.
 */
#[Pure]
function getmyinode(): int|false {}
